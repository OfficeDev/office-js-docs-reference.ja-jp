### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CellValueConditionalFormat:class'
    summary: |-
      <span data-ttu-id="23e11-101">セル値の条件付き書式を表します。</span><span class="sxs-lookup"><span data-stu-id="23e11-101">Represents a cell value conditional format.</span></span>

      <span data-ttu-id="23e11-102">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="23e11-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CellValueConditionalFormat
    fullName: Excel.CellValueConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CellValueConditionalFormat#context:member'
      - 'excel!Excel.CellValueConditionalFormat#format:member'
      - 'excel!Excel.CellValueConditionalFormat#load:member(1)'
      - 'excel!Excel.CellValueConditionalFormat#load:member(2)'
      - 'excel!Excel.CellValueConditionalFormat#load:member(3)'
      - 'excel!Excel.CellValueConditionalFormat#rule:member'
      - 'excel!Excel.CellValueConditionalFormat#set:member(1)'
      - 'excel!Excel.CellValueConditionalFormat#set:member(2)'
      - 'excel!Excel.CellValueConditionalFormat#toJSON:member(1)'
  - uid: 'excel!Excel.CellValueConditionalFormat#context:member'
    summary: <span data-ttu-id="23e11-103">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="23e11-103">The request context associated with the object.</span></span> <span data-ttu-id="23e11-104">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="23e11-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CellValueConditionalFormat#format:member'
    summary: |-
      <span data-ttu-id="23e11-105">書式設定オブジェクトを返し、条件付き書式のフォント、塗りつぶし、罫線などのプロパティをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="23e11-105">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.</span></span>

      <span data-ttu-id="23e11-106">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="23e11-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalRangeFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="23e11-107">例</span><span class="sxs-lookup"><span data-stu-id="23e11-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CellValueConditionalFormat#load:member(1)'
    summary: <span data-ttu-id="23e11-108">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="23e11-108">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="23e11-109">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e11-109">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="23e11-110">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="23e11-110">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="23e11-111">`load(option?: string | string[]): Excel.CellValueConditionalFormat`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="23e11-111">`load(option?: string | string[]): Excel.CellValueConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="23e11-112">`load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="23e11-112">`load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="23e11-113">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="23e11-113">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="23e11-114">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="23e11-114">It is similar to the preceding signature.</span></span> <span data-ttu-id="23e11-115">Top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="23e11-115">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="23e11-116">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="23e11-116">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="23e11-117">Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="23e11-117">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CellValueConditionalFormatLoadOptions): Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.CellValueConditionalFormatLoadOptions:interface'
  - uid: 'excel!Excel.CellValueConditionalFormat#load:member(2)'
    summary: <span data-ttu-id="23e11-118">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="23e11-118">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="23e11-119">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e11-119">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="23e11-120">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="23e11-120">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CellValueConditionalFormat#load:member(3)'
    summary: <span data-ttu-id="23e11-121">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="23e11-121">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="23e11-122">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="23e11-122">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="23e11-123">ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="23e11-123">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.CellValueConditionalFormat#rule:member'
    summary: |-
      <span data-ttu-id="23e11-124">この条件付き書式の Rule オブジェクトを表します。</span><span class="sxs-lookup"><span data-stu-id="23e11-124">Represents the Rule object on this conditional format.</span></span>

      <span data-ttu-id="23e11-125">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="23e11-125">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.ConditionalCellValueRule;'
      return:
        type:
          - 'excel!Excel.ConditionalCellValueRule:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="23e11-126">例</span><span class="sxs-lookup"><span data-stu-id="23e11-126">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CellValueConditionalFormat#set:member(1)'
    summary: '<span data-ttu-id="23e11-127">一度に1つのオブジェクトの複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="23e11-127">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="23e11-128">適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="23e11-128">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="23e11-129">このメソッドには、次の追加のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="23e11-129">This method has the following additional signature:</span></span>

      `set(properties: Excel.CellValueConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.CellValueConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="23e11-130">メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="23e11-130">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.CellValueConditionalFormatUpdateData:interface'
        - id: options
          description: <span data-ttu-id="23e11-131">プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="23e11-131">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.CellValueConditionalFormat#set:member(2)'
    summary: '<span data-ttu-id="23e11-132">既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="23e11-132">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.CellValueConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.CellValueConditionalFormat:class'
  - uid: 'excel!Excel.CellValueConditionalFormat#toJSON:member(1)'
    summary: '<span data-ttu-id="23e11-133">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="23e11-133">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="23e11-134">.</span><span class="sxs-lookup"><span data-stu-id="23e11-134"></span></span> <span data-ttu-id="23e11-135">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="23e11-135"></span></span><!-- --><span data-ttu-id="23e11-136">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の CellValueConditionalFormat オブジェクトは API オブジェクトであるのに対し、 `toJSON`メソッドはプレーンな JavaScript オブジェクトを返します (型は`Excel.Interfaces.CellValueConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="23e11-136">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CellValueConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CellValueConditionalFormatData`</span></span><!-- --><span data-ttu-id="23e11-137">) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。</span><span class="sxs-lookup"><span data-stu-id="23e11-137">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CellValueConditionalFormatData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CellValueConditionalFormatData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ConditionalRangeFormat:class'
    name: Excel.ConditionalRangeFormat
  - uid: 'excel!Excel.CellValueConditionalFormat:class'
    name: Excel.CellValueConditionalFormat
  - uid: 'excel!Excel.Interfaces.CellValueConditionalFormatLoadOptions:interface'
    name: Excel.Interfaces.CellValueConditionalFormatLoadOptions
  - uid: 'excel!Excel.ConditionalCellValueRule:interface'
    name: Excel.ConditionalCellValueRule
  - uid: 'excel!Excel.Interfaces.CellValueConditionalFormatUpdateData:interface'
    name: Interfaces.CellValueConditionalFormatUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.CellValueConditionalFormatData:interface'
    name: Excel.Interfaces.CellValueConditionalFormatData