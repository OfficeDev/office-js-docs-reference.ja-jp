### YamlMime:TSType
name: Excel.ShapeCollection
uid: excel!Excel.ShapeCollection:class
package: excel!
fullName: Excel.ShapeCollection
summary: >-
  ワークシート内のすべての図形のコレクションを表します。


  \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.ShapeCollection#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: items
  uid: excel!Excel.ShapeCollection#items:member
  package: excel!
  fullName: items
  summary: このコレクション内に読み込まれた子アイテムを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Shape[];'
    return:
      type: <xref uid="excel!Excel.Shape:class" />[]
methods:
- name: addGeometricShape(geometricShapeType)
  uid: excel!Excel.ShapeCollection#addGeometricShape:member(1)
  package: excel!
  fullName: addGeometricShape(geometricShapeType)
  summary: >-
    幾何学的図形をワークシートに追加します。 新しい図形を表す Shape オブジェクトを返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addGeometricShape(geometricShapeType: Excel.GeometricShapeType): Excel.Shape;'
    parameters:
    - id: geometricShapeType
      description: ジオメトリック図形の種類を表します。 詳細については、Excel.GeometricShapeType をご覧ください。
      type: <xref uid="excel!Excel.GeometricShapeType:enum" />
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-create-and-delete.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Shapes\");\n    const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);\n    shape.left = 5;\n    shape.top = 5;\n    shape.height = 175;\n    shape.width = 200;\n    await context.sync();\n});\n```"
- name: addGeometricShape(geometricShapeTypeString)
  uid: excel!Excel.ShapeCollection#addGeometricShape:member(2)
  package: excel!
  fullName: addGeometricShape(geometricShapeTypeString)
  summary: >-
    幾何学的図形をワークシートに追加します。 新しい図形を表す Shape オブジェクトを返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addGeometricShape(geometricShapeTypeString: "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus"): Excel.Shape;'
    parameters:
    - id: geometricShapeTypeString
      description: ジオメトリック図形の種類を表します。 詳細については、Excel.GeometricShapeType をご覧ください。
      type: "\"LineInverse\" | \"Triangle\" | \"RightTriangle\" | \"Rectangle\" | \"Diamond\" | \"Parallelogram\" | \"Trapezoid\" | \"NonIsoscelesTrapezoid\" | \"Pentagon\" | \"Hexagon\" | \"Heptagon\" | \"Octagon\" | \"Decagon\" | \"Dodecagon\" | \"Star4\" | \"Star5\" | \"Star6\" | \"Star7\" | \"Star8\" | \"Star10\" | \"Star12\" | \"Star16\" | \"Star24\" | \"Star32\" | \"RoundRectangle\" | \"Round1Rectangle\" | \"Round2SameRectangle\" | \"Round2DiagonalRectangle\" | \"SnipRoundRectangle\" | \"Snip1Rectangle\" | \"Snip2SameRectangle\" | \"Snip2DiagonalRectangle\" | \"Plaque\" | \"Ellipse\" | \"Teardrop\" | \"HomePlate\" | \"Chevron\" | \"PieWedge\" | \"Pie\" | \"BlockArc\" | \"Donut\" | \"NoSmoking\" | \"RightArrow\" | \"LeftArrow\" | \"UpArrow\" | \"DownArrow\" | \"StripedRightArrow\" | \"NotchedRightArrow\" | \"BentUpArrow\" | \"LeftRightArrow\" | \"UpDownArrow\" | \"LeftUpArrow\" | \"LeftRightUpArrow\" | \"QuadArrow\" | \"LeftArrowCallout\" | \"RightArrowCallout\" | \"UpArrowCallout\" | \"DownArrowCallout\" | \"LeftRightArrowCallout\" | \"UpDownArrowCallout\" | \"QuadArrowCallout\" | \"BentArrow\" | \"UturnArrow\" | \"CircularArrow\" | \"LeftCircularArrow\" | \"LeftRightCircularArrow\" | \"CurvedRightArrow\" | \"CurvedLeftArrow\" | \"CurvedUpArrow\" | \"CurvedDownArrow\" | \"SwooshArrow\" | \"Cube\" | \"Can\" | \"LightningBolt\" | \"Heart\" | \"Sun\" | \"Moon\" | \"SmileyFace\" | \"IrregularSeal1\" | \"IrregularSeal2\" | \"FoldedCorner\" | \"Bevel\" | \"Frame\" | \"HalfFrame\" | \"Corner\" | \"DiagonalStripe\" | \"Chord\" | \"Arc\" | \"LeftBracket\" | \"RightBracket\" | \"LeftBrace\" | \"RightBrace\" | \"BracketPair\" | \"BracePair\" | \"Callout1\" | \"Callout2\" | \"Callout3\" | \"AccentCallout1\" | \"AccentCallout2\" | \"AccentCallout3\" | \"BorderCallout1\" | \"BorderCallout2\" | \"BorderCallout3\" | \"AccentBorderCallout1\" | \"AccentBorderCallout2\" | \"AccentBorderCallout3\" | \"WedgeRectCallout\" | \"WedgeRRectCallout\" | \"WedgeEllipseCallout\" | \"CloudCallout\" | \"Cloud\" | \"Ribbon\" | \"Ribbon2\" | \"EllipseRibbon\" | \"EllipseRibbon2\" | \"LeftRightRibbon\" | \"VerticalScroll\" | \"HorizontalScroll\" | \"Wave\" | \"DoubleWave\" | \"Plus\" | \"FlowChartProcess\" | \"FlowChartDecision\" | \"FlowChartInputOutput\" | \"FlowChartPredefinedProcess\" | \"FlowChartInternalStorage\" | \"FlowChartDocument\" | \"FlowChartMultidocument\" | \"FlowChartTerminator\" | \"FlowChartPreparation\" | \"FlowChartManualInput\" | \"FlowChartManualOperation\" | \"FlowChartConnector\" | \"FlowChartPunchedCard\" | \"FlowChartPunchedTape\" | \"FlowChartSummingJunction\" | \"FlowChartOr\" | \"FlowChartCollate\" | \"FlowChartSort\" | \"FlowChartExtract\" | \"FlowChartMerge\" | \"FlowChartOfflineStorage\" | \"FlowChartOnlineStorage\" | \"FlowChartMagneticTape\" | \"FlowChartMagneticDisk\" | \"FlowChartMagneticDrum\" | \"FlowChartDisplay\" | \"FlowChartDelay\" | \"FlowChartAlternateProcess\" | \"FlowChartOffpageConnector\" | \"ActionButtonBlank\" | \"ActionButtonHome\" | \"ActionButtonHelp\" | \"ActionButtonInformation\" | \"ActionButtonForwardNext\" | \"ActionButtonBackPrevious\" | \"ActionButtonEnd\" | \"ActionButtonBeginning\" | \"ActionButtonReturn\" | \"ActionButtonDocument\" | \"ActionButtonSound\" | \"ActionButtonMovie\" | \"Gear6\" | \"Gear9\" | \"Funnel\" | \"MathPlus\" | \"MathMinus\" | \"MathMultiply\" | \"MathDivide\" | \"MathEqual\" | \"MathNotEqual\" | \"CornerTabs\" | \"SquareTabs\" | \"PlaqueTabs\" | \"ChartX\" | \"ChartStar\" | \"ChartPlus\""
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: ''
- name: addGroup(values)
  uid: excel!Excel.ShapeCollection#addGroup:member(1)
  package: excel!
  fullName: addGroup(values)
  summary: >-
    このコレクションのワークシート内の図形のサブセットをグループ化します。 図形の新しいグループを表す Shape オブジェクトを返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addGroup(values: Array<string | Shape>): Excel.Shape;'
    parameters:
    - id: values
      description: 図形 ID または図形オブジェクトの配列。
      type: Array&lt;string | <xref uid="excel!Excel.Shape:class" />&gt;
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-groups.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Shapes\");\n    const square = sheet.shapes.getItem(\"Square\");\n    const pentagon = sheet.shapes.getItem(\"Pentagon\");\n    const octagon = sheet.shapes.getItem(\"Octagon\");\n\n    const shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);\n    shapeGroup.name = \"Group\";\n    console.log(\"Shapes grouped\");\n\n    await context.sync();\n});\n```"
- name: addImage(base64ImageString)
  uid: excel!Excel.ShapeCollection#addImage:member(1)
  package: excel!
  fullName: addImage(base64ImageString)
  summary: >-
    base64 エンコード文字列から画像を作成し、それをワークシートに追加します。 新しい画像を表す Shape オブジェクトを返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addImage(base64ImageString: string): Excel.Shape;'
    parameters:
    - id: base64ImageString
      description: JPEG または PNG 形式のイメージを表す、base64 でエンコードされた文字列。
      type: string
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-images.yaml\nconst myFile = <HTMLInputElement>document.getElementById(\"selectedFile\");\nconst reader = new FileReader();\n\nreader.onload = (event) => {\n    Excel.run((context) => {\n        const startIndex = reader.result.toString().indexOf(\"base64,\");\n        const mybase64 = reader.result.toString().substr(startIndex + 7);\n        const sheet = context.workbook.worksheets.getItem(\"Shapes\");\n        const image = sheet.shapes.addImage(mybase64);\n        image.name = \"Image\";\n        return context.sync();\n    });\n};\n\n// Read in the image file as a data URL.\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: addLine(startLeft, startTop, endLeft, endTop, connectorType)
  uid: excel!Excel.ShapeCollection#addLine:member(1)
  package: excel!
  fullName: addLine(startLeft, startTop, endLeft, endTop, connectorType)
  summary: >-
    ワークシートに行を追加します。 新しい行を表す Shape オブジェクトを返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addLine(startLeft: number, startTop: number, endLeft: number, endTop: number, connectorType?: Excel.ConnectorType): Excel.Shape;'
    parameters:
    - id: startLeft
      description: ワークシートの左端から左端までの距離をポイント単位で指定します。
      type: number
    - id: startTop
      description: ワークシートの上端から、行の先頭までの距離をポイント単位で指定します。
      type: number
    - id: endLeft
      description: ワークシートの左端の線の終点からの距離をポイント単位で指定します。
      type: number
    - id: endTop
      description: ワークシートの上端から、行の末尾までの距離をポイント単位で指定します。
      type: number
    - id: connectorType
      description: コネクタの種類を表します。 詳細については、「ConnectorType」を参照してください。
      type: <xref uid="excel!Excel.ConnectorType:enum" />
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-lines.yaml\nawait Excel.run(async (context) => {\n    const shapes = context.workbook.worksheets.getItem(\"Shapes\").shapes;\n    const line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);\n    line.name = \"StraightLine\";\n    await context.sync();\n});\n```"
- name: addLine(startLeft, startTop, endLeft, endTop, connectorTypeString)
  uid: excel!Excel.ShapeCollection#addLine:member(2)
  package: excel!
  fullName: addLine(startLeft, startTop, endLeft, endTop, connectorTypeString)
  summary: >-
    ワークシートに行を追加します。 新しい行を表す Shape オブジェクトを返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addLine(startLeft: number, startTop: number, endLeft: number, endTop: number, connectorTypeString?: "Straight" | "Elbow" | "Curve"): Excel.Shape;'
    parameters:
    - id: startLeft
      description: ワークシートの左端から左端までの距離をポイント単位で指定します。
      type: number
    - id: startTop
      description: ワークシートの上端から、行の先頭までの距離をポイント単位で指定します。
      type: number
    - id: endLeft
      description: ワークシートの左端の線の終点からの距離をポイント単位で指定します。
      type: number
    - id: endTop
      description: ワークシートの上端から、行の末尾までの距離をポイント単位で指定します。
      type: number
    - id: connectorTypeString
      description: コネクタの種類を表します。 詳細については、「ConnectorType」を参照してください。
      type: "\"Straight\" | \"Elbow\" | \"Curve\""
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: ''
- name: addTextBox(text)
  uid: excel!Excel.ShapeCollection#addTextBox:member(1)
  package: excel!
  fullName: addTextBox(text)
  summary: >-
    指定されたテキストを含むテキスト ボックスをワークシートに追加します。 新しいテキスト ボックスを表す Shape オブジェクトを返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTextBox(text?: string): Excel.Shape;'
    parameters:
    - id: text
      description: '[作成済み] テキストボックスに表示されるテキストを表します。'
      type: string
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/44-shape/shape-textboxes.yaml\nawait Excel.run(async (context) => {\n    const shapes = context.workbook.worksheets.getItem(\"Shapes\").shapes;\n    const textbox = shapes.addTextBox(\"A box with text\");\n    textbox.left = 100;\n    textbox.top = 100;\n    textbox.height = 20;\n    textbox.width = 175;\n    textbox.name = \"Textbox\";\n    await context.sync();\n});\n```"
- name: getCount()
  uid: excel!Excel.ShapeCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    ワークシートの図形数を返します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getItem(key)
  uid: excel!Excel.ShapeCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: >-
    名前または ID を使用して図形を取得します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: string): Excel.Shape;'
    parameters:
    - id: key
      description: 取得する図形の名前または ID を指定します。
      type: string
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: ''
- name: getItemAt(index)
  uid: excel!Excel.ShapeCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    コレクション内の位置を使用して図形を取得します。


    \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.Shape;'
    parameters:
    - id: index
      description: 取得する図形の0から始まるインデックスを指定します。
      type: number
    return:
      type: <xref uid="excel!Excel.Shape:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.ShapeCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ShapeCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ShapeCollection;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティを指定するオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.ShapeCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.ShapeCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ShapeCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ShapeCollection;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.ShapeCollection:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.ShapeCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.ShapeCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマで区切られた文字列で、 `propertyNamesAndPaths.expand` 読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.ShapeCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.ShapeCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: '`toJSON()`API オブジェクトが渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->`toJSON`その後、渡されたオブジェクトのメソッドを呼び出します。元の `Excel.ShapeCollection` オブジェクトは API オブジェクトであるのに対し、 `toJSON` メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.ShapeCollectionData`<!-- -->) を使用して、コレクションのアイテムから読み込まれたプロパティの浅いコピーを持つ "items" 配列を含みます。'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ShapeCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ShapeCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: d2c3c6a407e2d0f257205c535eff0ea254060afd
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49184841"
