### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Application:class'
    summary: |-
      <span data-ttu-id="55a4d-101">ブックを管理する Excel アプリケーションを表します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-101">Represents the Excel application that manages the workbook.</span></span>

      <span data-ttu-id="55a4d-102">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Application
    fullName: Excel.Application
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Application#calculate:member(1)'
      - 'excel!Excel.Application#calculate:member(2)'
      - 'excel!Excel.Application#calculationEngineVersion:member'
      - 'excel!Excel.Application#calculationMode:member'
      - 'excel!Excel.Application#calculationState:member'
      - 'excel!Excel.Application#context:member'
      - 'excel!Excel.Application#iterativeCalculation:member'
      - 'excel!Excel.Application#load:member(1)'
      - 'excel!Excel.Application#load:member(2)'
      - 'excel!Excel.Application#load:member(3)'
      - 'excel!Excel.Application#set:member(1)'
      - 'excel!Excel.Application#set:member(2)'
      - 'excel!Excel.Application#suspendApiCalculationUntilNextSync:member(1)'
      - 'excel!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)'
      - 'excel!Excel.Application#toJSON:member(1)'
  - uid: 'excel!Excel.Application#calculate:member(1)'
    summary: |-
      <span data-ttu-id="55a4d-103">Excel で現在開いているすべてのブックを再計算します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-103">Recalculate all currently opened workbooks in Excel.</span></span>

      <span data-ttu-id="55a4d-104">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(calculationType)
    fullName: calculate(calculationType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationType: Excel.CalculationType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: calculationType
          description: <span data-ttu-id="55a4d-105">使用する計算の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-105">Specifies the calculation type to use.</span></span> <span data-ttu-id="55a4d-106">詳細については、「Excel の種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="55a4d-106">See Excel.CalculationType for details.</span></span>
          type:
            - 'excel!Excel.CalculationType:enum'
  - uid: 'excel!Excel.Application#calculate:member(2)'
    summary: |-
      <span data-ttu-id="55a4d-107">Excel で現在開いているすべてのブックを再計算します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-107">Recalculate all currently opened workbooks in Excel.</span></span>

      <span data-ttu-id="55a4d-108">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-108">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(calculationTypeString)
    fullName: calculate(calculationTypeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationTypeString: "Recalculate" | "Full" | "FullRebuild"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="55a4d-109">例</span><span class="sxs-lookup"><span data-stu-id="55a4d-109">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              ctx.workbook.application.calculate('Full');
              return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: calculationTypeString
          description: <span data-ttu-id="55a4d-110">使用する計算の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-110">Specifies the calculation type to use.</span></span> <span data-ttu-id="55a4d-111">詳細については、「Excel の種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="55a4d-111">See Excel.CalculationType for details.</span></span>
          type:
            - '"Recalculate" | "Full" | "FullRebuild"'
  - uid: 'excel!Excel.Application#calculationEngineVersion:member'
    summary: |-
      <span data-ttu-id="55a4d-112">最後の完全な再計算に使用した Excel 計算エンジンのバージョンを返します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-112">Returns the Excel calculation engine version used for the last full recalculation.</span></span> <span data-ttu-id="55a4d-113">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="55a4d-113">Read-only.</span></span>

      <span data-ttu-id="55a4d-114">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculationEngineVersion
    fullName: calculationEngineVersion
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly calculationEngineVersion: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Application#calculationMode:member'
    summary: |-
      <span data-ttu-id="55a4d-115">CalculationMode の定数によって定義されている、ブックで使用されている計算モードを返します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-115">Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode.</span></span> <span data-ttu-id="55a4d-116">可能な値は次のとおりです。`Automatic`</span><span class="sxs-lookup"><span data-stu-id="55a4d-116">Possible values are: `Automatic`</span></span><!-- --><span data-ttu-id="55a4d-117">、Excel は再計算を制御します。`AutomaticExceptTables`</span><span class="sxs-lookup"><span data-stu-id="55a4d-117">, where Excel controls recalculation; `AutomaticExceptTables`</span></span><!-- --><span data-ttu-id="55a4d-118">、Excel は再計算を制御しますが、テーブル内の変更は無視します。`Manual`</span><span class="sxs-lookup"><span data-stu-id="55a4d-118">, where Excel controls recalculation but ignores changes in tables; `Manual`</span></span><!-- --><span data-ttu-id="55a4d-119">、ユーザーが要求すると、計算が行われます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-119">, where calculation is done when the user requests it.</span></span>

      <span data-ttu-id="55a4d-120">\[[API set: ExcelApi 1.1 for get、set の 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-120">\[ [API set: ExcelApi 1.1 for get, 1.8 for set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculationMode
    fullName: calculationMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
      return:
        type:
          - 'excel!Excel.Application#calculationMode~0:complex'
  - uid: 'excel!Excel.Application#calculationState:member'
    summary: |-
      <span data-ttu-id="55a4d-121">アプリケーションの計算の状態を返します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-121">Returns the calculation state of the application.</span></span> <span data-ttu-id="55a4d-122">詳細については、Excel.CalculationState をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="55a4d-122">See Excel.CalculationState for details.</span></span> <span data-ttu-id="55a4d-123">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="55a4d-123">Read-only.</span></span>

      <span data-ttu-id="55a4d-124">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-124">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculationState
    fullName: calculationState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly calculationState: Excel.CalculationState | "Done" | "Calculating" | "Pending";'
      return:
        type:
          - 'excel!Excel.Application#calculationState~0:complex'
  - uid: 'excel!Excel.Application#context:member'
    summary: <span data-ttu-id="55a4d-125">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="55a4d-125">The request context associated with the object.</span></span> <span data-ttu-id="55a4d-126">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-126">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Application#iterativeCalculation:member'
    summary: |-
      <span data-ttu-id="55a4d-127">反復計算の設定を返します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-127">Returns the Iterative Calculation settings.</span></span> <span data-ttu-id="55a4d-128">Windows と Mac の Excel では、設定は Excel アプリケーションに適用されます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-128">In Excel on Windows and Mac, the settings will apply to the Excel Application.</span></span> <span data-ttu-id="55a4d-129">Web 上の Excel およびその他のプラットフォームでは、設定は作業中のブックに適用されます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-129">In Excel on the web and other platforms, the settings will apply to the active workbook.</span></span>

      <span data-ttu-id="55a4d-130">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-130">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iterativeCalculation
    fullName: iterativeCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iterativeCalculation: Excel.IterativeCalculation;'
      return:
        type:
          - 'excel!Excel.IterativeCalculation:class'
  - uid: 'excel!Excel.Application#load:member(1)'
    summary: <span data-ttu-id="55a4d-131">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="55a4d-132">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="55a4d-132">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="55a4d-133">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="55a4d-133">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="55a4d-134">`load(option?: string | string[]): Excel.Application`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="55a4d-134">`load(option?: string | string[]): Excel.Application` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="55a4d-135">`load(option?: { select?: string; expand?: string; }): Excel.Application`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="55a4d-135">`load(option?: { select?: string; expand?: string; }): Excel.Application` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="55a4d-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application` - Only available on collection types.</span></span> <span data-ttu-id="55a4d-137">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="55a4d-137">It is similar to the preceding signature.</span></span> <span data-ttu-id="55a4d-138">Top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-138">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="55a4d-139">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-139">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="55a4d-140">Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-140">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ApplicationLoadOptions): Excel.Application;'
      return:
        type:
          - 'excel!Excel.Application:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.ApplicationLoadOptions:interface'
  - uid: 'excel!Excel.Application#load:member(2)'
    summary: <span data-ttu-id="55a4d-141">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="55a4d-142">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="55a4d-142">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Application;'
      return:
        type:
          - 'excel!Excel.Application:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="55a4d-143">例</span><span class="sxs-lookup"><span data-stu-id="55a4d-143">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var application = ctx.workbook.application;
              application.load('calculationMode');
              return ctx.sync().then(function() {
                  console.log(application.calculationMode);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="55a4d-144">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="55a4d-144">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Application#load:member(3)'
    summary: <span data-ttu-id="55a4d-145">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-145">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="55a4d-146">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="55a4d-146">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Application;'
      return:
        type:
          - 'excel!Excel.Application:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="55a4d-147">ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="55a4d-147">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.Application#set:member(1)'
    summary: '<span data-ttu-id="55a4d-148">一度に1つのオブジェクトの複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-148">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="55a4d-149">適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="55a4d-149">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="55a4d-150">このメソッドには、次の追加のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="55a4d-150">This method has the following additional signature:</span></span>

      `set(properties: Excel.Application): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="55a4d-151">メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="55a4d-151">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.ApplicationUpdateData:interface'
        - id: options
          description: <span data-ttu-id="55a4d-152">プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-152">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Application#set:member(2)'
    summary: '<span data-ttu-id="55a4d-153">既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-153">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Application): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Application:class'
  - uid: 'excel!Excel.Application#suspendApiCalculationUntilNextSync:member(1)'
    summary: |-
      <span data-ttu-id="55a4d-p113">次の "context.sync()" が呼び出されるまで、計算を中断します。設定されると、依存関係が確実に伝達されるようにブックを再計算するのは開発者の責任です。</span><span class="sxs-lookup"><span data-stu-id="55a4d-p113">Suspends calculation until the next "context.sync()" is called. Once set, it is the developer's responsibility to re-calc the workbook, to ensure that any dependencies are propagated.</span></span>

      <span data-ttu-id="55a4d-156">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-156">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: suspendApiCalculationUntilNextSync()
    fullName: suspendApiCalculationUntilNextSync()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'suspendApiCalculationUntilNextSync(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)'
    summary: |-
      <span data-ttu-id="55a4d-157">次の "context.sync()" が呼び出されるまで画面の更新を一時停止します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-157">Suspends sceen updating until the next "context.sync()" is called.</span></span>

      <span data-ttu-id="55a4d-158">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="55a4d-158">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: suspendScreenUpdatingUntilNextSync()
    fullName: suspendScreenUpdatingUntilNextSync()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'suspendScreenUpdatingUntilNextSync(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="55a4d-159">例</span><span class="sxs-lookup"><span data-stu-id="55a4d-159">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const rowCount = 500;
              const columnCount = 20;

              const startTime = Date.now();
              console.log("Starting...");

              if (pauseScreenPainting) {
                  context.application.suspendScreenUpdatingUntilNextSync();
              }

              for (let i = 0; i < rowCount; i++) {
                  for (let j = 0; j < columnCount; j++) {
                      let cell = sheet.getCell(i, j);
                      cell.values = [[i * j * Math.random()]];
                      if (untrack) {
                          cell.untrack();
                      }
                  }
              }

              await context.sync();

              console.log(`Ending. Adding ${rowCount * columnCount} cells took ${Date.now() - startTime} milliseconds`);
          });
          ```
  - uid: 'excel!Excel.Application#toJSON:member(1)'
    summary: '<span data-ttu-id="55a4d-160">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="55a4d-160">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="55a4d-161">.</span><span class="sxs-lookup"><span data-stu-id="55a4d-161"></span></span> <span data-ttu-id="55a4d-162">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="55a4d-162"></span></span><!-- --><span data-ttu-id="55a4d-163">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の Excel オブジェクトは API オブジェクトですが、このメソッドは`toJSON` 、プレーンな JavaScript オブジェクト (として型指定されます) を返します。`Excel.Interfaces.ApplicationData`</span><span class="sxs-lookup"><span data-stu-id="55a4d-163">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ApplicationData`</span></span><!-- --><span data-ttu-id="55a4d-164">) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。</span><span class="sxs-lookup"><span data-stu-id="55a4d-164">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ApplicationData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ApplicationData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.CalculationType:enum'
    name: Excel.CalculationType
  - uid: 'excel!Excel.Application#calculationMode~0:complex'
    name: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
    fullName: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
    spec.typeScript:
      - uid: 'excel!Excel.CalculationMode:enum'
        name: Excel.CalculationMode
        fullName: Excel.CalculationMode
      - name: ' | "Automatic" | "AutomaticExceptTables" | "Manual"'
        fullName: ' | "Automatic" | "AutomaticExceptTables" | "Manual"'
  - uid: 'excel!Excel.Application#calculationState~0:complex'
    name: Excel.CalculationState | "Done" | "Calculating" | "Pending"
    fullName: Excel.CalculationState | "Done" | "Calculating" | "Pending"
    spec.typeScript:
      - uid: 'excel!Excel.CalculationState:enum'
        name: Excel.CalculationState
        fullName: Excel.CalculationState
      - name: ' | "Done" | "Calculating" | "Pending"'
        fullName: ' | "Done" | "Calculating" | "Pending"'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.IterativeCalculation:class'
    name: Excel.IterativeCalculation
  - uid: 'excel!Excel.Application:class'
    name: Excel.Application
  - uid: 'excel!Excel.Interfaces.ApplicationLoadOptions:interface'
    name: Excel.Interfaces.ApplicationLoadOptions
  - uid: 'excel!Excel.Interfaces.ApplicationUpdateData:interface'
    name: Interfaces.ApplicationUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.ApplicationData:interface'
    name: Excel.Interfaces.ApplicationData