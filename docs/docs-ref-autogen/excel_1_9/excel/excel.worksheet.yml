### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:class'
    summary: |-
      <span data-ttu-id="b8868-101">Excel のワークシートは、セルのグリッドです。</span><span class="sxs-lookup"><span data-stu-id="b8868-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="b8868-102">データ、表、グラフなどを含めることができます。ワークシートオブジェクトモデルの詳細については、「 [Excel JAVASCRIPT API を使用してワークシートを操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b8868-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="b8868-103">.</span><span class="sxs-lookup"><span data-stu-id="b8868-103"></span></span>

      <span data-ttu-id="b8868-104">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#context:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#copy:member(2)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#load:member(2)'
      - 'excel!Excel.Worksheet#load:member(3)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#onActivated:member'
      - 'excel!Excel.Worksheet#onCalculated:member'
      - 'excel!Excel.Worksheet#onChanged:member'
      - 'excel!Excel.Worksheet#onDeactivated:member'
      - 'excel!Excel.Worksheet#onFormatChanged:member'
      - 'excel!Excel.Worksheet#onSelectionChanged:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#set:member(1)'
      - 'excel!Excel.Worksheet#set:member(2)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#toJSON:member(1)'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: |-
      <span data-ttu-id="b8868-105">Excel UI でワークシートをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="b8868-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="b8868-106">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-107">例</span><span class="sxs-lookup"><span data-stu-id="b8868-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: |-
      <span data-ttu-id="b8868-108">ワークシートの AutoFilter オブジェクトを表します。</span><span class="sxs-lookup"><span data-stu-id="b8868-108">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="b8868-109">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-109">Read-Only.</span></span>

      <span data-ttu-id="b8868-110">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-110">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: Excel.AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-111">例</span><span class="sxs-lookup"><span data-stu-id="b8868-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: |-
      <span data-ttu-id="b8868-112">ワークシート上のすべてのセルを計算します。</span><span class="sxs-lookup"><span data-stu-id="b8868-112">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="b8868-113">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="b8868-114">True を設定すると、すべてがダーティとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="b8868-114">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: |-
      <span data-ttu-id="b8868-115">ワークシートの一部になっているグラフのコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-115">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="b8868-116">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-116">Read-only.</span></span>

      <span data-ttu-id="b8868-117">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:class'
  - uid: 'excel!Excel.Worksheet#context:member'
    summary: <span data-ttu-id="b8868-118">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="b8868-118">The request context associated with the object.</span></span> <span data-ttu-id="b8868-119">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="b8868-119">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: |-
      <span data-ttu-id="b8868-120">ワークシートをコピーして、指定した位置に配置します。</span><span class="sxs-lookup"><span data-stu-id="b8868-120">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="b8868-121">コピーしたワークシートを返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-121">Return the copied worksheet.</span></span>

      <span data-ttu-id="b8868-122">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-122">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-123">例</span><span class="sxs-lookup"><span data-stu-id="b8868-123">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="b8868-124">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-124">Optional.</span></span>
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: <span data-ttu-id="b8868-125">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-125">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#copy:member(2)'
    summary: |-
      <span data-ttu-id="b8868-126">ワークシートをコピーして、指定した位置に配置します。</span><span class="sxs-lookup"><span data-stu-id="b8868-126">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="b8868-127">コピーしたワークシートを返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-127">Return the copied worksheet.</span></span>

      <span data-ttu-id="b8868-128">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-128">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="b8868-129">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-129">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="b8868-130">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-130">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: |-
      <span data-ttu-id="b8868-131">ブックからワークシートを削除します。</span><span class="sxs-lookup"><span data-stu-id="b8868-131">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="b8868-132">ワークシートの可視性が "非常に非表示" に設定されている場合は、削除操作が一般の例外によって失敗することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b8868-132">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>

      <span data-ttu-id="b8868-133">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-133">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-134">例</span><span class="sxs-lookup"><span data-stu-id="b8868-134">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: |-
      <span data-ttu-id="b8868-135">ワークシートの enableCalculation プロパティを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-135">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="b8868-136">True の場合、Excel は必要に応じてワークシートを再計算します。</span><span class="sxs-lookup"><span data-stu-id="b8868-136">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="b8868-137">False の場合、Excel はシートを再計算しません。</span><span class="sxs-lookup"><span data-stu-id="b8868-137">False if Excel doesn't recalculate the sheet.</span></span>

      <span data-ttu-id="b8868-138">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-138">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: |-
      <span data-ttu-id="b8868-139">指定された条件に基づいて指定された文字列の発生箇所をすべて見つけ、1 つまたは複数の長方形範囲を構成する RangeAreas オブジェクトとして返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-139">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="b8868-140">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-140">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: '<span data-ttu-id="b8868-141">検索条件に一致する1つまたは複数の四角形の範囲で構成される RangeArea オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b8868-141">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="b8868-142">この条件に一致するセルがない場合は、ItemNotFound エラーがスローされます。</span><span class="sxs-lookup"><span data-stu-id="b8868-142">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>'
      parameters:
        - id: text
          description: <span data-ttu-id="b8868-143">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-143">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="b8868-144">検索条件には、セル全体に一致するかどうか、または大文字と小文字を区別するかどうかなどの追加の検索条件があります。</span><span class="sxs-lookup"><span data-stu-id="b8868-144">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="b8868-145">指定された条件に基づいて指定された文字列の発生箇所をすべて見つけ、1 つまたは複数の長方形範囲を構成する RangeAreas オブジェクトとして返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-145">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="b8868-146">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-146">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-
          <span data-ttu-id="b8868-147">検索条件に一致する1つまたは複数の四角形の範囲で構成される RangeArea オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b8868-147">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="b8868-148">一致しない場合、この関数は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-148">If there are no matches, this function will return a null object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="b8868-149">例</span><span class="sxs-lookup"><span data-stu-id="b8868-149">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="b8868-150">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-150">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="b8868-151">検索条件には、セル全体に一致するかどうか、または大文字と小文字を区別するかどうかなどの追加の検索条件があります。</span><span class="sxs-lookup"><span data-stu-id="b8868-151">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: |-
      <span data-ttu-id="b8868-152">ワークシート上の固定されたウィンドウを操作するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-152">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="b8868-153">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-153">Read-only.</span></span>

      <span data-ttu-id="b8868-154">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-154">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:class'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: |-
      <span data-ttu-id="b8868-155">行と列の番号に基づいて、1 つのセルを含んだ範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-155">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="b8868-156">ワークシートのグリッド内に収まるセルは、親の範囲の境界の外側にある場合があります。</span><span class="sxs-lookup"><span data-stu-id="b8868-156">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="b8868-157">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-157">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-158">例</span><span class="sxs-lookup"><span data-stu-id="b8868-158">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="b8868-159">取得するセルの行番号。</span><span class="sxs-lookup"><span data-stu-id="b8868-159">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="b8868-160">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="b8868-160">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="b8868-161">取得するセルの列番号。</span><span class="sxs-lookup"><span data-stu-id="b8868-161">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="b8868-162">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="b8868-162">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: |-
      <span data-ttu-id="b8868-163">これに続くワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-163">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="b8868-164">このメソッドに続くワークシートがない場合、このメソッドはエラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="b8868-164">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="b8868-165">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-165">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-166">例</span><span class="sxs-lookup"><span data-stu-id="b8868-166">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="b8868-167">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-167">Optional.</span></span> <span data-ttu-id="b8868-168">True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8868-168">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="b8868-169">これに続くワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-169">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="b8868-170">このメソッドに続くワークシートがない場合、このメソッドは null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-170">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="b8868-171">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-171">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="b8868-172">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-172">Optional.</span></span> <span data-ttu-id="b8868-173">True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8868-173">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: |-
      <span data-ttu-id="b8868-174">これより前のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-174">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="b8868-175">前のワークシートがない場合、このメソッドはエラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="b8868-175">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="b8868-176">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-176">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-177">例</span><span class="sxs-lookup"><span data-stu-id="b8868-177">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="b8868-178">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-178">Optional.</span></span> <span data-ttu-id="b8868-179">True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8868-179">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="b8868-180">これより前のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-180">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="b8868-181">前のワークシートがない場合、このメソッドは null の objet を返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-181">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="b8868-182">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-182">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="b8868-183">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-183">Optional.</span></span> <span data-ttu-id="b8868-184">True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8868-184">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: |-
      <span data-ttu-id="b8868-185">アドレスまたは名前で指定された、セルの単一の四角形のブロックを表す range オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-185">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="b8868-186">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-186">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-187">例</span><span class="sxs-lookup"><span data-stu-id="b8868-187">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="b8868-188">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-188">Optional.</span></span> <span data-ttu-id="b8868-189">範囲のアドレスまたは名前を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="b8868-189">The string representing the address or name of the range.</span></span> <span data-ttu-id="b8868-190">たとえば、"A1: B2" となります。</span><span class="sxs-lookup"><span data-stu-id="b8868-190">For example, "A1:B2".</span></span> <span data-ttu-id="b8868-191">指定されていない場合は、ワークシート全体の範囲が返されます。</span><span class="sxs-lookup"><span data-stu-id="b8868-191">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: |-
      <span data-ttu-id="b8868-192">特定の行インデックスと列インデックスから開始し、一定数の行と列にわたる、Range オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-192">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="b8868-193">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="b8868-194">開始行 (ゼロインデックス)。</span><span class="sxs-lookup"><span data-stu-id="b8868-194">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="b8868-195">開始列 (ゼロインデックス)。</span><span class="sxs-lookup"><span data-stu-id="b8868-195">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: <span data-ttu-id="b8868-196">範囲に含める行の数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-196">Number of rows to include in the range.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="b8868-197">範囲に含める列の数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-197">Number of columns to include in the range.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: |-
      <span data-ttu-id="b8868-198">アドレスまたは名前で指定され、1 つまたは複数の長方形範囲ブロックを表す RangeAreas オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-198">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>

      <span data-ttu-id="b8868-199">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-199">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-200">例</span><span class="sxs-lookup"><span data-stu-id="b8868-200">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="b8868-201">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-201">Optional.</span></span> <span data-ttu-id="b8868-202">コンマ区切りのアドレスまたは個々の範囲の名前を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="b8868-202">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="b8868-203">たとえば、"A1: B2, A5: B5" とします。</span><span class="sxs-lookup"><span data-stu-id="b8868-203">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="b8868-204">指定しない場合、ワークシート全体の RangeArea オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="b8868-204">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="b8868-205">使用範囲とは、値または書式設定が割り当たっているすべてのセルを包含する最小の範囲です。</span><span class="sxs-lookup"><span data-stu-id="b8868-205">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="b8868-206">ワークシート全体が空白の場合、この関数は左上のセルを返します (つまり、エラーはスローされ*ません*)。</span><span class="sxs-lookup"><span data-stu-id="b8868-206">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="b8868-207">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-208">例</span><span class="sxs-lookup"><span data-stu-id="b8868-208">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="b8868-209">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-209">Optional.</span></span> <span data-ttu-id="b8868-210">True の場合は、値を持つセルのみを使用セルと見なします (書式設定は無視されます)。</span><span class="sxs-lookup"><span data-stu-id="b8868-210">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="b8868-211">\[Api セット: ExcelApi 1.2\]</span><span class="sxs-lookup"><span data-stu-id="b8868-211">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="b8868-p127">使用範囲とは、値または書式設定が割り当たっているすべてのセルを包含する最小の範囲です。ワークシート全体が空白の場合、この関数は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-p127">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="b8868-214">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-214">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="b8868-215">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8868-215">Optional.</span></span> <span data-ttu-id="b8868-216">値の入っているセルのみを使用セルと見なします。</span><span class="sxs-lookup"><span data-stu-id="b8868-216">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: |-
      <span data-ttu-id="b8868-217">ワークシートの水平改ページをまとめて取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-217">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="b8868-218">このコレクションには、手動の改ページのみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b8868-218">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="b8868-219">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-219">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: |-
      <span data-ttu-id="b8868-p130">指定されたブックのワークシートを一意に識別する値を返します。この識別子の値は、ワークシートの名前を変更したり移動したりしても同じままです。値の取得のみ可能です。</span><span class="sxs-lookup"><span data-stu-id="b8868-p130">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="b8868-223">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-223">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: <span data-ttu-id="b8868-224">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b8868-224">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b8868-225">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8868-225">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="b8868-226">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="b8868-226">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="b8868-227">`load(option?: string | string[]): Excel.Worksheet`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="b8868-227">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="b8868-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="b8868-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="b8868-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="b8868-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="b8868-230">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="b8868-230">It is similar to the preceding signature.</span></span> <span data-ttu-id="b8868-231">Top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-231">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="b8868-232">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-232">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="b8868-233">Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="b8868-233">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
  - uid: 'excel!Excel.Worksheet#load:member(2)'
    summary: <span data-ttu-id="b8868-234">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b8868-234">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b8868-235">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8868-235">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-236">例</span><span class="sxs-lookup"><span data-stu-id="b8868-236">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="b8868-237">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="b8868-237">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#load:member(3)'
    summary: <span data-ttu-id="b8868-238">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b8868-238">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b8868-239">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8868-239">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="b8868-240">ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="b8868-240">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: |-
      <span data-ttu-id="b8868-241">ワークシートの表示名。</span><span class="sxs-lookup"><span data-stu-id="b8868-241">The display name of the worksheet.</span></span>

      <span data-ttu-id="b8868-242">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: |-
      <span data-ttu-id="b8868-243">現在のワークシートにスコープされている名前のコレクション。</span><span class="sxs-lookup"><span data-stu-id="b8868-243">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="b8868-244">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-244">Read-only.</span></span>

      <span data-ttu-id="b8868-245">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-245">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Worksheet#onActivated:member'
    summary: |-
      <span data-ttu-id="b8868-246">ワークシートがアクティブになるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8868-246">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="b8868-247">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-247">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-248">例</span><span class="sxs-lookup"><span data-stu-id="b8868-248">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onCalculated:member'
    summary: |-
      <span data-ttu-id="b8868-249">ワークシートが計算されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8868-249">Occurs when the worksheet is calculated.</span></span>

      <span data-ttu-id="b8868-250">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-250">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onCalculated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-251">例</span><span class="sxs-lookup"><span data-stu-id="b8868-251">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onChanged:member'
    summary: |-
      <span data-ttu-id="b8868-252">特定のワークシートでデータが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8868-252">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="b8868-253">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-253">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-254">例</span><span class="sxs-lookup"><span data-stu-id="b8868-254">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: 'excel!Excel.Worksheet#onDeactivated:member'
    summary: |-
      <span data-ttu-id="b8868-255">ワークシートが非アクティブになるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8868-255">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="b8868-256">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-256">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-257">例</span><span class="sxs-lookup"><span data-stu-id="b8868-257">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onFormatChanged:member'
    summary: |-
      <span data-ttu-id="b8868-258">フォーマットが特定のワークシートで変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8868-258">Occurs when format changed on a specific worksheet.</span></span>

      <span data-ttu-id="b8868-259">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-259">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFormatChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    summary: |-
      <span data-ttu-id="b8868-260">特定のワークシートで選択範囲が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8868-260">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="b8868-261">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-261">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-262">例</span><span class="sxs-lookup"><span data-stu-id="b8868-262">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: |-
      <span data-ttu-id="b8868-263">ワークシートの PageLayout オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-263">Gets the PageLayout object of the worksheet.</span></span>

      <span data-ttu-id="b8868-264">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-264">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: Excel.PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:class'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: |-
      <span data-ttu-id="b8868-265">ワークシートの一部になっているピボットテーブルのコレクション。</span><span class="sxs-lookup"><span data-stu-id="b8868-265">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="b8868-266">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-266">Read-only.</span></span>

      <span data-ttu-id="b8868-267">\[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-267">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: |-
      <span data-ttu-id="b8868-268">0 を起点とした、ブック内のワークシートの位置。</span><span class="sxs-lookup"><span data-stu-id="b8868-268">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="b8868-269">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-269">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: |-
      <span data-ttu-id="b8868-270">ワークシートのシート保護オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-270">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="b8868-271">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="b8868-271">Read-only.</span></span>

      <span data-ttu-id="b8868-272">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-272">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:class'
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: |-
      <span data-ttu-id="b8868-273">現在のワークシート内で、指定された条件に基づき、指定された文字列を検索し、置換します。</span><span class="sxs-lookup"><span data-stu-id="b8868-273">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>

      <span data-ttu-id="b8868-274">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-274">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: <span data-ttu-id="b8868-275">実行された置換の数。</span><span class="sxs-lookup"><span data-stu-id="b8868-275">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="b8868-276">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-276">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="b8868-277">元のと置き換える文字列。</span><span class="sxs-lookup"><span data-stu-id="b8868-277">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="b8868-278">置換条件を追加します。</span><span class="sxs-lookup"><span data-stu-id="b8868-278">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#set:member(1)'
    summary: '<span data-ttu-id="b8868-279">一度に1つのオブジェクトの複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-279">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="b8868-280">適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="b8868-280">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="b8868-281">このメソッドには、次の追加のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="b8868-281">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="b8868-282">メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b8868-282">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
        - id: options
          description: <span data-ttu-id="b8868-283">プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="b8868-283">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Worksheet#set:member(2)'
    summary: '<span data-ttu-id="b8868-284">既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-284">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: |-
      <span data-ttu-id="b8868-285">ワークシート上のすべての Shape オブジェクトをまとめて返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-285">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="b8868-286">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-286">Read-only.</span></span>

      <span data-ttu-id="b8868-287">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-287">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: |-
      <span data-ttu-id="b8868-288">ワークシートの gridlines フラグを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-288">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="b8868-289">このフラグは、グリッド線をユーザーに表示するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-289">This flag determines whether gridlines are visible to the user.</span></span>

      <span data-ttu-id="b8868-290">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-290">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-291">例</span><span class="sxs-lookup"><span data-stu-id="b8868-291">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: |-
      <span data-ttu-id="b8868-292">ワークシートの headings フラグを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-292">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="b8868-293">このフラグは、ユーザーに見出しを表示するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-293">This flag determines whether headings are visible to the user.</span></span>

      <span data-ttu-id="b8868-294">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-294">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: |-
      <span data-ttu-id="b8868-295">ワークシート内のすべての行の標準 (既定) の高さ (ポイント数) を返します。</span><span class="sxs-lookup"><span data-stu-id="b8868-295">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="b8868-296">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-296">Read-only.</span></span>

      <span data-ttu-id="b8868-297">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-297">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: |-
      <span data-ttu-id="b8868-298">ワークシートのすべての列の標準 (既定) の幅を返すか設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-298">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="b8868-299">列幅の単位は、標準スタイルの 1 文字分の幅に相当します。</span><span class="sxs-lookup"><span data-stu-id="b8868-299">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="b8868-300">プロポーショナル フォントでは、数字の 0 の幅が列幅の単位になります。</span><span class="sxs-lookup"><span data-stu-id="b8868-300">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="b8868-301">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-301">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: |-
      <span data-ttu-id="b8868-302">ワークシートのタブの色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-302">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="b8868-303">タブの色を取得するときに、ワークシートが非表示の場合、値は null になります。</span><span class="sxs-lookup"><span data-stu-id="b8868-303">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="b8868-304">ワークシートが表示されているにもかかわらず、tab の色が auto に設定されている場合は、空の文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="b8868-304">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="b8868-305">それ以外の場合は、プロパティは "\#123456" という色を設定するときに、"" という形式で設定されます。色を設定するときは、空の文字列を使用して "auto" 色を設定するか、または実際の色を設定します。</span><span class="sxs-lookup"><span data-stu-id="b8868-305">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="b8868-306">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-306">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b8868-307">例</span><span class="sxs-lookup"><span data-stu-id="b8868-307">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: |-
      <span data-ttu-id="b8868-308">ワークシートの一部になっているグラフのコレクション。</span><span class="sxs-lookup"><span data-stu-id="b8868-308">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="b8868-309">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8868-309">Read-only.</span></span>

      <span data-ttu-id="b8868-310">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-310">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    summary: '<span data-ttu-id="b8868-311">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="b8868-311">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="b8868-312">.</span><span class="sxs-lookup"><span data-stu-id="b8868-312"></span></span> <span data-ttu-id="b8868-313">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="b8868-313"></span></span><!-- --><span data-ttu-id="b8868-314">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の Worksheet オブジェクトは API オブジェクトであるのに対して`toJSON` 、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="b8868-314">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="b8868-315">) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。</span><span class="sxs-lookup"><span data-stu-id="b8868-315">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetData:interface'
        description: ''
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: |-
      <span data-ttu-id="b8868-316">ワークシートの垂直改ページをまとめて取得します。</span><span class="sxs-lookup"><span data-stu-id="b8868-316">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="b8868-317">このコレクションには、手動の改ページのみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b8868-317">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="b8868-318">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8868-318">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: |-
      <span data-ttu-id="b8868-319">ワークシートの可視性。</span><span class="sxs-lookup"><span data-stu-id="b8868-319">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="b8868-320">\[[API set: 表示を読み取るための excelapi 1.1、設定用の 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) 。</span><span class="sxs-lookup"><span data-stu-id="b8868-320">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="b8868-321">\]</span><span class="sxs-lookup"><span data-stu-id="b8868-321"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.AutoFilter:class'
    name: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:class'
    name: Excel.ChartCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:class'
    name: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:class'
    name: Excel.PageBreakCollection
  - uid: 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
    name: Excel.Interfaces.WorksheetLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Worksheet#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onCalculated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetCalculatedEventArgs:interface'
        name: Excel.WorksheetCalculatedEventArgs
        fullName: Excel.WorksheetCalculatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFormatChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFormatChangedEventArgs:interface'
        name: Excel.WorksheetFormatChangedEventArgs
        fullName: Excel.WorksheetFormatChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PageLayout:class'
    name: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:class'
    name: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
    name: Interfaces.WorksheetUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.ShapeCollection:class'
    name: Excel.ShapeCollection
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.Interfaces.WorksheetData:interface'
    name: Excel.Interfaces.WorksheetData
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: Excel.SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'