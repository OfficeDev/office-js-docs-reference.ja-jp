### YamlMime:TSType
name: Excel.TableColumnCollection
uid: excel!Excel.TableColumnCollection:class
package: excel!
fullName: Excel.TableColumnCollection
summary: >-
  表の一部であるすべての列のコレクションを表します。


  \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.TableColumnCollection#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これにより、アドインのプロセスがホスト アプリケーションのプロセスOfficeに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: count
  uid: excel!Excel.TableColumnCollection#count:member
  package: excel!
  fullName: count
  summary: >-
    テーブルの列数を返します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: excel!Excel.TableColumnCollection#items:member
  package: excel!
  fullName: items
  summary: このコレクション内に読み込まれた子アイテムを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.TableColumn[];'
    return:
      type: <xref uid="excel!Excel.TableColumn:class" />[]
methods:
- name: add(index, values, name)
  uid: excel!Excel.TableColumnCollection#add:member(1)
  package: excel!
  fullName: add(index, values, name)
  summary: >-
    テーブルに新しい列を追加します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)では、合計列数よりも小さいインデックスが必要です。1.4 では、インデックスを省略可能 (null または -1) にし、末尾に列を追加します。作成時に 1.4 では name パラメーターを使用できます。 \]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?: string): Excel.TableColumn;'
    parameters:
    - id: index
      description: 省略可能。新しい列の相対位置を指定します。null または -1 の場合、最後に追加が行われます。上位のインデックスを持つ列は横にシフトされます。0 を起点とする番号になります。
      type: number
    - id: values
      description: 省略可能。 テーブルの列の、書式設定されていない値の 2 次元の配列。
      type: Array&lt;Array&lt;boolean | string | number&gt;&gt; | boolean | string | number
    - id: name
      description: 省略可能。 新しい列の名前を指定します。 null の場合は既定の名前が使用されます。
      type: string
    return:
      type: <xref uid="excel!Excel.TableColumn:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var values = [[\"Sample\"], [\"Values\"], [\"For\"], [\"New\"], [\"Column\"]];\n    var column = tables.getItem(\"Table1\").columns.add(null, values);\n    column.load('name');\n    return ctx.sync().then(function() {\n        console.log(column.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItem(key)
  uid: excel!Excel.TableColumnCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: >-
    名前または ID を使用して列オブジェクトを取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: number | string): Excel.TableColumn;'
    parameters:
    - id: key
      description: 列名または ID。
      type: number | string
    return:
      type: <xref uid="excel!Excel.TableColumn:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var tableColumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);\n    tableColumn.load('name');\n    return ctx.sync().then(function() {\n            console.log(tableColumn.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemAt(index)
  uid: excel!Excel.TableColumnCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    コレクション内の位置に基づいて列を取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.TableColumn;'
    parameters:
    - id: index
      description: 取得するオブジェクトのインデックス値。 0 を起点とする番号になります。
      type: number
    return:
      type: <xref uid="excel!Excel.TableColumn:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var tableColumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);\n    tableColumn.load('name');\n    return ctx.sync().then(function() {\n            console.log(tableColumn.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.TableColumnCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableColumnCollection;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティのオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.TableColumnCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.TableColumnCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.TableColumnCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.TableColumnCollection;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定するコンマ区切り文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.TableColumnCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var tableColumns = ctx.workbook.tables.getItem('Table1').columns;\n    tableColumns.load('items');\n    return ctx.sync().then(function() {\n        console.log(\"tableColumns Count: \" + tableColumns.count);\n        for (var i = 0; i < tableColumns.items.length; i++) {\n            console.log(tableColumns.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.TableColumnCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableColumnCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマ区切りの文字列で、読み込むナビゲーション プロパティを指定するコンマ区切 `propertyNamesAndPaths.expand` りの文字列です。'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.TableColumnCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.TableColumnCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: API オブジェクトを渡す際に、より有用な出力を提供するために `toJSON()` JavaScript メソッドをオーバーライドします。 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->、順番に、渡 `toJSON` されるオブジェクトのメソッドを呼び出します。元のオブジェクトが API オブジェクトであるのに対し、メソッドはプレーンな JavaScript オブジェクト (次のように入力) `Excel.TableColumnCollection` `toJSON` を返します。 `Excel.Interfaces.TableColumnCollectionData`<!-- -->) コレクションのアイテムから読み込まれたプロパティのコピーが浅い "items" 配列を含む。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableColumnCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.TableColumnCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: f6ade056bebf91e294832a47ecea7ffa28880fe9
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51300503"
