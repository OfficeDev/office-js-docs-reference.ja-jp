### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.BindingCollection:class'
    summary: |-
      ブックの一部であるすべてのバインド オブジェクトのコレクションを表します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.BindingCollection
    fullName: Excel.BindingCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.BindingCollection#add:member(1)'
      - 'excel!Excel.BindingCollection#add:member(2)'
      - 'excel!Excel.BindingCollection#addFromNamedItem:member(1)'
      - 'excel!Excel.BindingCollection#addFromNamedItem:member(2)'
      - 'excel!Excel.BindingCollection#addFromSelection:member(1)'
      - 'excel!Excel.BindingCollection#addFromSelection:member(2)'
      - 'excel!Excel.BindingCollection#context:member'
      - 'excel!Excel.BindingCollection#count:member'
      - 'excel!Excel.BindingCollection#getCount:member(1)'
      - 'excel!Excel.BindingCollection#getItem:member(1)'
      - 'excel!Excel.BindingCollection#getItemAt:member(1)'
      - 'excel!Excel.BindingCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.BindingCollection#items:member'
      - 'excel!Excel.BindingCollection#load:member(1)'
      - 'excel!Excel.BindingCollection#load:member(2)'
      - 'excel!Excel.BindingCollection#load:member(3)'
      - 'excel!Excel.BindingCollection#toJSON:member(1)'
  - uid: 'excel!Excel.BindingCollection#add:member(1)'
    summary: |-
      特定の範囲に新しいバインドを追加します。

      \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(range, bindingType, id)'
    fullName: 'add(range, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: range
          description: バインドをバインドする範囲です。Excel Range オブジェクト、または文字列である場合があります。文字列の場合は、シート名を含む完全なアドレスが含まれている必要があります
          type:
            - 'excel!Excel.BindingCollection#add~0:complex'
        - id: bindingType
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - 'excel!Excel.BindingType:enum'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#add:member(2)'
    summary: |-
      特定の範囲に新しいバインドを追加します。

      \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(range, bindingTypeString, id)'
    fullName: 'add(range, bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: range
          description: バインドをバインドする範囲です。Excel Range オブジェクト、または文字列である場合があります。文字列の場合は、シート名を含む完全なアドレスが含まれている必要があります
          type:
            - 'excel!Excel.BindingCollection#add~1:complex'
        - id: bindingTypeString
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromNamedItem:member(1)'
    summary: |-
      ブック内の名前付きアイテムに基づいて新しいバインドを追加します。 名前付きアイテムが複数の領域を参照している場合は、"InvalidReference" エラーが返されます。

      \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromNamedItem(name, bindingType, id)'
    fullName: 'addFromNamedItem(name, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: name
          description: バインドの作成元の名前です。
          type:
            - string
        - id: bindingType
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - 'excel!Excel.BindingType:enum'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromNamedItem:member(2)'
    summary: |-
      ブック内の名前付きアイテムに基づいて新しいバインドを追加します。 名前付きアイテムが複数の領域を参照している場合は、"InvalidReference" エラーが返されます。

      \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromNamedItem(name, bindingTypeString, id)'
    fullName: 'addFromNamedItem(name, bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: name
          description: バインドの作成元の名前です。
          type:
            - string
        - id: bindingTypeString
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromSelection:member(1)'
    summary: |-
      現在の選択範囲に基づいて新しいバインドを追加します。 複数の領域が選択されている場合は、"InvalidReference" エラーが返されます。

      \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromSelection(bindingType, id)'
    fullName: 'addFromSelection(bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: bindingType
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - 'excel!Excel.BindingType:enum'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromSelection:member(2)'
    summary: |-
      現在の選択範囲に基づいて新しいバインドを追加します。 複数の領域が選択されている場合は、"InvalidReference" エラーが返されます。

      \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromSelection(bindingTypeString, id)'
    fullName: 'addFromSelection(bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: bindingTypeString
          description: バインドの種類。 「Excel. BindingType」を参照してください。
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: バインドの名前です。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.BindingCollection#count:member'
    summary: |-
      コレクション内にあるバインドの数を取得します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.BindingCollection#getCount:member(1)'
    summary: |-
      コレクションに含まれるバインドの数を取得します。

      \[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.BindingCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.BindingCollection#getItem:member(1)'
    summary: |-
      ID を使用してバインド オブジェクトを取得します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Create a table binding to monitor data changes in the table. 
          // When data is changed, the background color of the table will be changed to orange.
          function addEventHandler() {
              // Create Table1
              Excel.run(function (ctx) { 
                  ctx.workbook.tables.add("Sheet1!A1:C4", true);
                  return ctx.sync().then(function() {
                          console.log("My Diet Data Inserted!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
              //Create a new table binding for Table1
              Office.context.document.bindings.addFromNamedItemAsync(
                  "Table1", Office.CoercionType.Table, { id: "myBinding" }, function (asyncResult) {
                  if (asyncResult.status == "failed") {
                      console.log("Action failed with error: " + asyncResult.error.message);
                  }
                  else {
                      // If succeeded, then add event handler to the table binding.
                      Office.select("bindings#myBinding").addHandlerAsync(
                          Office.EventType.BindingDataChanged, onBindingDataChanged);
                  }
              });
          }
              
          // when data in the table is changed, this event will be triggered.
          function onBindingDataChanged(eventArgs) {
              Excel.run(function (ctx) { 
                  // highlight the table in orange to indicate data has been changed.
                  ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
                  return ctx.sync().then(function() {
                          console.log("The value in this table got changed!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
          }
          ```
      parameters:
        - id: id
          description: 取得するバインド オブジェクトの ID。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#getItemAt:member(1)'
    summary: |-
      項目の配列内の位置に基づいて、バインド オブジェクトを取得します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function (ctx) { 
              var lastPosition = ctx.workbook.bindings.count - 1;
              var binding = ctx.workbook.bindings.getItemAt(lastPosition);
              binding.load('type')
              return ctx.sync().then(function() {
                      console.log(binding.type); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 取得するオブジェクトのインデックス値。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'excel!Excel.BindingCollection#getItemOrNullObject:member(1)'
    summary: |-
      ID によってバインド オブジェクトを取得します。 バインディング オブジェクトが存在しない場合は null オブジェクトを返します。

      \[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: id
          description: 取得するバインド オブジェクトの ID。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#items:member'
    summary: このコレクション内に読み込まれた子アイテムを取得します。
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Binding[];'
      return:
        type:
          - 'excel!Excel.BindingCollection#items~0:complex'
  - uid: 'excel!Excel.BindingCollection#load:member(1)'
    summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:class'
        description: ''
      parameters:
        - id: options
          description: 読み込むオブジェクトのプロパティを指定するオプションを提供します。
          type:
            - 'excel!Excel.BindingCollection#load~0:complex'
  - uid: 'excel!Excel.BindingCollection#load:member(2)'
    summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < bindings.items.length; i++)
                  {
                      console.log(bindings.items[i].id);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of bindings
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('count');
              return ctx.sync().then(function() {
                  console.log("Bindings: Count= " + bindings.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.BindingCollection#load:member(3)'
    summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマで区切られた文字列で、 `propertyNamesAndPaths.expand` 読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.BindingCollection#toJSON:member(1)'
    summary: '`toJSON()`API オブジェクトが渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->`toJSON`その後、渡されたオブジェクトのメソッドを呼び出します。元の `Excel.BindingCollection` オブジェクトは API オブジェクトであるのに対し、 `toJSON` メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.BindingCollectionData`<!-- -->) を使用して、コレクションのアイテムから読み込まれたプロパティの浅いコピーを持つ "items" 配列を含みます。'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.BindingCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Binding:class'
    name: Excel.Binding
  - uid: 'excel!Excel.BindingCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.BindingType:enum'
    name: Excel.BindingType
  - uid: 'excel!Excel.BindingCollection#add~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.BindingCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.BindingCollection#items~0:complex'
    name: 'Excel.Binding[]'
    fullName: 'Excel.Binding[]'
    spec.typeScript:
      - uid: 'excel!Excel.Binding:class'
        name: Excel.Binding
        fullName: Excel.Binding
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.BindingCollection:class'
    name: Excel.BindingCollection
  - uid: 'excel!Excel.BindingCollection#load~0:complex'
    name: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.BindingCollectionLoadOptions:interface'
        name: Excel.Interfaces.BindingCollectionLoadOptions
        fullName: Excel.Interfaces.BindingCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.BindingCollectionData:interface'
    name: Excel.Interfaces.BindingCollectionData