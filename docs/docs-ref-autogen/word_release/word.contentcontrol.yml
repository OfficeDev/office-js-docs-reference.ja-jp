### YamlMime:UniversalReference
items:
  - uid: word_release.Word.ContentControl
    summary: |-
      コンテンツ コントロールを表します。コンテンツ コントロールは、特定の種類のコンテンツのコンテナーとして機能し、ドキュメント内で境界線で区切られ、ラベルが付いた領域になる場合もあります。個々のコンテンツ コントロールには、画像、表、書式設定されたテキストの段落などの内容が含まれていることがあります。現時点では、リッチ テキスト コンテンツ コントロールのみがサポートされています。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.ContentControl
    fullName: Word.ContentControl
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: word_release
    children:
      - word_release.Word.ContentControl.appearance
      - word_release.Word.ContentControl.cannotDelete
      - word_release.Word.ContentControl.cannotEdit
      - word_release.Word.ContentControl.clear
      - word_release.Word.ContentControl.color
      - word_release.Word.ContentControl.contentControls
      - word_release.Word.ContentControl.context
      - word_release.Word.ContentControl.delete
      - word_release.Word.ContentControl.font
      - word_release.Word.ContentControl.getHtml
      - word_release.Word.ContentControl.getOoxml
      - word_release.Word.ContentControl.getRange
      - word_release.Word.ContentControl.getRange_1
      - word_release.Word.ContentControl.getTextRanges
      - word_release.Word.ContentControl.id
      - word_release.Word.ContentControl.inlinePictures
      - word_release.Word.ContentControl.insertBreak
      - word_release.Word.ContentControl.insertBreak_1
      - word_release.Word.ContentControl.insertFileFromBase64
      - word_release.Word.ContentControl.insertFileFromBase64_1
      - word_release.Word.ContentControl.insertHtml
      - word_release.Word.ContentControl.insertHtml_1
      - word_release.Word.ContentControl.insertInlinePictureFromBase64
      - word_release.Word.ContentControl.insertInlinePictureFromBase64_1
      - word_release.Word.ContentControl.insertOoxml
      - word_release.Word.ContentControl.insertOoxml_1
      - word_release.Word.ContentControl.insertParagraph
      - word_release.Word.ContentControl.insertParagraph_1
      - word_release.Word.ContentControl.insertTable
      - word_release.Word.ContentControl.insertTable_1
      - word_release.Word.ContentControl.insertText
      - word_release.Word.ContentControl.insertText_1
      - word_release.Word.ContentControl.lists
      - word_release.Word.ContentControl.load
      - word_release.Word.ContentControl.load_1
      - word_release.Word.ContentControl.load_2
      - word_release.Word.ContentControl.paragraphs
      - word_release.Word.ContentControl.parentBody
      - word_release.Word.ContentControl.parentContentControl
      - word_release.Word.ContentControl.parentContentControlOrNullObject
      - word_release.Word.ContentControl.parentTable
      - word_release.Word.ContentControl.parentTableCell
      - word_release.Word.ContentControl.parentTableCellOrNullObject
      - word_release.Word.ContentControl.parentTableOrNullObject
      - word_release.Word.ContentControl.placeholderText
      - word_release.Word.ContentControl.removeWhenEdited
      - word_release.Word.ContentControl.search
      - word_release.Word.ContentControl.select
      - word_release.Word.ContentControl.select_1
      - word_release.Word.ContentControl.set
      - word_release.Word.ContentControl.set_1
      - word_release.Word.ContentControl.split
      - word_release.Word.ContentControl.style
      - word_release.Word.ContentControl.styleBuiltIn
      - word_release.Word.ContentControl.subtype
      - word_release.Word.ContentControl.tables
      - word_release.Word.ContentControl.tag
      - word_release.Word.ContentControl.text
      - word_release.Word.ContentControl.title
      - word_release.Word.ContentControl.toJSON
      - word_release.Word.ContentControl.track
      - word_release.Word.ContentControl.type
      - word_release.Word.ContentControl.untrack
  - uid: word_release.Word.ContentControl.appearance
    summary: |-
      コンテンツ コントロールの外観を取得または設定します。 値には、' BoundingBox '、' Tags '、または ' Hidden ' を指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: appearance
    fullName: appearance
    langs:
      - typeScript
    type: property
    syntax:
      content: 'appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";'
      return:
        type:
          - Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden"
  - uid: word_release.Word.ContentControl.cannotDelete
    summary: |-
      ユーザーがコンテンツ コントロールを削除できるかどうかを示す値を取得または設定します。 removeWhenEdited と同時に使用することはできません。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: cannotDelete
    fullName: cannotDelete
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cannotDelete: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.ContentControl.cannotEdit
    summary: |-
      ユーザーがコンテンツ コントロールのコンテンツを編集できるかどうかを示す値を取得または設定します。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: cannotEdit
    fullName: cannotEdit
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cannotEdit: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.ContentControl.clear
    summary: |-
      コンテンツ コントロールの内容をクリアします。 ユーザーは、消去された内容を元に戻す操作を実行できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the content controls collection.
              contentControls.load('text');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  
                  if (contentControls.items.length === 0) {
                      console.log("There isn't a content control in this document.");
                  } else {
                      
                      // Queue a command to clear the contents of the first content control.
                      contentControls.items[0].clear();
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync().then(function () {
                          console.log('Content control cleared of contents.');
                      });      
                  }
                      
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word_release.Word.ContentControl.color
    summary: |-
      コンテンツ コントロールの色を取得または設定します。 色は、'\#RRGGBB ' 形式または色名を使用して指定されます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: color
    fullName: color
    langs:
      - typeScript
    type: property
    syntax:
      content: 'color: string;'
      return:
        type:
          - string
  - uid: word_release.Word.ContentControl.contentControls
    summary: |-
      コンテンツ コントロールのコンテンツ コントロール オブジェクトのコレクションを取得します。 読み取り専用です。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - word.Word.ContentControlCollection
  - uid: word_release.Word.ContentControl.context
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: word_release.Word.ContentControl.delete
    summary: |-
      コンテンツ コントロールとそのコンテンツを削除します。 keepContent が true の場合、コンテンツは削除されません。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: delete(keepContent)
    fullName: delete(keepContent)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(keepContent: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the content controls collection.
              contentControls.load('text');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  
                  if (contentControls.items.length === 0) {
                      console.log("There isn't a content control in this document.");
                  } else {
                      
                      // Queue a command to delete the first content control. The
                      // contents will remain in the document.
                      contentControls.items[0].delete(true);
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync().then(function () {
                          console.log('Content control cleared of contents.');
                      });      
                  }
                      
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: keepContent
          description: 必須です。 コンテンツ コントロールを使用してコンテンツを削除する必要があるかどうかを示します。 keepContent が true の場合、コンテンツは削除されません。
          type:
            - boolean
  - uid: word_release.Word.ContentControl.font
    summary: |-
      コンテンツ コントロールのテキストの書式設定を取得します。 これを使用して、フォント名、サイズ、色、およびその他のプロパティを取得および設定します。 読み取り専用。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - word.Word.Font
  - uid: word_release.Word.ContentControl.getHtml
    summary: |-
      コンテンツコントロールオブジェクトの HTML 表記を取得します。 Web ページまたは HTML ビューアーでレンダリングされる場合、書式設定は、ドキュメントの書式設定と完全に一致しますが、完全に一致するとは限りません。 このメソッドは、異なるプラットフォーム (Windows、Mac、Word Online など) にある同じドキュメントに対して、まったく同じ HTML を返しません。 厳密な忠実性、または複数のプラットフォーム間で`ContentControl.getOoxml()`の一貫性が必要な場合は、を使用して、返された XML を HTML に変換します。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection that contains a specific tag.
              var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');
              
              // Queue a command to load the tag property for all of content controls. 
              context.load(contentControlsWithTag, 'tag');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControlsWithTag.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to get the HTML contents of the first content control.
                      var html = contentControlsWithTag.items[0].getHtml();
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Content control HTML: ' + html.value);
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word_release.Word.ContentControl.getOoxml
    summary: |-
      コンテンツ コントロール オブジェクトの Office Open XML (OOXML) 表記を取得します。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to get the OOXML contents of the first content control.
                      var ooxml = contentControls.items[0].getOoxml();
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Content control OOXML: ' + ooxml.value);
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word_release.Word.ContentControl.getRange
    summary: |-
      範囲として、コンテンツ コントロール全体、あるいはコンテンツ コントロールの開始点または終了点を取得します。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getRange(rangeLocation)
    fullName: getRange(rangeLocation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocation
          description: 省略可能。 範囲の位置は、' 全体 '、' Before '、' Start '、' End '、' After '、' Content ' のいずれかになります。
          type:
            - word.Word.RangeLocation
  - uid: word_release.Word.ContentControl.getRange_1
    summary: |-
      範囲として、コンテンツ コントロール全体、あるいはコンテンツ コントロールの開始点または終了点を取得します。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getRange(rangeLocationString)
    fullName: getRange(rangeLocationString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocationString
          description: 省略可能。 範囲の位置は、' 全体 '、' Before '、' Start '、' End '、' After '、' Content ' のいずれかになります。
          type:
            - '"Whole" | "Start" | "End" | "Before" | "After" | "Content"'
  - uid: word_release.Word.ContentControl.getTextRanges
    summary: |-
      句読点やその他の終了マークを使用して、コンテンツコントロール内のテキスト範囲を取得します。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'getTextRanges(endingMarks, trimSpacing)'
    fullName: 'getTextRanges(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: endingMarks
          description: 必須です。 句読点やその他の終了記号は、文字列の配列として格納されます。
          type:
            - 'string[]'
        - id: trimSpacing
          description: 省略可能。 Range コレクションで返される範囲の先頭または末尾から、スペース文字 (スペース、タブ、列区切り、および段落終了マーク) をトリミングするかどうかを示します。 既定値は false で、範囲の先頭と末尾のスペースが範囲コレクションに含まれることを示します。
          type:
            - boolean
  - uid: word_release.Word.ContentControl.id
    summary: |-
      コンテンツ コントロールの識別子を表す整数値を取得します。 読み取り専用です。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: number;'
      return:
        type:
          - number
  - uid: word_release.Word.ContentControl.inlinePictures
    summary: |-
      コンテンツ コントロールに含まれる inlinePicture オブジェクトのコレクションを取得します。 コレクションに浮動イメージは含まれません。 読み取り専用です。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - word.Word.InlinePictureCollection
  - uid: word_release.Word.ContentControl.insertBreak
    summary: |-
      メイン文書の指定した位置に、区切りを挿入します。 InsertLocation の値には、' Start '、' End '、' Before '、または ' After ' を指定できます。 このメソッドは、' RichTextTable '、' RichTextTableRow '、および ' RichTextTableCell ' のコンテンツコントロールと共に使用することはできません。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakType
          description: 必須です。 休憩の種類。
          type:
            - word.Word.BreakType
        - id: insertLocation
          description: 必須です。 値には、' Start '、' End '、' Before '、または ' After ' を指定できます。
          type:
            - Word.InsertLocation
  - uid: word_release.Word.ContentControl.insertBreak_1
    summary: |-
      メイン文書の指定した位置に、区切りを挿入します。 InsertLocation の値には、' Start '、' End '、' Before '、または ' After ' を指定できます。 このメソッドは、' RichTextTable '、' RichTextTableRow '、および ' RichTextTableCell ' のコンテンツコントロールと共に使用することはできません。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a commmand to load the id property for all of content controls. 
              context.load(contentControls, 'id');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion. We now will have 
              // access to the content control collection.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to insert a page break after the first content control. 
                      contentControls.items[0].insertBreak('page', "After");
                      
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion. 
                      return context.sync()
                          .then(function () {
                              console.log('Inserted a page break after the first content control.');    
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakTypeString
          description: 必須です。 休憩の種類。
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: 必須です。 値には、' Start '、' End '、' Before '、または ' After ' を指定できます。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.ContentControl.insertFileFromBase64
    summary: |-
      指定した位置にコンテンツコントロールにドキュメントを挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: base64File
          description: 必須です。 .Docx ファイルの base64 でエンコードされたコンテンツ。
          type:
            - string
        - id: insertLocation
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - Word.InsertLocation
  - uid: word_release.Word.ContentControl.insertFileFromBase64_1
    summary: |-
      指定した位置にコンテンツコントロールにドキュメントを挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: base64File
          description: 必須です。 .Docx ファイルの base64 でエンコードされたコンテンツ。
          type:
            - string
        - id: insertLocationString
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.ContentControl.insertHtml
    summary: |-
      コンテンツ コントロール内の指定された位置に HTML を挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: html
          description: 必須です。 コンテンツ コントロールに挿入する HTML。
          type:
            - string
        - id: insertLocation
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - Word.InsertLocation
  - uid: word_release.Word.ContentControl.insertHtml_1
    summary: |-
      コンテンツ コントロール内の指定された位置に HTML を挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to put HTML into the contents of the first content control.
                      contentControls.items[0].insertHtml(
                          '<strong>HTML content inserted into the content control.</strong>',
                          'Start');
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Inserted HTML in the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: 必須です。 コンテンツ コントロールに挿入する HTML。
          type:
            - string
        - id: insertLocationString
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.ContentControl.insertInlinePictureFromBase64
    summary: |-
      コンテンツ コントロール内の指定された位置にインライン画像を挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: 必須です。 コンテンツ コントロールに挿入される base64 でエンコードされた画像。
          type:
            - string
        - id: insertLocation
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - Word.InsertLocation
  - uid: word_release.Word.ContentControl.insertInlinePictureFromBase64_1
    summary: |-
      コンテンツ コントロール内の指定された位置にインライン画像を挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: 必須です。 コンテンツ コントロールに挿入される base64 でエンコードされた画像。
          type:
            - string
        - id: insertLocationString
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.ContentControl.insertOoxml
    summary: |-
      指定した位置に、コンテンツコントロールに OOXML を挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: 必須です。 コンテンツコントロールに挿入する OOXML を指定します。
          type:
            - string
        - id: insertLocation
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - Word.InsertLocation
  - uid: word_release.Word.ContentControl.insertOoxml_1
    summary: |-
      指定した位置に、コンテンツコントロールに OOXML を挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to put OOXML into the contents of the first content control.
                      contentControls.items[0].insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", "End");
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Inserted OOXML in the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // Read "Create better add-ins for Word with Office Open XML" for guidance on working with OOXML.
          // https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml
          ```
      parameters:
        - id: ooxml
          description: 必須です。 コンテンツコントロールに挿入する OOXML を指定します。
          type:
            - string
        - id: insertLocationString
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.ContentControl.insertParagraph
    summary: |-
      指定した位置に、段落を挿入します。 InsertLocation の値には、' Start '、' End '、' Before '、または ' After ' を指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: 必須です。 挿入する段落テキスト。
          type:
            - string
        - id: insertLocation
          description: 必須です。 値には、' Start '、' End '、' Before '、または ' After ' を指定できます。 ' Before ' と ' After ' は、' RichTextTable '、' RichTextTableRow '、および ' RichTextTableCell ' のコンテンツコントロールと併用できません。
          type:
            - Word.InsertLocation
  - uid: word_release.Word.ContentControl.insertParagraph_1
    summary: |-
      指定した位置に、段落を挿入します。 InsertLocation の値には、' Start '、' End '、' Before '、または ' After ' を指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to insert a paragraph after the first content control. 
                      contentControls.items[0].insertParagraph('Text of the inserted paragraph.', 'After');
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Inserted a paragraph after the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: paragraphText
          description: 必須です。 挿入する段落テキスト。
          type:
            - string
        - id: insertLocationString
          description: 必須です。 値には、' Start '、' End '、' Before '、または ' After ' を指定できます。 ' Before ' と ' After ' は、' RichTextTable '、' RichTextTableRow '、および ' RichTextTableCell ' のコンテンツコントロールと併用できません。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.ContentControl.insertTable
    summary: |-
      指定した数の行と列を含むテーブルを、コンテンツ コントロール内またはコンテンツ コントロールの横に挿入します。 InsertLocation の値には、' Start '、' End '、' Before '、または ' After ' を指定できます。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocation, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: 必須です。 表の行数。
          type:
            - number
        - id: columnCount
          description: 必須です。 表の列数。
          type:
            - number
        - id: insertLocation
          description: 必須です。 値には、' Start '、' End '、' Before '、または ' After ' を指定できます。 ' Before ' と ' After ' は、' RichTextTable '、' RichTextTableRow '、および ' RichTextTableCell ' のコンテンツコントロールと併用できません。
          type:
            - Word.InsertLocation
        - id: values
          description: 省略可能な 2 次元配列。 対応する文字列が配列で指定されている場合、セルに設定されます。
          type:
            - 'string[][]'
  - uid: word_release.Word.ContentControl.insertTable_1
    summary: |-
      指定した数の行と列を含むテーブルを、コンテンツ コントロール内またはコンテンツ コントロールの横に挿入します。 InsertLocation の値には、' Start '、' End '、' Before '、または ' After ' を指定できます。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: 必須です。 表の行数。
          type:
            - number
        - id: columnCount
          description: 必須です。 表の列数。
          type:
            - number
        - id: insertLocationString
          description: 必須です。 値には、' Start '、' End '、' Before '、または ' After ' を指定できます。 ' Before ' と ' After ' は、' RichTextTable '、' RichTextTableRow '、および ' RichTextTableCell ' のコンテンツコントロールと併用できません。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
        - id: values
          description: 省略可能な 2 次元配列。 対応する文字列が配列で指定されている場合、セルに設定されます。
          type:
            - 'string[][]'
  - uid: word_release.Word.ContentControl.insertText
    summary: |-
      コンテンツ コントロール内の指定された位置にテキストを挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: text
          description: 必須です。 コンテンツ コントロールに挿入する テキスト。
          type:
            - string
        - id: insertLocation
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - Word.InsertLocation
  - uid: word_release.Word.ContentControl.insertText_1
    summary: |-
      コンテンツ コントロール内の指定された位置にテキストを挿入します。 insertLocation 値には、'Replace'、'Start'、'End' のいずれかを指定できます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to replace text in the first content control. 
                      contentControls.items[0].insertText('Replaced text in the first content control.', 'Replace');
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Replaced text in the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Silly stories add-in sample shows how to use the insertText method.
          // https://aka.ms/sillystorywordaddin
          ```
      parameters:
        - id: text
          description: 必須です。 コンテンツ コントロールに挿入する テキスト。
          type:
            - string
        - id: insertLocationString
          description: 必須。 値には、'Replace'、'Start'、'End' のいずれかを指定できます。 ' Replace ' は、' RichTextTable ' および ' RichTextTableRow ' コンテンツコントロールでは使用できません。
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.ContentControl.lists
    summary: |-
      コンテンツ コントロールに含まれるリスト オブジェクトのコレクションを取得します。 読み取り専用です。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: lists
    fullName: lists
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly lists: Word.ListCollection;'
      return:
        type:
          - word.Word.ListCollection
  - uid: word_release.Word.ContentControl.load
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。
    remarks: |-
      このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。

      `load(option?: string | string[]): Word.ContentControl`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。

      `load(option?: { select?: string; expand?: string; }): Word.ContentControl`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControl`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 Top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.ContentControlLoadOptions): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - word.Word.Interfaces.ContentControlLoadOptions
  - uid: word_release.Word.ContentControl.load_1
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Load all of the content control properties
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to load the properties on the first content control. 
                      contentControls.items[0].load(  'appearance,' +
                                                      'cannotDelete,' +
                                                      'cannotEdit,' +
                                                      'id,' +
                                                      'placeHolderText,' +
                                                      'removeWhenEdited,' +
                                                      'title,' +
                                                      'text,' +
                                                      'type,' +
                                                      'style,' +
                                                      'tag,' +
                                                      'font/size,' +
                                                      'font/name,' +
                                                      'font/color');             
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Property values of the first content control:' + 
                                  '   ----- appearance: ' + contentControls.items[0].appearance + 
                                  '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +
                                  '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +
                                  '   ----- color: ' + contentControls.items[0].color +
                                  '   ----- id: ' + contentControls.items[0].id +
                                  '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +
                                  '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +
                                  '   ----- title: ' + contentControls.items[0].title +
                                  '   ----- text: ' + contentControls.items[0].text +
                                  '   ----- type: ' + contentControls.items[0].type +
                                  '   ----- style: ' + contentControls.items[0].style +
                                  '   ----- tag: ' + contentControls.items[0].tag +
                                  '   ----- font size: ' + contentControls.items[0].font.size +
                                  '   ----- font name: ' + contentControls.items[0].font.name +
                                  '   ----- font color: ' + contentControls.items[0].font.color);
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: word_release.Word.ContentControl.load_2
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word_release.Word.ContentControl.paragraphs
    summary: |-
      コンテンツ コントロールにある Paragraph オブジェクトのコレクションを取得します。 読み取り専用です。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - Word.ParagraphCollection
  - uid: word_release.Word.ContentControl.parentBody
    summary: |-
      コンテンツ コントロールの親の本文を取得します。 読み取り専用です。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentBody
    fullName: parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentBody: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: word_release.Word.ContentControl.parentContentControl
    summary: |-
      コンテンツ コントロールを含むコンテンツ コントロールを取得します。 親コンテンツコントロールがない場合にスローされます。 読み取り専用です。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word_release.Word.ContentControl.parentContentControlOrNullObject
    summary: |-
      コンテンツ コントロールを含むコンテンツ コントロールを取得します。 親コンテンツコントロールがない場合は、null オブジェクトを返します。 読み取り専用です。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentContentControlOrNullObject
    fullName: parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word_release.Word.ContentControl.parentTable
    summary: |-
      コンテンツ コントロールを含むテーブルを取得します。 テーブルに含まれていない場合は、例外をスローします。 読み取り専用です。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTable
    fullName: parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTable: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word_release.Word.ContentControl.parentTableCell
    summary: |-
      コンテンツ コントロールを含むテーブル セルを取得します。 テーブルのセルに含まれていない場合は、例外をスローします。 読み取り専用です。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableCell
    fullName: parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCell: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word_release.Word.ContentControl.parentTableCellOrNullObject
    summary: |-
      コンテンツ コントロールを含むテーブル セルを取得します。 テーブル セルに含まれていない場合は、null オブジェクトを返します。 読み取り専用。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableCellOrNullObject
    fullName: parentTableCellOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word_release.Word.ContentControl.parentTableOrNullObject
    summary: |-
      コンテンツ コントロールを含むテーブルを取得します。 テーブルに含まれていない場合は、null オブジェクトを返します。 読み取り専用です。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableOrNullObject
    fullName: parentTableOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableOrNullObject: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word_release.Word.ContentControl.placeholderText
    summary: |-
      コンテンツ コントロールのプレースホルダー テキストを取得または設定します。 コンテンツ コントロールが空の場合は、淡色のテキストが表示されます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: placeholderText
    fullName: placeholderText
    langs:
      - typeScript
    type: property
    syntax:
      content: 'placeholderText: string;'
      return:
        type:
          - string
  - uid: word_release.Word.ContentControl.removeWhenEdited
    summary: |-
      コンテンツ コントロールを編集後に削除できるかどうかを示す値を取得または設定します。 cannotDelete と同時に使用することはできません。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: removeWhenEdited
    fullName: removeWhenEdited
    langs:
      - typeScript
    type: property
    syntax:
      content: 'removeWhenEdited: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.ContentControl.search
    summary: |-
      コンテンツコントロールオブジェクトの範囲に対して、指定した SearchOptions を使用して検索を実行します。 検索結果は、範囲オブジェクトのコレクションです。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - Word.RangeCollection
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to select the first content control.
                      contentControls.items[0].select();
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Selected the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: searchText
          description: 必須です。 検索テキスト。
          type:
            - string
        - id: searchOptions
          description: 省略可能。 検索のオプション。
          type:
            - |-
              Word.SearchOptions | {
                          ignorePunct?: boolean;
                          ignoreSpace?: boolean;
                          matchCase?: boolean;
                          matchPrefix?: boolean;
                          matchSuffix?: boolean;
                          matchWholeWord?: boolean;
                          matchWildcards?: boolean;
                      }
  - uid: word_release.Word.ContentControl.select
    summary: |-
      コンテンツ コントロールを選択します。 その結果、Word は選択範囲にスクロールされます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionMode
          description: 省略可能。 選択モードは、'Select'、'Start'、'End' のいずれかになります。 'Select' が既定値です。
          type:
            - Word.SelectionMode
  - uid: word_release.Word.ContentControl.select_1
    summary: |-
      コンテンツ コントロールを選択します。 その結果、Word は選択範囲にスクロールされます。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: 省略可能。 選択モードは、'Select'、'Start'、'End' のいずれかになります。 'Select' が既定値です。
          type:
            - '"Select" | "Start" | "End"'
  - uid: word_release.Word.ContentControl.set
    summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
    remarks: |-
      このメソッドには、次の追加のシグネチャがあります。

      `set(properties: Word.ContentControl): void`

      #### <a name="examples"></a>例

      ```typescript
      // Adds title and colors to odd and even content controls and changes their appearance.
      await Word.run(async (context) => {
        // Gets the complete sentence (as range) associated with the insertion point.
        let evenContentControls = context.document.contentControls.getByTag("even");
        let oddContentControls = context.document.contentControls.getByTag("odd");
        evenContentControls.load("length");
        oddContentControls.load("length");

        await context.sync();

        for (let i = 0; i < evenContentControls.items.length; i++) {
          // Change a few properties and append a paragraph
          evenContentControls.items[i].set({
            color: "red",
            title: "Odd ContentControl #" + (i + 1),
            appearance: "Tags"
          });
          evenContentControls.items[i].insertParagraph("This is an odd content control", "End");
        }

        for (let j = 0; j < oddContentControls.items.length; j++) {
          // Change a few properties and append a paragraph
          oddContentControls.items[j].set({
            color: "green",
            title: "Even ContentControl #" + (j + 1),
            appearance: "Tags"
          });
          oddContentControls.items[j].insertHtml("This is an <b>even</b> content control", "End");
        }

        await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
          type:
            - Interfaces.ContentControlUpdateData
        - id: options
          description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: word_release.Word.ContentControl.set_1
    summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.ContentControl): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - word.Word.ContentControl
  - uid: word_release.Word.ContentControl.split
    summary: |-
      区切り記号を使用して、コンテンツ コントロールを子の範囲に分割します。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    fullName: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: delimiters
          description: 必須です。 文字列の配列としての区切り文字。
          type:
            - 'string[]'
        - id: multiParagraphs
          description: 省略可能。 返された子の範囲に複数の段落を含めることができるかどうかを示します。 既定値は false で、段落の境界線も区切り文字として使用されることを示します。
          type:
            - boolean
        - id: trimDelimiters
          description: 省略可能。 範囲のコレクション内の範囲から区切り記号をトリミングするかどうかを示します。 既定値は false で、範囲コレクションで返される範囲に区切り文字が含まれていることを示します。
          type:
            - boolean
        - id: trimSpacing
          description: 省略可能。 Range コレクションで返される範囲の先頭または末尾から、スペース文字 (スペース、タブ、列区切り、および段落終了マーク) をトリミングするかどうかを示します。 既定値は false で、範囲の先頭と末尾のスペースが範囲コレクションに含まれることを示します。
          type:
            - boolean
  - uid: word_release.Word.ContentControl.style
    summary: |-
      コンテンツコントロールのスタイル名を取得または設定します。 カスタム スタイルとローカライズされたスタイルの名前には、このプロパティを使用します。 ロケール間で移植可能な組み込みスタイルを使用するには、"styleBuiltIn" プロパティを参照してください。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: word_release.Word.ContentControl.styleBuiltIn
    summary: |-
      コンテンツ コントロールの組み込みスタイル名を取得または設定します。ロケール間で移植可能な組み込みスタイルの場合は、このプロパティを使用します。カスタム スタイルまたはローカライズされたスタイルの名前を使用するには、"style" プロパティを参照してください。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: styleBuiltIn
    fullName: styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
      return:
        type:
          - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
  - uid: word_release.Word.ContentControl.subtype
    summary: |-
      コンテンツ コントロールのサブタイプを取得します。 リッチ テキスト コンテンツ コントロールの場合、サブタイプは、'RichTextInline'、'RichTextParagraphs'、'RichTextTableCell'、'RichTextTableRow' および 'RichTextTable' にできます。 読み取り専用です。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: subtype
    fullName: subtype
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly subtype: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
      return:
        type:
          - Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
  - uid: word_release.Word.ContentControl.tables
    summary: |-
      コンテンツ コントロールに含まれるテーブル オブジェクトのコレクションを取得します。 読み取り専用。

      \[[Api set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Word.TableCollection;'
      return:
        type:
          - Word.TableCollection
  - uid: word_release.Word.ContentControl.tag
    summary: |-
      コンテンツコントロールを識別するタグを取得または設定します。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: tag
    fullName: tag
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tag: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy range object for the current selection.
              var range = context.document.getSelection();
              
              // Queue a commmand to create the content control.
              var myContentControl = range.insertContentControl();
              myContentControl.tag = 'Customer-Address';
              myContentControl.title = ' has t';
              myContentControl.style = 'Heading 2';
              myContentControl.insertText('One Microsoft Way, Redmond, WA 98052', 'Replace');
              myContentControl.cannotEdit = true;
              
              // Queue a command to load the id property for the content control you created.
              context.load(myContentControl, 'id');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Created content control with id: ' + myContentControl.id);
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          // Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("$none"); // Don't need any properties; just wrap each paragraph with a content control.

            await context.sync();

            for (let i = 0; i < paragraphs.items.length; i++) {
              let contentControl = paragraphs.items[i].insertContentControl();
              // For even, tag "even".
              if (i % 2 === 0) {
                contentControl.tag = "even";
              } else {
                contentControl.tag = "odd";
              }
            }
            console.log("Content controls inserted: " + paragraphs.items.length);

            await context.sync();
          });
          ```
  - uid: word_release.Word.ContentControl.text
    summary: |-
      コンテンツ コントロールのテキストを取得します。 読み取り専用です。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
  - uid: word_release.Word.ContentControl.title
    summary: |-
      コンテンツ コントロールのタイトルを取得または設定します。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: title
    fullName: title
    langs:
      - typeScript
    type: property
    syntax:
      content: 'title: string;'
      return:
        type:
          - string
  - uid: word_release.Word.ContentControl.toJSON
    summary: API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の "ContentControl" オブジェクトは API オブジェクトであるのに`toJSON`対して、メソッドはプレーンな JavaScript オブジェクト (として入力します) を返します。`Word.Interfaces.ContentControlData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ContentControlData;'
      return:
        type:
          - word.Word.Interfaces.ContentControlData
        description: ''
  - uid: word_release.Word.ContentControl.track
    summary: ドキュメントの環境変更に基づいて自動的に調整する目的でオブジェクトを追跡します。 これは context.trackedObjects.add(thisObject) 呼び出しの省略形です。 ".sync" 呼び出し間で、かつ ".run" バッチの連続実行の外でこのオブジェクトを使用しているとき、オブジェクトであるプロパティを設定したか、あるメソッドを呼び出したときに "InvalidObjectPath" エラーが表示される場合、オブジェクトを最初に作成したときに、追跡対象オブジェクトの集まりにそのオブジェクトを追加しておく必要がありました。
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: ''
  - uid: word_release.Word.ContentControl.type
    summary: |-
      コンテンツ コントロールの種類を取得します。 現在、リッチ テキストのコンテンツ コントロールのみがサポートされています。 読み取り専用です。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
      return:
        type:
          - Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
  - uid: word_release.Word.ContentControl.untrack
    summary: 前に追跡されていた場合、このオブジェクトに関連付けられているメモリを解放します。 これは context.trackedObjects.remove(thisObject) 呼び出しの省略形です。 追跡対象オブジェクトが多いとホスト アプリケーションの動作が遅くなります。追加したオブジェクトが不要になったら、必ずそれを解放してください。 メモリ リリースを有効にするには、"context.sync()" を先に呼び出す必要があります。
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: ''