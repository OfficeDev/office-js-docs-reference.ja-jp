### YamlMime:UniversalReference
ms.openlocfilehash: c01653f13dc4a6bf97747b8349a55a9068769571
ms.sourcegitcommit: 5e31602ed9cbddfcff2768b7ed69dd4821440b90
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 03/14/2019
ms.locfileid: "30575957"
items:
- uid: excel.Excel.Worksheet
  summary: >-
    <span data-ttu-id="b8dc1-101">Excel のワークシートは、セルのグリッドです。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="b8dc1-102">データ、表、グラフなどを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-102">It can contain data, tables, charts, etc.</span></span>


    <span data-ttu-id="b8dc1-103">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Worksheet
  fullName: Excel.Worksheet
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Worksheet.activate
  - excel.Excel.Worksheet.autoFilter
  - excel.Excel.Worksheet.calculate
  - excel.Excel.Worksheet.charts
  - excel.Excel.Worksheet.comments
  - excel.Excel.Worksheet.context
  - excel.Excel.Worksheet.copy
  - excel.Excel.Worksheet.copy_1
  - excel.Excel.Worksheet.delete
  - excel.Excel.Worksheet.enableCalculation
  - excel.Excel.Worksheet.findAll
  - excel.Excel.Worksheet.findAllOrNullObject
  - excel.Excel.Worksheet.freezePanes
  - excel.Excel.Worksheet.getCell
  - excel.Excel.Worksheet.getNext
  - excel.Excel.Worksheet.getNextOrNullObject
  - excel.Excel.Worksheet.getPrevious
  - excel.Excel.Worksheet.getPreviousOrNullObject
  - excel.Excel.Worksheet.getRange
  - excel.Excel.Worksheet.getRangeByIndexes
  - excel.Excel.Worksheet.getRanges
  - excel.Excel.Worksheet.getUsedRange
  - excel.Excel.Worksheet.getUsedRangeOrNullObject
  - excel.Excel.Worksheet.horizontalPageBreaks
  - excel.Excel.Worksheet.id
  - excel.Excel.Worksheet.load
  - excel.Excel.Worksheet.load_1
  - excel.Excel.Worksheet.load_2
  - excel.Excel.Worksheet.name
  - excel.Excel.Worksheet.names
  - excel.Excel.Worksheet.onActivated
  - excel.Excel.Worksheet.onCalculated
  - excel.Excel.Worksheet.onChanged
  - excel.Excel.Worksheet.onDeactivated
  - excel.Excel.Worksheet.onFiltered
  - excel.Excel.Worksheet.onFormatChanged
  - excel.Excel.Worksheet.onSelectionChanged
  - excel.Excel.Worksheet.pageLayout
  - excel.Excel.Worksheet.pivotTables
  - excel.Excel.Worksheet.position
  - excel.Excel.Worksheet.protection
  - excel.Excel.Worksheet.replaceAll
  - excel.Excel.Worksheet.set
  - excel.Excel.Worksheet.set_1
  - excel.Excel.Worksheet.shapes
  - excel.Excel.Worksheet.showGridlines
  - excel.Excel.Worksheet.showHeadings
  - excel.Excel.Worksheet.slicers
  - excel.Excel.Worksheet.standardHeight
  - excel.Excel.Worksheet.standardWidth
  - excel.Excel.Worksheet.tabColor
  - excel.Excel.Worksheet.tables
  - excel.Excel.Worksheet.toJSON
  - excel.Excel.Worksheet.verticalPageBreaks
  - excel.Excel.Worksheet.visibility
- uid: excel.Excel.Worksheet.activate
  summary: >-
    <span data-ttu-id="b8dc1-104">Excel UI でワークシートをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-104">Activate the worksheet in the Excel UI.</span></span>


    <span data-ttu-id="b8dc1-105">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: activate()
  fullName: activate()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'activate(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-106\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-106\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.autoFilter
  summary: >-
    <span data-ttu-id="b8dc1-107">ワークシートの AutoFilter オブジェクトを表します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-107">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="b8dc1-108">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-108">Read-Only.</span></span>


    <span data-ttu-id="b8dc1-109">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-109">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: autoFilter
  fullName: autoFilter
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly autoFilter: Excel.AutoFilter;'
    return:
      type:
      - excel.Excel.AutoFilter
- uid: excel.Excel.Worksheet.calculate
  summary: >-
    <span data-ttu-id="b8dc1-110">ワークシート上のすべてのセルを計算します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-110">Calculates all cells on a worksheet.</span></span>


    <span data-ttu-id="b8dc1-111">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(markAllDirty)
  fullName: calculate(markAllDirty)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: markAllDirty
      description: <span data-ttu-id="b8dc1-112">True を設定すると、すべてがダーティとしてマークされます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-112">True, to mark all as dirty.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.charts
  summary: >-
    <span data-ttu-id="b8dc1-113">ワークシートの一部になっているグラフのコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-113">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="b8dc1-114">値の取得のみ可能です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-114">Read-only.</span></span>


    <span data-ttu-id="b8dc1-115">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: charts
  fullName: charts
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
- uid: excel.Excel.Worksheet.comments
  summary: >-
    <span data-ttu-id="b8dc1-116">ワークシート上のすべての Comments オブジェクトの集まりを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-116">Returns a collection of all the Comments objects on the worksheet.</span></span> <span data-ttu-id="b8dc1-117">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-117">Read-only.</span></span>


    <span data-ttu-id="b8dc1-118">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-118">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: comments
  fullName: comments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly comments: Excel.CommentCollection;'
    return:
      type:
      - excel.Excel.CommentCollection
- uid: excel.Excel.Worksheet.context
  summary: <span data-ttu-id="b8dc1-119">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-119">The request context associated with the object.</span></span> <span data-ttu-id="b8dc1-120">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-120">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Worksheet.copy
  summary: >-
    <span data-ttu-id="b8dc1-121">ワークシートをコピーして、指定した位置に配置します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-121">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="b8dc1-122">コピーしたワークシートを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-122">Return the copied worksheet.</span></span>


    <span data-ttu-id="b8dc1-123">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-123">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionType, relativeTo)
  fullName: copy(positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-124\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-124\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n});\n```"
    parameters:
    - id: positionType
      description: <span data-ttu-id="b8dc1-125">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-125">Optional.</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="b8dc1-126">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-126">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.copy_1
  summary: >-
    <span data-ttu-id="b8dc1-127">ワークシートをコピーして、指定した位置に配置します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-127">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="b8dc1-128">コピーしたワークシートを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-128">Return the copied worksheet.</span></span>


    <span data-ttu-id="b8dc1-129">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-129">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionTypeString, relativeTo)
  fullName: copy(positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: positionTypeString
      description: <span data-ttu-id="b8dc1-130">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-130">Optional.</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="b8dc1-131">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-131">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.delete
  summary: >-
    <span data-ttu-id="b8dc1-132">ブックからワークシートを削除します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-132">Deletes the worksheet from the workbook.</span></span>


    <span data-ttu-id="b8dc1-133">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-133">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-134\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-134\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.enableCalculation
  summary: >-
    <span data-ttu-id="b8dc1-135">ワークシートの enableCalculation プロパティを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-135">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="b8dc1-136">True の場合、Excel は必要に応じてワークシートを再計算します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-136">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="b8dc1-137">False の場合、Excel はシートを再計算しません。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-137">False if Excel doesn't recalculate the sheet.</span></span>


    <span data-ttu-id="b8dc1-138">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-138">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: enableCalculation
  fullName: enableCalculation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.findAll
  summary: >-
    <span data-ttu-id="b8dc1-139">指定された条件に基づいて指定された文字列の発生箇所をすべて見つけ、1 つまたは複数の長方形範囲を構成する RangeAreas オブジェクトとして返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-139">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="b8dc1-140">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-140">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAll(text, criteria)
  fullName: findAll(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: <span data-ttu-id="b8dc1-141">検索条件に一致する1つまたは複数の四角形の範囲で構成される rangearea オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-141">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="b8dc1-142">この条件に一致するセルがない場合は、ItemNotFound エラーがスローされます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-142">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="b8dc1-143">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-143">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="b8dc1-144">追加の条件。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-144">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.findAllOrNullObject
  summary: >-
    <span data-ttu-id="b8dc1-145">指定された条件に基づいて指定された文字列の発生箇所をすべて見つけ、1 つまたは複数の長方形範囲を構成する RangeAreas オブジェクトとして返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-145">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="b8dc1-146">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-146">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAllOrNullObject(text, criteria)
  fullName: findAllOrNullObject(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: >-
        <span data-ttu-id="b8dc1-147">検索条件に一致する1つまたは複数の四角形の範囲で構成される rangearea オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-147">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="b8dc1-148">一致しない場合、この関数は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-148">If there are no matches, this function will return a null object.</span></span>

        #### <a name="examples"></a><span data-ttu-id="b8dc1-149">例</span><span class="sxs-lookup"><span data-stu-id="b8dc1-149">Examples</span></span>


        ```typescript

        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem("Sample");
            const foundRanges = sheet.findAllOrNullObject("Complete", {
                completeMatch: true,
                matchCase: false
            });

            await context.sync();

            if (foundRanges.isNullObject) {
                console.log("No complete projects");
            } else {
                foundRanges.format.fill.color = "green"
            }
        });

        ```
    parameters:
    - id: text
      description: <span data-ttu-id="b8dc1-150">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-150">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="b8dc1-151">追加の条件。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-151">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.freezePanes
  summary: >-
    <span data-ttu-id="b8dc1-152">ワークシート上の固定されたウィンドウを操作するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-152">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="b8dc1-153">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-153">Read-only.</span></span>


    <span data-ttu-id="b8dc1-154">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-154">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: freezePanes
  fullName: freezePanes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type:
      - excel.Excel.WorksheetFreezePanes
- uid: excel.Excel.Worksheet.getCell
  summary: >-
    <span data-ttu-id="b8dc1-155">行と列の番号に基づいて、1 つのセルを含んだ範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-155">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="b8dc1-156">ワークシートのグリッド内に収まるセルは、親の範囲の境界の外側にある場合があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-156">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>


    <span data-ttu-id="b8dc1-157">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-157">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell(row, column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-158\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-158\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="b8dc1-159">取得するセルの行番号。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-159">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="b8dc1-160">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-160">Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="b8dc1-161">取得するセルの列番号。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-161">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="b8dc1-162">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-162">Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getNext
  summary: >-
    <span data-ttu-id="b8dc1-163">これに続くワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-163">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="b8dc1-164">このメソッドに続くワークシートがない場合、このメソッドはエラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-164">If there are no worksheets following this one, this method will throw an error.</span></span>


    <span data-ttu-id="b8dc1-165">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-165">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNext(visibleOnly)
  fullName: getNext(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-166\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-166\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="b8dc1-167">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-167">Optional.</span></span> <span data-ttu-id="b8dc1-168">true の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-168">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getNextOrNullObject
  summary: >-
    <span data-ttu-id="b8dc1-169">これに続くワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-169">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="b8dc1-170">このメソッドに続くワークシートがない場合、このメソッドは null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-170">If there are no worksheets following this one, this method will return a null object.</span></span>


    <span data-ttu-id="b8dc1-171">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-171">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNextOrNullObject(visibleOnly)
  fullName: getNextOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="b8dc1-172">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-172">Optional.</span></span> <span data-ttu-id="b8dc1-173">true の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-173">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPrevious
  summary: >-
    <span data-ttu-id="b8dc1-174">これより前のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-174">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="b8dc1-175">前のワークシートがない場合、このメソッドはエラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-175">If there are no previous worksheets, this method will throw an error.</span></span>


    <span data-ttu-id="b8dc1-176">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-176">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPrevious(visibleOnly)
  fullName: getPrevious(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-177\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-177\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="b8dc1-178">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-178">Optional.</span></span> <span data-ttu-id="b8dc1-179">true の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-179">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPreviousOrNullObject
  summary: >-
    <span data-ttu-id="b8dc1-180">これより前のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-180">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="b8dc1-181">前のワークシートがない場合、このメソッドは null の objet を返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-181">If there are no previous worksheets, this method will return a null objet.</span></span>


    <span data-ttu-id="b8dc1-182">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-182">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPreviousOrNullObject(visibleOnly)
  fullName: getPreviousOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="b8dc1-183">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-183">Optional.</span></span> <span data-ttu-id="b8dc1-184">true の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-184">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getRange
  summary: >-
    <span data-ttu-id="b8dc1-185">アドレスまたは名前で指定された、セルの単一の四角形のブロックを表す range オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-185">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>


    <span data-ttu-id="b8dc1-186">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-186">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange(address)
  fullName: getRange(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-187\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-187\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="b8dc1-188">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-188">Optional.</span></span> <span data-ttu-id="b8dc1-189">範囲のアドレスまたは名前を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-189">The string representing the address or name of the range.</span></span> <span data-ttu-id="b8dc1-190">たとえば、"A1: B2" となります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-190">For example, "A1:B2".</span></span> <span data-ttu-id="b8dc1-191">指定されていない場合は、ワークシート全体の範囲が返されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-191">If not specified, the entire worksheet range is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getRangeByIndexes
  summary: >-
    <span data-ttu-id="b8dc1-192">特定の行インデックスと列インデックスから開始し、一定数の行と列にわたる、Range オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-192">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>


    <span data-ttu-id="b8dc1-193">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: startRow
      description: <span data-ttu-id="b8dc1-194">開始行 (ゼロインデックス)。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-194">Start row (zero-indexed).</span></span>
      type:
      - number
    - id: startColumn
      description: <span data-ttu-id="b8dc1-195">開始列 (ゼロインデックス)。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-195">Start column (zero-indexed).</span></span>
      type:
      - number
    - id: rowCount
      description: <span data-ttu-id="b8dc1-196">範囲に含める行の数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-196">Number of rows to include in the range.</span></span>
      type:
      - number
    - id: columnCount
      description: <span data-ttu-id="b8dc1-197">範囲に含める列の数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-197">Number of columns to include in the range.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getRanges
  summary: >-
    <span data-ttu-id="b8dc1-198">アドレスまたは名前で指定され、1 つまたは複数の長方形範囲ブロックを表す RangeAreas オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-198">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>


    <span data-ttu-id="b8dc1-199">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-199">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getRanges(address)
  fullName: getRanges(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRanges(address?: string): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-200\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-200\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="b8dc1-201">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-201">Optional.</span></span> <span data-ttu-id="b8dc1-202">コンマ区切りのアドレスまたは個々の範囲の名前を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-202">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="b8dc1-203">たとえば、"A1: B2, A5: B5" とします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-203">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="b8dc1-204">指定しない場合、ワークシート全体の rangearea オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-204">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getUsedRange
  summary: >-
    <span data-ttu-id="b8dc1-205">使用範囲とは、値または書式設定が割り当たっているすべてのセルを包含する最小の範囲です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-205">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="b8dc1-206">ワークシート全体が空白の場合、この関数は左上のセルを返します (つまり、エラーはスローされ*ません*)。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-206">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>


    <span data-ttu-id="b8dc1-207">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-208\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-208\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="b8dc1-209">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-209">Optional.</span></span> <span data-ttu-id="b8dc1-210">true の場合は、値を持つセルのみを使用セルと見なします (書式設定は無視されます)。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-210">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="b8dc1-211">\[Api セット: excelapi 1.2\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-211">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="b8dc1-p127">使用範囲とは、値または書式設定が割り当たっているすべてのセルを包含する最小の範囲です。ワークシート全体が空白の場合、この関数は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-p127">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>


    <span data-ttu-id="b8dc1-214">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-214">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="b8dc1-215">省略可能。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-215">Optional.</span></span> <span data-ttu-id="b8dc1-216">値の入っているセルのみを使用セルと見なします。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-216">Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.horizontalPageBreaks
  summary: >-
    <span data-ttu-id="b8dc1-217">ワークシートの水平改ページをまとめて取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-217">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="b8dc1-218">このコレクションには、手動の改ページのみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-218">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="b8dc1-219">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-219">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: horizontalPageBreaks
  fullName: horizontalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.id
  summary: >-
    <span data-ttu-id="b8dc1-p130">指定されたブックのワークシートを一意に識別する値を返します。この識別子の値は、ワークシートの名前を変更したり移動したりしても同じままです。値の取得のみ可能です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-p130">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>


    <span data-ttu-id="b8dc1-223">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-223">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.load
  summary: <span data-ttu-id="b8dc1-224">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-224">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b8dc1-225">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-225">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="b8dc1-226">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-226">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="b8dc1-227">`load(option?: string | string[]): Excel.Worksheet`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-227">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="b8dc1-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="b8dc1-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="b8dc1-230">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-230">It is similar to the preceding signature.</span></span> <span data-ttu-id="b8dc1-231">top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-231">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="b8dc1-232">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-232">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="b8dc1-233">option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-233">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.WorksheetLoadOptions
- uid: excel.Excel.Worksheet.load_1
  summary: <span data-ttu-id="b8dc1-234">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-234">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b8dc1-235">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-235">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-236\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-236\">Examples</span></span>\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="b8dc1-237">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-237">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Worksheet.load_2
  summary: <span data-ttu-id="b8dc1-238">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-238">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b8dc1-239">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-239">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="b8dc1-240">ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-240">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.Worksheet.name
  summary: >-
    <span data-ttu-id="b8dc1-241">ワークシートの表示名。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-241">The display name of the worksheet.</span></span>


    <span data-ttu-id="b8dc1-242">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.names
  summary: >-
    <span data-ttu-id="b8dc1-243">現在のワークシートにスコープされている名前のコレクション。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-243">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="b8dc1-244">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-244">Read-only.</span></span>


    <span data-ttu-id="b8dc1-245">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-245">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: names
  fullName: names
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
- uid: excel.Excel.Worksheet.onActivated
  summary: >-
    <span data-ttu-id="b8dc1-246">ワークシートがアクティブになるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-246">Occurs when the worksheet is activated.</span></span>


    <span data-ttu-id="b8dc1-247">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-247">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-248\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-248\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onCalculated
  summary: >-
    <span data-ttu-id="b8dc1-249">ワークシートが計算されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-249">Occurs when the worksheet is calculated.</span></span>


    <span data-ttu-id="b8dc1-250">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-250">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-251\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-251\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onCalculated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The worksheet has recalculated.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onChanged
  summary: >-
    <span data-ttu-id="b8dc1-252">特定のワークシートでデータが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-252">Occurs when data changed on a specific worksheet.</span></span>


    <span data-ttu-id="b8dc1-253">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-253">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-254\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-254\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n});\n```"
- uid: excel.Excel.Worksheet.onDeactivated
  summary: >-
    <span data-ttu-id="b8dc1-255">ワークシートが非アクティブになるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-255">Occurs when the worksheet is deactivated.</span></span>


    <span data-ttu-id="b8dc1-256">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-256">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-257\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-257\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onFiltered
  summary: >-
    <span data-ttu-id="b8dc1-258">フィルターが特定のワークシートに適用されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-258">Occurs when filter is applied on a specific worksheet.</span></span>


    <span data-ttu-id="b8dc1-259">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-259">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.Worksheet.onFormatChanged
  summary: >-
    <span data-ttu-id="b8dc1-260">フォーマットが特定のワークシートで変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-260">Occurs when format changed on a specific worksheet.</span></span>


    <span data-ttu-id="b8dc1-261">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-261">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.Worksheet.onSelectionChanged
  summary: >-
    <span data-ttu-id="b8dc1-262">特定のワークシートで選択範囲が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-262">Occurs when the selection changes on a specific worksheet.</span></span>


    <span data-ttu-id="b8dc1-263">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-263">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-264\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-264\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.pageLayout
  summary: >-
    <span data-ttu-id="b8dc1-265">ワークシートの PageLayout オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-265">Gets the PageLayout object of the worksheet.</span></span>


    <span data-ttu-id="b8dc1-266">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-266">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: pageLayout
  fullName: pageLayout
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pageLayout: Excel.PageLayout;'
    return:
      type:
      - excel.Excel.PageLayout
- uid: excel.Excel.Worksheet.pivotTables
  summary: >-
    <span data-ttu-id="b8dc1-267">ワークシートの一部になっているピボットテーブルのコレクション。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-267">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="b8dc1-268">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-268">Read-only.</span></span>


    <span data-ttu-id="b8dc1-269">\[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-269">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: pivotTables
  fullName: pivotTables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type:
      - excel.Excel.PivotTableCollection
- uid: excel.Excel.Worksheet.position
  summary: >-
    <span data-ttu-id="b8dc1-270">0 を起点とした、ブック内のワークシートの位置。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-270">The zero-based position of the worksheet within the workbook.</span></span>


    <span data-ttu-id="b8dc1-271">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-271">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: position
  fullName: position
  langs:
  - typeScript
  type: property
  syntax:
    content: 'position: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.protection
  summary: >-
    <span data-ttu-id="b8dc1-272">ワークシートのシート保護オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-272">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="b8dc1-273">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-273">Read-only.</span></span>


    <span data-ttu-id="b8dc1-274">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-274">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: protection
  fullName: protection
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
- uid: excel.Excel.Worksheet.replaceAll
  summary: >-
    <span data-ttu-id="b8dc1-275">現在のワークシート内で、指定された条件に基づき、指定された文字列を検索し、置換します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-275">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>


    <span data-ttu-id="b8dc1-276">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-276">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: replaceAll(text, replacement, criteria)
  fullName: replaceAll(text, replacement, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: <span data-ttu-id="b8dc1-277">実行された置換の数。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-277">The number of replacements performed.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="b8dc1-278">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-278">String to find.</span></span>
      type:
      - string
    - id: replacement
      description: <span data-ttu-id="b8dc1-279">元のと置き換える文字列。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-279">String to replace the original with.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="b8dc1-280">置換条件を追加します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-280">Additional Replace Criteria.</span></span>
      type:
      - excel.Excel.ReplaceCriteria
- uid: excel.Excel.Worksheet.set
  summary: <span data-ttu-id="b8dc1-281">一度に1つのオブジェクトの複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-281">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="b8dc1-282">適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-282">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="b8dc1-283">このメソッドには、次の追加のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-283">This method has the following additional signature:</span></span>


    `set(properties: Excel.Worksheet): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="b8dc1-284">メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-284">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.WorksheetUpdateData
    - id: options
      description: <span data-ttu-id="b8dc1-285">プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-285">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.Worksheet.set_1
  summary: <span data-ttu-id="b8dc1-286">既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-286">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.shapes
  summary: >-
    <span data-ttu-id="b8dc1-287">ワークシート上のすべての Shape オブジェクトをまとめて返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-287">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="b8dc1-288">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-288">Read-only.</span></span>


    <span data-ttu-id="b8dc1-289">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-289">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: shapes
  fullName: shapes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly shapes: Excel.ShapeCollection;'
    return:
      type:
      - excel.Excel.ShapeCollection
- uid: excel.Excel.Worksheet.showGridlines
  summary: >-
    <span data-ttu-id="b8dc1-290">ワークシートの gridlines フラグを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-290">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="b8dc1-291">このフラグは、グリッド線をユーザーに表示するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-291">This flag determines whether gridlines are visible to the user.</span></span>


    <span data-ttu-id="b8dc1-292">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-292">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showGridlines
  fullName: showGridlines
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-293\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-293\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.showHeadings
  summary: >-
    <span data-ttu-id="b8dc1-294">ワークシートの headings フラグを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-294">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="b8dc1-295">このフラグは、ユーザーに見出しを表示するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-295">This flag determines whether headings are visible to the user.</span></span>


    <span data-ttu-id="b8dc1-296">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-296">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showHeadings
  fullName: showHeadings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.slicers
  summary: >-
    <span data-ttu-id="b8dc1-297">ワークシートに含まれるスライサーをまとめて返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-297">Returns collection of slicers that are part of the worksheet.</span></span> <span data-ttu-id="b8dc1-298">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-298">Read-only.</span></span>


    <span data-ttu-id="b8dc1-299">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-299">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: slicers
  fullName: slicers
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly slicers: Excel.SlicerCollection;'
    return:
      type:
      - excel.Excel.SlicerCollection
- uid: excel.Excel.Worksheet.standardHeight
  summary: >-
    <span data-ttu-id="b8dc1-300">ワークシート内のすべての行の標準 (既定) の高さ (ポイント数) を返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-300">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="b8dc1-301">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-301">Read-only.</span></span>


    <span data-ttu-id="b8dc1-302">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-302">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardHeight
  fullName: standardHeight
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.standardWidth
  summary: >-
    <span data-ttu-id="b8dc1-303">ワークシートのすべての列の標準 (既定) の幅を返すか設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-303">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="b8dc1-304">列幅の単位は、標準スタイルの 1 文字分の幅に相当します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-304">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="b8dc1-305">プロポーショナル フォントでは、数字の 0 の幅が列幅の単位になります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-305">For proportional fonts, the width of the character 0 (zero) is used.</span></span>


    <span data-ttu-id="b8dc1-306">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-306">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardWidth
  fullName: standardWidth
  langs:
  - typeScript
  type: property
  syntax:
    content: 'standardWidth: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.tabColor
  summary: >-
    <span data-ttu-id="b8dc1-307">ワークシートのタブの色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-307">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="b8dc1-308">タブの色を取得するときに、ワークシートが非表示の場合、値は null になります。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-308">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="b8dc1-309">ワークシートが表示されているにもかかわらず、tab の色が auto に設定されている場合は、空の文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-309">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="b8dc1-310">それ以外の場合は、プロパティは "\#123456" という色を設定するときに、"" という形式で設定されます。色を設定するときは、空の文字列を使用して "auto" 色を設定するか、または実際の色を設定します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-310">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>


    <span data-ttu-id="b8dc1-311">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-311">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tabColor
  fullName: tabColor
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tabColor: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b8dc1-312\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b8dc1-312\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.tables
  summary: >-
    <span data-ttu-id="b8dc1-313">ワークシートの一部になっているグラフのコレクション。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-313">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="b8dc1-314">値の取得のみ可能です。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-314">Read-only.</span></span>


    <span data-ttu-id="b8dc1-315">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-315">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
- uid: excel.Excel.Worksheet.toJSON
  summary: <span data-ttu-id="b8dc1-316">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="b8dc1-316">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="b8dc1-317">.</span><span class="sxs-lookup"><span data-stu-id="b8dc1-317"></span></span> <span data-ttu-id="b8dc1-318">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="b8dc1-318"></span></span><!-- --><span data-ttu-id="b8dc1-319">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の Worksheet オブジェクトは API オブジェクトであるのに対して`toJSON` 、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="b8dc1-319">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="b8dc1-320">) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-320">) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetData
      description: ''
- uid: excel.Excel.Worksheet.verticalPageBreaks
  summary: >-
    <span data-ttu-id="b8dc1-321">ワークシートの垂直改ページをまとめて取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-321">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="b8dc1-322">このコレクションには、手動の改ページのみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-322">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="b8dc1-323">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-323">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: verticalPageBreaks
  fullName: verticalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.visibility
  summary: >-
    <span data-ttu-id="b8dc1-324">ワークシートの可視性。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-324">The Visibility of the worksheet.</span></span>


    <span data-ttu-id="b8dc1-325">\[[API set: 表示を読み取るための excelapi 1.1、設定用の 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) 。</span><span class="sxs-lookup"><span data-stu-id="b8dc1-325">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="b8dc1-326">\]</span><span class="sxs-lookup"><span data-stu-id="b8dc1-326"></span></span>
  name: visibility
  fullName: visibility
  langs:
  - typeScript
  type: property
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type:
      - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
