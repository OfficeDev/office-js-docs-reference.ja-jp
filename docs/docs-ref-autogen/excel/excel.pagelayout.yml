### YamlMime:UniversalReference
ms.openlocfilehash: b8bf84a27ae43ce575a06fed3bbaa04a4aa60104
ms.sourcegitcommit: fd03ef72d6a546b0e4dbe0cc9e75d2a7cf9341a1
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/27/2019
ms.locfileid: "30303229"
items:
- uid: excel.Excel.PageLayout
  summary: '\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]'
  isPreview: true
  name: Excel.PageLayout
  fullName: Excel.PageLayout
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.PageLayout.blackAndWhite
  - excel.Excel.PageLayout.bottomMargin
  - excel.Excel.PageLayout.centerHorizontally
  - excel.Excel.PageLayout.centerVertically
  - excel.Excel.PageLayout.context
  - excel.Excel.PageLayout.draftMode
  - excel.Excel.PageLayout.firstPageNumber
  - excel.Excel.PageLayout.footerMargin
  - excel.Excel.PageLayout.getPrintArea
  - excel.Excel.PageLayout.getPrintAreaOrNullObject
  - excel.Excel.PageLayout.getPrintTitleColumns
  - excel.Excel.PageLayout.getPrintTitleColumnsOrNullObject
  - excel.Excel.PageLayout.getPrintTitleRows
  - excel.Excel.PageLayout.getPrintTitleRowsOrNullObject
  - excel.Excel.PageLayout.headerMargin
  - excel.Excel.PageLayout.headersFooters
  - excel.Excel.PageLayout.leftMargin
  - excel.Excel.PageLayout.load
  - excel.Excel.PageLayout.load_1
  - excel.Excel.PageLayout.load_2
  - excel.Excel.PageLayout.orientation
  - excel.Excel.PageLayout.paperSize
  - excel.Excel.PageLayout.printComments
  - excel.Excel.PageLayout.printErrors
  - excel.Excel.PageLayout.printGridlines
  - excel.Excel.PageLayout.printHeadings
  - excel.Excel.PageLayout.printOrder
  - excel.Excel.PageLayout.rightMargin
  - excel.Excel.PageLayout.set
  - excel.Excel.PageLayout.set_1
  - excel.Excel.PageLayout.setPrintArea
  - excel.Excel.PageLayout.setPrintMargins
  - excel.Excel.PageLayout.setPrintMargins_1
  - excel.Excel.PageLayout.setPrintTitleColumns
  - excel.Excel.PageLayout.setPrintTitleRows
  - excel.Excel.PageLayout.toJSON
  - excel.Excel.PageLayout.topMargin
  - excel.Excel.PageLayout.zoom
- uid: excel.Excel.PageLayout.blackAndWhite
  summary: >-
    ワークシートの黒と白の印刷オプションを取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: blackAndWhite
  fullName: blackAndWhite
  langs:
  - typeScript
  type: property
  syntax:
    content: 'blackAndWhite: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.PageLayout.bottomMargin
  summary: >-
    ポイント単位で印刷するために使用するワークシートの下部ページ余白を取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: bottomMargin
  fullName: bottomMargin
  langs:
  - typeScript
  type: property
  syntax:
    content: 'bottomMargin: number;'
    return:
      type:
      - number
- uid: excel.Excel.PageLayout.centerHorizontally
  summary: >-
    ワークシートの左右の中央にあるフラグを取得または設定します。 このフラグは、印刷時にワークシートを水平方向の中央に配置するかどうかを指定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: centerHorizontally
  fullName: centerHorizontally
  langs:
  - typeScript
  type: property
  syntax:
    content: 'centerHorizontally: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const farmSheet = context.workbook.worksheets.getItem(\"Print\");\n    farmSheet.pageLayout.centerHorizontally = true;\n    farmSheet.pageLayout.centerVertically = true;\n    await context.sync();\n});\n```"
- uid: excel.Excel.PageLayout.centerVertically
  summary: >-
    ワークシートの上下の中央にあるフラグを取得または設定します。 このフラグは、印刷時にワークシートを垂直方向に中央揃えにするかどうかを指定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: centerVertically
  fullName: centerVertically
  langs:
  - typeScript
  type: property
  syntax:
    content: 'centerVertically: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const farmSheet = context.workbook.worksheets.getItem(\"Print\");\n    farmSheet.pageLayout.centerHorizontally = true;\n    farmSheet.pageLayout.centerVertically = true;\n    await context.sync();\n});\n```"
- uid: excel.Excel.PageLayout.context
  summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
  isPreview: true
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.PageLayout.draftMode
  summary: >-
    ワークシートの下書きモードオプションを取得または設定します。 true の場合、シートはグラフィックスなしで印刷されます。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: draftMode
  fullName: draftMode
  langs:
  - typeScript
  type: property
  syntax:
    content: 'draftMode: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.PageLayout.firstPageNumber
  summary: >-
    印刷するワークシートの最初のページ番号を取得または設定します。 Null 値は、"自動" ページ番号を表します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: firstPageNumber
  fullName: firstPageNumber
  langs:
  - typeScript
  type: property
  syntax:
    content: 'firstPageNumber: number | "";'
    return:
      type:
      - number | ""
- uid: excel.Excel.PageLayout.footerMargin
  summary: >-
    ワークシートのフッターの余白をポイント単位で取得または設定します。印刷時に使用されます。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: footerMargin
  fullName: footerMargin
  langs:
  - typeScript
  type: property
  syntax:
    content: 'footerMargin: number;'
    return:
      type:
      - number
- uid: excel.Excel.PageLayout.getPrintArea
  summary: >-
    ワークシートの印刷範囲を表す、1つまたは複数の四角形の範囲で構成される rangeareas オブジェクトを取得します。 印刷範囲がない場合は、ItemNotFound エラーがスローされます。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: getPrintArea()
  fullName: getPrintArea()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrintArea(): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: ''
- uid: excel.Excel.PageLayout.getPrintAreaOrNullObject
  summary: >-
    ワークシートの印刷範囲を表す、1つまたは複数の四角形の範囲で構成される rangeareas オブジェクトを取得します。 印刷範囲がない場合は、null オブジェクトが返されます。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: getPrintAreaOrNullObject()
  fullName: getPrintAreaOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrintAreaOrNullObject(): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: ''
- uid: excel.Excel.PageLayout.getPrintTitleColumns
  summary: >-
    タイトル列を表す range オブジェクトを取得します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: getPrintTitleColumns()
  fullName: getPrintTitleColumns()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrintTitleColumns(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.PageLayout.getPrintTitleColumnsOrNullObject
  summary: >-
    タイトル列を表す range オブジェクトを取得します。 設定されていない場合は、null オブジェクトが返されます。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: getPrintTitleColumnsOrNullObject()
  fullName: getPrintTitleColumnsOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrintTitleColumnsOrNullObject(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.PageLayout.getPrintTitleRows
  summary: >-
    タイトル行を表す range オブジェクトを取得します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: getPrintTitleRows()
  fullName: getPrintTitleRows()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrintTitleRows(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.PageLayout.getPrintTitleRowsOrNullObject
  summary: >-
    タイトル行を表す range オブジェクトを取得します。 設定されていない場合は、null オブジェクトが返されます。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: getPrintTitleRowsOrNullObject()
  fullName: getPrintTitleRowsOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrintTitleRowsOrNullObject(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.PageLayout.headerMargin
  summary: >-
    印刷時に使用するワークシートのヘッダーの余白をポイント単位で取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: headerMargin
  fullName: headerMargin
  langs:
  - typeScript
  type: property
  syntax:
    content: 'headerMargin: number;'
    return:
      type:
      - number
- uid: excel.Excel.PageLayout.headersFooters
  summary: >-
    ワークシートのヘッダーとフッターの構成。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: headersFooters
  fullName: headersFooters
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly headersFooters: Excel.HeaderFooterGroup;'
    return:
      type:
      - excel.Excel.HeaderFooterGroup
- uid: excel.Excel.PageLayout.leftMargin
  summary: >-
    印刷するときに使用するワークシートの左余白をポイント単位で取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: leftMargin
  fullName: leftMargin
  langs:
  - typeScript
  type: property
  syntax:
    content: 'leftMargin: number;'
    return:
      type:
      - number
- uid: excel.Excel.PageLayout.load
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る前に、"context. sync ()" を呼び出す必要があります。
  remarks: >-
    このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。


    `load(option?: string | string[]): Excel.PageLayout`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。


    `load(option?: { select?: string; expand?: string; }): Excel.PageLayout`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PageLayout`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
  isPreview: true
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.PageLayoutLoadOptions): Excel.PageLayout;'
    return:
      type:
      - excel.Excel.PageLayout
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.PageLayoutLoadOptions
- uid: excel.Excel.PageLayout.load_1
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
  isPreview: true
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.PageLayout;'
    return:
      type:
      - excel.Excel.PageLayout
      description: ''
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type:
      - string | string[]
- uid: excel.Excel.PageLayout.load_2
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
  isPreview: true
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.PageLayout;'
    return:
      type:
      - excel.Excel.PageLayout
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.PageLayout.orientation
  summary: >-
    ワークシートのページの向きを取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: orientation
  fullName: orientation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'orientation: Excel.PageOrientation | "Portrait" | "Landscape";'
    return:
      type:
      - Excel.PageOrientation | "Portrait" | "Landscape"
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const farmSheet = context.workbook.worksheets.getItem(\"Print\");\n    farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;\n    await context.sync();\n});\n```"
- uid: excel.Excel.PageLayout.paperSize
  summary: >-
    ワークシートの用紙サイズを取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: paperSize
  fullName: paperSize
  langs:
  - typeScript
  type: property
  syntax:
    content: 'paperSize: Excel.PaperType | "Letter" | "LetterSmall" | "Tabloid" | "Ledger" | "Legal" | "Statement" | "Executive" | "A3" | "A4" | "A4Small" | "A5" | "B4" | "B5" | "Folio" | "Quatro" | "Paper10x14" | "Paper11x17" | "Note" | "Envelope9" | "Envelope10" | "Envelope11" | "Envelope12" | "Envelope14" | "Csheet" | "Dsheet" | "Esheet" | "EnvelopeDL" | "EnvelopeC5" | "EnvelopeC3" | "EnvelopeC4" | "EnvelopeC6" | "EnvelopeC65" | "EnvelopeB4" | "EnvelopeB5" | "EnvelopeB6" | "EnvelopeItaly" | "EnvelopeMonarch" | "EnvelopePersonal" | "FanfoldUS" | "FanfoldStdGerman" | "FanfoldLegalGerman";'
    return:
      type:
      - Excel.PaperType | "Letter" | "LetterSmall" | "Tabloid" | "Ledger" | "Legal" | "Statement" | "Executive" | "A3" | "A4" | "A4Small" | "A5" | "B4" | "B5" | "Folio" | "Quatro" | "Paper10x14" | "Paper11x17" | "Note" | "Envelope9" | "Envelope10" | "Envelope11" | "Envelope12" | "Envelope14" | "Csheet" | "Dsheet" | "Esheet" | "EnvelopeDL" | "EnvelopeC5" | "EnvelopeC3" | "EnvelopeC4" | "EnvelopeC6" | "EnvelopeC65" | "EnvelopeB4" | "EnvelopeB5" | "EnvelopeB6" | "EnvelopeItaly" | "EnvelopeMonarch" | "EnvelopePersonal" | "FanfoldUS" | "FanfoldStdGerman" | "FanfoldLegalGerman"
- uid: excel.Excel.PageLayout.printComments
  summary: >-
    ワークシートのコメントを印刷するときに表示するかどうかを取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: printComments
  fullName: printComments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'printComments: Excel.PrintComments | "NoComments" | "EndSheet" | "InPlace";'
    return:
      type:
      - Excel.PrintComments | "NoComments" | "EndSheet" | "InPlace"
- uid: excel.Excel.PageLayout.printErrors
  summary: >-
    ワークシートの印刷エラーオプションを取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: printErrors
  fullName: printErrors
  langs:
  - typeScript
  type: property
  syntax:
    content: 'printErrors: Excel.PrintErrorType | "AsDisplayed" | "Blank" | "Dash" | "NotAvailable";'
    return:
      type:
      - Excel.PrintErrorType | "AsDisplayed" | "Blank" | "Dash" | "NotAvailable"
- uid: excel.Excel.PageLayout.printGridlines
  summary: >-
    ワークシートの印刷のグリッド線フラグを取得または設定します。 このフラグは、グリッド線を印刷するかどうかを指定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: printGridlines
  fullName: printGridlines
  langs:
  - typeScript
  type: property
  syntax:
    content: 'printGridlines: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.PageLayout.printHeadings
  summary: >-
    ワークシートの印刷ヘッダーフラグを取得または設定します。 このフラグは、見出しが印刷されるかどうかを指定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: printHeadings
  fullName: printHeadings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'printHeadings: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.PageLayout.printOrder
  summary: >-
    ワークシートのページ印刷順序オプションを取得または設定します。 印刷されるページ番号の処理に使用する順序を指定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: printOrder
  fullName: printOrder
  langs:
  - typeScript
  type: property
  syntax:
    content: 'printOrder: Excel.PrintOrder | "DownThenOver" | "OverThenDown";'
    return:
      type:
      - Excel.PrintOrder | "DownThenOver" | "OverThenDown"
- uid: excel.Excel.PageLayout.rightMargin
  summary: >-
    印刷時に使用するワークシートの右余白をポイント単位で取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: rightMargin
  fullName: rightMargin
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rightMargin: number;'
    return:
      type:
      - number
- uid: excel.Excel.PageLayout.set
  summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
  remarks: >-
    このメソッドには、次の追加のシグネチャがあります。


    `set(properties: Excel.PageLayout): void`
  isPreview: true
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.PageLayoutUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
      type:
      - Interfaces.PageLayoutUpdateData
    - id: options
      description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.PageLayout.set_1
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
  isPreview: true
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.PageLayout): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.PageLayout
- uid: excel.Excel.PageLayout.setPrintArea
  summary: >-
    ワークシートの印刷範囲を設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: setPrintArea(printArea)
  fullName: setPrintArea(printArea)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setPrintArea(printArea: Range | RangeAreas | string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const farmSheet = context.workbook.worksheets.getItem(\"Print\");\n    farmSheet.pageLayout.setPrintArea(\"A1:D41\");\n    await context.sync();\n});\n```"
    parameters:
    - id: printArea
      description: 印刷するコンテンツの範囲または rangeareas。
      type:
      - Range | RangeAreas | string
- uid: excel.Excel.PageLayout.setPrintMargins
  summary: >-
    ワークシートのページ余白を単位付きに設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: setPrintMargins(unit, marginOptions)
  fullName: setPrintMargins(unit, marginOptions)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setPrintMargins(unit: Excel.PrintMarginUnit, marginOptions: Excel.PageLayoutMarginOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: unit
      description: 指定された余白の測定単位。
      type:
      - excel.Excel.PrintMarginUnit
    - id: marginOptions
      description: 余白の値を設定しても、余白が指定されていない場合、余白は変わりません。
      type:
      - excel.Excel.PageLayoutMarginOptions
- uid: excel.Excel.PageLayout.setPrintMargins_1
  summary: >-
    ワークシートのページ余白を単位付きに設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: setPrintMargins(unitString, marginOptions)
  fullName: setPrintMargins(unitString, marginOptions)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setPrintMargins(unitString: "Points" | "Inches" | "Centimeters", marginOptions: Excel.PageLayoutMarginOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: unitString
      description: 指定された余白の測定単位。
      type:
      - "\"Points\" | \"Inches\" | \"Centimeters\""
    - id: marginOptions
      description: 余白の値を設定しても、余白が指定されていない場合、余白は変わりません。
      type:
      - excel.Excel.PageLayoutMarginOptions
- uid: excel.Excel.PageLayout.setPrintTitleColumns
  summary: >-
    印刷のためにワークシートの各ページの左側で繰り返されるセルを含む列を設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: setPrintTitleColumns(printTitleColumns)
  fullName: setPrintTitleColumns(printTitleColumns)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setPrintTitleColumns(printTitleColumns: Range | string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: printTitleColumns
      description: 各ページの左側に繰り返す列は、列全体が有効になるように指定する必要があります。
      type:
      - Range | string
- uid: excel.Excel.PageLayout.setPrintTitleRows
  summary: >-
    印刷のためにワークシートの各ページの上部で繰り返されるセルを含む行を設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: setPrintTitleRows(printTitleRows)
  fullName: setPrintTitleRows(printTitleRows)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setPrintTitleRows(printTitleRows: Range | string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const farmSheet = context.workbook.worksheets.getItem(\"Print\");\n    farmSheet.pageLayout.setPrintTitleRows(\"$1:$1\");\n    await context.sync();\n});\n```"
    parameters:
    - id: printTitleRows
      description: 各ページの先頭に繰り返す行は、行全体が有効になるようにする必要があります。
      type:
      - Range | string
- uid: excel.Excel.PageLayout.toJSON
  summary: API オブジェクトが`toJSON()`渡さ`JSON.stringify()` <!-- -->れるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。 (`JSON.stringify`<!-- -->つまり、によって渡さ`toJSON`れたオブジェクトのメソッドが呼び出されます)。元の PageLayout オブジェクトは API オブジェクトであるのに対し、 `toJSON`メソッドは、元のオブジェクトから読み込まれ`Excel.Interfaces.PageLayoutData` <!-- -->た子プロパティの浅いコピーを含む、プレーンな JavaScript オブジェクト (として型指定) を返します。
  isPreview: true
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.PageLayoutData;'
    return:
      type:
      - excel.Excel.Interfaces.PageLayoutData
      description: ''
- uid: excel.Excel.PageLayout.topMargin
  summary: >-
    印刷するときに使用するワークシートの上余白をポイント単位で取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: topMargin
  fullName: topMargin
  langs:
  - typeScript
  type: property
  syntax:
    content: 'topMargin: number;'
    return:
      type:
      - number
- uid: excel.Excel.PageLayout.zoom
  summary: >-
    ワークシートの印刷ズームオプションを取得または設定します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: zoom
  fullName: zoom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'zoom: Excel.PageLayoutZoomOptions;'
    return:
      type:
      - excel.Excel.PageLayoutZoomOptions
