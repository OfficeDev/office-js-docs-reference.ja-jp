### YamlMime:UniversalReference
ms.openlocfilehash: e1aeb311af13a575bdc735e6fe2601d9cfe7a3e4
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/13/2019
ms.locfileid: "29975194"
items:
- uid: excel.Excel.StyleCollection
  summary: >-
    すべてのスタイルのコレクションを表します。 警告: コレクションから項目を読み込むときがの既知の問題に StyleCollection の項目の配列。 使用しない`StyleCollection.items` <!-- -->、`load()`メソッド、および`toJSON()`メソッドです。


    \[[API セット: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.StyleCollection
  fullName: Excel.StyleCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.StyleCollection.add
  - excel.Excel.StyleCollection.context
  - excel.Excel.StyleCollection.getItem
  - excel.Excel.StyleCollection.items
  - excel.Excel.StyleCollection.load
  - excel.Excel.StyleCollection.load_1
  - excel.Excel.StyleCollection.load_2
  - excel.Excel.StyleCollection.toJSON
- uid: excel.Excel.StyleCollection.add
  summary: >-
    コレクションに新しいスタイルを追加します。


    \[[API セット: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    let styles = context.workbook.styles;\n\n    // Add a new style to the style collection.\n    // Styles is in the Home tab ribbon.\n    styles.add(\"Diagonal Orientation Style\");\n          \n    let newStyle = styles.getItem(\"Diagonal Orientation Style\");\n    \n    // The \"Diagonal Orientation Style\" properties.\n    newStyle.textOrientation = 38;\n    newStyle.autoIndent = true;\n    newStyle.includeProtection = true;\n    newStyle.shrinkToFit = true;\n    newStyle.locked = false;\n    \n    await context.sync();\n\n    console.log(\"Successfully added a new style with diagonal orientation to the Home tab ribbon.\");\n});\n```"
    parameters:
    - id: name
      description: 追加するスタイルの名前です。
      type:
      - string
- uid: excel.Excel.StyleCollection.context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これは、Office ホスト アプリケーションのプロセスに、アドインのプロセスを接続します。
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.StyleCollection.getItem
  summary: >-
    名前に基づいてスタイルを取得します。


    \[[API セット: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(name)
  fullName: getItem(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(name: string): Excel.Style;'
    return:
      type:
      - excel.Excel.Style
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    let styles = context.workbook.styles;\n\n    // Add a new style to the style collection.\n    // Styles is in the Home tab ribbon.\n    styles.add(\"Diagonal Orientation Style\");\n          \n    let newStyle = styles.getItem(\"Diagonal Orientation Style\");\n    \n    // The \"Diagonal Orientation Style\" properties.\n    newStyle.textOrientation = 38;\n    newStyle.autoIndent = true;\n    newStyle.includeProtection = true;\n    newStyle.shrinkToFit = true;\n    newStyle.locked = false;\n    \n    await context.sync();\n\n    console.log(\"Successfully added a new style with diagonal orientation to the Home tab ribbon.\");\n});\n```"
    parameters:
    - id: name
      description: 取得するスタイルの名前です。
      type:
      - string
- uid: excel.Excel.StyleCollection.items
  summary: '警告: コレクションから項目を読み込むときがの既知の問題に StyleCollection の項目の配列。 使用しない`StyleCollection.items` <!-- -->、`load()`メソッド、および`toJSON()`メソッドです。'
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Style[];'
    return:
      type:
      - Excel.Style[]
- uid: excel.Excel.StyleCollection.load
  summary: '警告: コレクションから項目を読み込むときがの既知の問題に StyleCollection の項目の配列。 使用しない`StyleCollection.items` <!-- -->、`load()`メソッド、および`toJSON()`メソッドです。'
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.StyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.StyleCollection;'
    return:
      type:
      - excel.Excel.StyleCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.StyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.StyleCollection.load_1
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 呼び出す必要があります`context.sync()`プロパティを読み取る前にします。
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.StyleCollection;'
    return:
      type:
      - excel.Excel.StyleCollection
      description: ''
    parameters:
    - id: propertyNames
      description: コンマで区切られた文字列またはロードするにはプロパティを指定する文字列の配列。
      type:
      - string | string[]
- uid: excel.Excel.StyleCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.StyleCollection;'
    return:
      type:
      - excel.Excel.StyleCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.StyleCollection.toJSON
  summary: '警告: コレクションから項目を読み込むときがの既知の問題に StyleCollection の項目の配列。 使用しない`StyleCollection.items` <!-- -->、`load()`メソッド、および`toJSON()`メソッドです。'
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.StyleCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.StyleCollectionData
      description: ''
