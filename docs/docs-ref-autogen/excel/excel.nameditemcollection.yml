### YamlMime:UniversalReference
ms.openlocfilehash: 0d360edd870634b2563db718bea57dd5f9421312
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/13/2019
ms.locfileid: "29975299"
items:
- uid: excel.Excel.NamedItemCollection
  summary: >-
    到達した方法によって、ワークシートまたはブックの一部であるすべての NamedItem オブジェクトのコレクションです。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.NamedItemCollection
  fullName: Excel.NamedItemCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.NamedItemCollection.add
  - excel.Excel.NamedItemCollection.addFormulaLocal
  - excel.Excel.NamedItemCollection.context
  - excel.Excel.NamedItemCollection.getCount
  - excel.Excel.NamedItemCollection.getItem
  - excel.Excel.NamedItemCollection.getItemOrNullObject
  - excel.Excel.NamedItemCollection.items
  - excel.Excel.NamedItemCollection.load
  - excel.Excel.NamedItemCollection.load_1
  - excel.Excel.NamedItemCollection.load_2
  - excel.Excel.NamedItemCollection.toJSON
- uid: excel.Excel.NamedItemCollection.add
  summary: >-
    指定のスコープのコレクションに新しい名前を追加します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(name, reference, comment)
  fullName: add(name, reference, comment)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name: string, reference: Range | string, comment?: string): Excel.NamedItem;'
    return:
      type:
      - excel.Excel.NamedItem
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const headerRange = sheet.getRange(\"A1:D1\");\n\n    sheet.names.add(\"ExpensesHeader\", headerRange);\n    const namedItems = sheet.names.load(\"name, type\");\n\n    await context.sync();\n});\n```"
    parameters:
    - id: name
      description: 名前付きの項目の名前。
      type:
      - string
    - id: reference
      description: 名前が参照する数式または範囲。
      type:
      - Range | string
    - id: comment
      description: 省略可能。 名前付きアイテムに関連付けられたコメント。
      type:
      - string
- uid: excel.Excel.NamedItemCollection.addFormulaLocal
  summary: >-
    ユーザーのロケールを数式に使用して、指定のスコープのコレクションに新しい名前を追加します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addFormulaLocal(name, formula, comment)
  fullName: addFormulaLocal(name, formula, comment)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFormulaLocal(name: string, formula: string, comment?: string): Excel.NamedItem;'
    return:
      type:
      - excel.Excel.NamedItem
      description: ''
    parameters:
    - id: name
      description: 名前付きアイテムの "名前"。
      type:
      - string
    - id: formula
      description: 名前が参照するユーザーのロケールの数式。
      type:
      - string
    - id: comment
      description: 省略可能。 名前付きアイテムに関連付けられたコメント。
      type:
      - string
- uid: excel.Excel.NamedItemCollection.context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これは、Office ホスト アプリケーションのプロセスに、アドインのプロセスを接続します。
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.NamedItemCollection.getCount
  summary: >-
    コレクションに含まれる名前付きアイテムの数を取得します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.NamedItemCollection.getItem
  summary: >-
    名を使用して、NamedItem オブジェクトを取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(name)
  fullName: getItem(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(name: string): Excel.NamedItem;'
    return:
      type:
      - excel.Excel.NamedItem
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = 'Sheet1';\n    var nameditem = ctx.workbook.names.getItem(sheetName);\n    nameditem.load('type');\n    return ctx.sync().then(function() {\n            console.log(nameditem.type);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: Nameditem の名前です。
      type:
      - string
- uid: excel.Excel.NamedItemCollection.getItemOrNullObject
  summary: >-
    名を使用して、NamedItem オブジェクトを取得します。 Nameditem オブジェクトが存在しない場合は、null オブジェクトを返します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(name)
  fullName: getItemOrNullObject(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(name: string): Excel.NamedItem;'
    return:
      type:
      - excel.Excel.NamedItem
      description: ''
    parameters:
    - id: name
      description: Nameditem の名前です。
      type:
      - string
- uid: excel.Excel.NamedItemCollection.items
  summary: このコレクションに読み込まれている子項目を取得します。
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.NamedItem[];'
    return:
      type:
      - Excel.NamedItem[]
- uid: excel.Excel.NamedItemCollection.load
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 "Context.sync()"は、プロパティを読み取る前に呼び出す必要があります。
  remarks: >-
    だけでなく、この署名は、このメソッドは、次の署名をします。


    `load(option?: string | string[]): Excel.NamedItemCollection`-ここで、オプションは、コンマで区切られた文字列またはロードするにはプロパティを指定する文字列の配列です。


    `load(option?: { select?: string; expand?: string; }): Excel.NamedItemCollection`-どこで読み込むには、プロパティを指定するコンマ区切りの文字列は、option.select、options.expand を読み込むナビゲーション プロパティを指定するコンマ区切りの文字列。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.NamedItemCollection`でコレクション型のみ使用できます。 前の署名に似ていますが。 Option.top は、結果に含めることができるコレクション アイテムの最大数を指定します。 Option.skip はスキップされ、その結果に含まれていない項目の数を指定します。 Option.top が指定されている場合、結果セットが指定数のアイテムをスキップした後開始されます。
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.NamedItemCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.NamedItemCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.NamedItemCollection.load_1
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 呼び出す必要があります`context.sync()`プロパティを読み取る前にします。
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var nameditems = ctx.workbook.names;\n    nameditems.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < nameditems.items.length; i++)\n        {\n            console.log(nameditems.items[i].name);\n            console.log(nameditems.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: コンマで区切られた文字列またはロードするにはプロパティを指定する文字列の配列。
      type:
      - string | string[]
- uid: excel.Excel.NamedItemCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.NamedItemCollection.toJSON
  summary: JavaScript を上書き`toJSON()`API オブジェクトに渡すときより有用な出力を提供するためにメソッド`JSON.stringify()` <!-- -->。 (`JSON.stringify`<!-- -->で、さらに、`toJSON`に渡されるオブジェクトのメソッドです)。元の`Excel.NamedItemCollection`オブジェクトは、API のオブジェクト、`toJSON`メソッドは、プレーンな JavaScript オブジェクトを返します (として型指定された`Excel.Interfaces.NamedItemCollectionData` <!-- -->) コレクションのアイテムから読み込まれているプロパティのシャロー コピーを [アイテム] の配列が含まれています。
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.NamedItemCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.NamedItemCollectionData
      description: ''
