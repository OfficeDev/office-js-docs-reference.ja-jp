### YamlMime:UniversalReference
items:
  - uid: excel.Excel.DataValidation
    summary: |-
      <span data-ttu-id="efc38-101">現在の範囲に適用されるデータの入力規則を表します。</span><span class="sxs-lookup"><span data-stu-id="efc38-101">Represents the data validation applied to the current range.</span></span> <span data-ttu-id="efc38-102">データ検証オブジェクトモデルの詳細については、「 [Excel 範囲へのデータ検証の追加](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="efc38-102">To learn more about the data validation object model, read [Add data validation to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span></span><!-- --><span data-ttu-id="efc38-103">.</span><span class="sxs-lookup"><span data-stu-id="efc38-103"></span></span>

      <span data-ttu-id="efc38-104">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-104">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.DataValidation.clear
      - excel.Excel.DataValidation.context
      - excel.Excel.DataValidation.errorAlert
      - excel.Excel.DataValidation.getInvalidCells
      - excel.Excel.DataValidation.getInvalidCellsOrNullObject
      - excel.Excel.DataValidation.ignoreBlanks
      - excel.Excel.DataValidation.load
      - excel.Excel.DataValidation.load_1
      - excel.Excel.DataValidation.load_2
      - excel.Excel.DataValidation.prompt
      - excel.Excel.DataValidation.rule
      - excel.Excel.DataValidation.set
      - excel.Excel.DataValidation.set_1
      - excel.Excel.DataValidation.toJSON
      - excel.Excel.DataValidation.type
      - excel.Excel.DataValidation.valid
  - uid: excel.Excel.DataValidation.clear
    summary: |-
      <span data-ttu-id="efc38-105">現在の範囲からデータの入力規則をクリアします。</span><span class="sxs-lookup"><span data-stu-id="efc38-105">Clears the data validation from the current range.</span></span>

      <span data-ttu-id="efc38-106">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-106">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.DataValidation.context
    summary: <span data-ttu-id="efc38-107">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="efc38-107">The request context associated with the object.</span></span> <span data-ttu-id="efc38-108">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="efc38-108">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.DataValidation.errorAlert
    summary: |-
      <span data-ttu-id="efc38-109">無効なデータが入力された場合のエラー警告。</span><span class="sxs-lookup"><span data-stu-id="efc38-109">Error alert when user enters invalid data.</span></span>

      <span data-ttu-id="efc38-110">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-110">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: Excel.DataValidationErrorAlert;'
      return:
        type:
          - excel.Excel.DataValidationErrorAlert
        description: |-


          #### <a name="examples"></a><span data-ttu-id="efc38-111">例</span><span class="sxs-lookup"><span data-stu-id="efc38-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          });
          ```
  - uid: excel.Excel.DataValidation.getInvalidCells
    summary: |-
      <span data-ttu-id="efc38-112">1 つまたは複数の長方形範囲で構成され、無効なセル値を含む RangeAreas を返します。</span><span class="sxs-lookup"><span data-stu-id="efc38-112">Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values.</span></span> <span data-ttu-id="efc38-113">すべてのセル値が有効な場合、この関数からは ItemNotFound エラーがスローされます。</span><span class="sxs-lookup"><span data-stu-id="efc38-113">If all cell values are valid, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="efc38-114">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getInvalidCells()
    fullName: getInvalidCells()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCells(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel.Excel.DataValidation.getInvalidCellsOrNullObject
    summary: |-
      <span data-ttu-id="efc38-115">1 つまたは複数の長方形範囲で構成され、無効なセル値を含む RangeAreas を返します。</span><span class="sxs-lookup"><span data-stu-id="efc38-115">Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values.</span></span> <span data-ttu-id="efc38-116">すべてのセル値が有効な場合、この関数からは null が返されます。</span><span class="sxs-lookup"><span data-stu-id="efc38-116">If all cell values are valid, this function will return null.</span></span>

      <span data-ttu-id="efc38-117">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-117">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getInvalidCellsOrNullObject()
    fullName: getInvalidCellsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCellsOrNullObject(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel.Excel.DataValidation.ignoreBlanks
    summary: |-
      <span data-ttu-id="efc38-118">空白を無視します。つまり、空白のセルではデータの入力規則が検証されません。既定では true に設定されます。</span><span class="sxs-lookup"><span data-stu-id="efc38-118">Ignore blanks: no data validation will be performed on blank cells, it defaults to true.</span></span>

      <span data-ttu-id="efc38-119">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-119">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.DataValidation.load
    summary: <span data-ttu-id="efc38-120">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="efc38-120">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="efc38-121">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="efc38-121">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="efc38-122">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="efc38-122">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="efc38-123">`load(option?: string | string[]): Excel.DataValidation`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="efc38-123">`load(option?: string | string[]): Excel.DataValidation` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="efc38-124">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="efc38-124">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="efc38-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="efc38-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation` - Only available on collection types.</span></span> <span data-ttu-id="efc38-126">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="efc38-126">It is similar to the preceding signature.</span></span> <span data-ttu-id="efc38-127">Top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="efc38-127">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="efc38-128">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="efc38-128">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="efc38-129">Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="efc38-129">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.DataValidationLoadOptions
  - uid: excel.Excel.DataValidation.load_1
    summary: <span data-ttu-id="efc38-130">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="efc38-130">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="efc38-131">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="efc38-131">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="efc38-132">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="efc38-132">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.DataValidation.load_2
    summary: <span data-ttu-id="efc38-133">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="efc38-133">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="efc38-134">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="efc38-134">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="efc38-135">ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="efc38-135">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.DataValidation.prompt
    summary: |-
      <span data-ttu-id="efc38-136">ユーザーがセルを選択したときにメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="efc38-136">Prompt when users select a cell.</span></span>

      <span data-ttu-id="efc38-137">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-137">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: Excel.DataValidationPrompt;'
      return:
        type:
          - excel.Excel.DataValidationPrompt
        description: |-


          #### <a name="examples"></a><span data-ttu-id="efc38-138">例</span><span class="sxs-lookup"><span data-stu-id="efc38-138">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });
          ```
  - uid: excel.Excel.DataValidation.rule
    summary: |-
      <span data-ttu-id="efc38-139">さまざまな種類のデータ検証条件を含むデータ入力規則。</span><span class="sxs-lookup"><span data-stu-id="efc38-139">Data validation rule that contains different type of data validation criteria.</span></span>

      <span data-ttu-id="efc38-140">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-140">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.DataValidationRule;'
      return:
        type:
          - excel.Excel.DataValidationRule
        description: |-


          #### <a name="examples"></a><span data-ttu-id="efc38-141">例</span><span class="sxs-lookup"><span data-stu-id="efc38-141">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });
          ```
  - uid: excel.Excel.DataValidation.set
    summary: '<span data-ttu-id="efc38-142">一度に1つのオブジェクトの複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="efc38-142">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="efc38-143">適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="efc38-143">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="efc38-144">このメソッドには、次の追加のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="efc38-144">This method has the following additional signature:</span></span>

      `set(properties: Excel.DataValidation): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="efc38-145">メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="efc38-145">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.DataValidationUpdateData
        - id: options
          description: <span data-ttu-id="efc38-146">プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="efc38-146">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.DataValidation.set_1
    summary: '<span data-ttu-id="efc38-147">既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="efc38-147">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.DataValidation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.DataValidation
  - uid: excel.Excel.DataValidation.toJSON
    summary: '<span data-ttu-id="efc38-148">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="efc38-148">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="efc38-149">.</span><span class="sxs-lookup"><span data-stu-id="efc38-149"></span></span> <span data-ttu-id="efc38-150">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="efc38-150"></span></span><!-- --><span data-ttu-id="efc38-151">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の DataValidation オブジェクトは API オブジェクトであるのに対し、 `toJSON`メソッドはプレーンな JavaScript オブジェクトを返します (型は`Excel.Interfaces.DataValidationData`</span><span class="sxs-lookup"><span data-stu-id="efc38-151">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`</span></span><!-- --><span data-ttu-id="efc38-152">) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。</span><span class="sxs-lookup"><span data-stu-id="efc38-152">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.DataValidationData;'
      return:
        type:
          - excel.Excel.Interfaces.DataValidationData
        description: ''
  - uid: excel.Excel.DataValidation.type
    summary: |-
      <span data-ttu-id="efc38-153">データの入力規則の種類。詳細については、Excel.DataValidationType を参照してください。</span><span class="sxs-lookup"><span data-stu-id="efc38-153">Type of the data validation, see Excel.DataValidationType for details.</span></span>

      <span data-ttu-id="efc38-154">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-154">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
      return:
        type:
          - Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
  - uid: excel.Excel.DataValidation.valid
    summary: |-
      <span data-ttu-id="efc38-155">すべてのセルの値がデータの入力規則に従っているかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="efc38-155">Represents if all cell values are valid according to the data validation rules.</span></span> <span data-ttu-id="efc38-156">すべてのセルの値が有効な場合は true、すべてのセルの値が無効な場合は false を返します。</span><span class="sxs-lookup"><span data-stu-id="efc38-156">Returns true if all cell values are valid, or false if all cell values are invalid.</span></span> <span data-ttu-id="efc38-157">範囲内に有効で無効なセル値がある場合は、null を返します。</span><span class="sxs-lookup"><span data-stu-id="efc38-157">Returns null if there are both valid and invalid cell values within the range.</span></span>

      <span data-ttu-id="efc38-158">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="efc38-158">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean