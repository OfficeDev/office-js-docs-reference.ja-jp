### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Workbook:class'
    summary: |-
      Workbook は、ワークシート、テーブル、範囲などの関連するブックオブジェクトを含む最上位レベルのオブジェクトです。ブックオブジェクトモデルの詳細については、「 [Excel JAVASCRIPT API を使用してブックを操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-workbooks)する」を参照してください。<!-- -->.

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.Workbook
    fullName: Excel.Workbook
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Workbook#application:member'
      - 'excel!Excel.Workbook#autoSave:member'
      - 'excel!Excel.Workbook#bindings:member'
      - 'excel!Excel.Workbook#calculationEngineVersion:member'
      - 'excel!Excel.Workbook#chartDataPointTrack:member'
      - 'excel!Excel.Workbook#close:member(1)'
      - 'excel!Excel.Workbook#close:member(2)'
      - 'excel!Excel.Workbook#comments:member'
      - 'excel!Excel.Workbook#context:member'
      - 'excel!Excel.Workbook#customXmlParts:member'
      - 'excel!Excel.Workbook#dataConnections:member'
      - 'excel!Excel.Workbook#functions:member'
      - 'excel!Excel.Workbook#getActiveCell:member(1)'
      - 'excel!Excel.Workbook#getActiveChart:member(1)'
      - 'excel!Excel.Workbook#getActiveChartOrNullObject:member(1)'
      - 'excel!Excel.Workbook#getActiveSlicer:member(1)'
      - 'excel!Excel.Workbook#getActiveSlicerOrNullObject:member(1)'
      - 'excel!Excel.Workbook#getIsActiveCollabSession:member(1)'
      - 'excel!Excel.Workbook#getSelectedRange:member(1)'
      - 'excel!Excel.Workbook#getSelectedRanges:member(1)'
      - 'excel!Excel.Workbook#isDirty:member'
      - 'excel!Excel.Workbook#load:member(1)'
      - 'excel!Excel.Workbook#load:member(2)'
      - 'excel!Excel.Workbook#load:member(3)'
      - 'excel!Excel.Workbook#name:member'
      - 'excel!Excel.Workbook#names:member'
      - 'excel!Excel.Workbook#onAutoSaveSettingChanged:member'
      - 'excel!Excel.Workbook#onSelectionChanged:member'
      - 'excel!Excel.Workbook#pivotTables:member'
      - 'excel!Excel.Workbook#pivotTableStyles:member'
      - 'excel!Excel.Workbook#previouslySaved:member'
      - 'excel!Excel.Workbook#properties:member'
      - 'excel!Excel.Workbook#protection:member'
      - 'excel!Excel.Workbook#readOnly:member'
      - 'excel!Excel.Workbook#save:member(1)'
      - 'excel!Excel.Workbook#save:member(2)'
      - 'excel!Excel.Workbook#set:member(1)'
      - 'excel!Excel.Workbook#set:member(2)'
      - 'excel!Excel.Workbook#settings:member'
      - 'excel!Excel.Workbook#showPivotFieldList:member'
      - 'excel!Excel.Workbook#slicers:member'
      - 'excel!Excel.Workbook#slicerStyles:member'
      - 'excel!Excel.Workbook#styles:member'
      - 'excel!Excel.Workbook#tables:member'
      - 'excel!Excel.Workbook#tableStyles:member'
      - 'excel!Excel.Workbook#timelineStyles:member'
      - 'excel!Excel.Workbook#toJSON:member(1)'
      - 'excel!Excel.Workbook#use1904DateSystem:member'
      - 'excel!Excel.Workbook#usePrecisionAsDisplayed:member'
      - 'excel!Excel.Workbook#worksheets:member'
  - uid: 'excel!Excel.Workbook#application:member'
    summary: |-
      このブックを含む Excel アプリケーションインスタンスを表します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: application
    fullName: application
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly application: Excel.Application;'
      return:
        type:
          - 'excel!Excel.Application:class'
  - uid: 'excel!Excel.Workbook#autoSave:member'
    summary: |-
      ブックが自動保存モードであるかどうかを指定します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: autoSave
    fullName: autoSave
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoSave: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#bindings:member'
    summary: |-
      ブックの一部であるバインドのコレクションを表します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly bindings: Excel.BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:class'
  - uid: 'excel!Excel.Workbook#calculationEngineVersion:member'
    summary: |-
      Excel 計算エンジンのバージョンとして数字を返します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: calculationEngineVersion
    fullName: calculationEngineVersion
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly calculationEngineVersion: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Workbook#chartDataPointTrack:member'
    summary: |-
      関連付けられている実際のデータ ポイントをブックの全グラフが追跡している場合、true となります。 False の場合、グラフはデータポイントのインデックスを追跡します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: chartDataPointTrack
    fullName: chartDataPointTrack
    langs:
      - typeScript
    type: property
    syntax:
      content: 'chartDataPointTrack: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#close:member(1)'
    summary: |-
      現在のブックを閉じます。

      \[[API セット: excelapi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: close(closeBehavior)
    fullName: close(closeBehavior)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(closeBehavior?: Excel.CloseBehavior): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/workbook-save-and-close.yaml
          await Excel.run(async (context) => {
              context.workbook.close(Excel.CloseBehavior.save);
          });
          ```
      parameters:
        - id: closeBehavior
          description: ブックのクローズの動作
          type:
            - 'excel!Excel.CloseBehavior:enum'
  - uid: 'excel!Excel.Workbook#close:member(2)'
    summary: |-
      現在のブックを閉じます。

      \[[API セット: excelapi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: close(closeBehaviorString)
    fullName: close(closeBehaviorString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(closeBehaviorString?: "Save" | "SkipSave"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: closeBehaviorString
          description: ブックのクローズの動作
          type:
            - '"Save" | "SkipSave"'
  - uid: 'excel!Excel.Workbook#comments:member'
    summary: |-
      ブックに関連付けられているコメントの集まりを表します。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: Excel.CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:class'
  - uid: 'excel!Excel.Workbook#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Workbook#customXmlParts:member'
    summary: |-
      このブックに格納されているカスタム XML パーツのコレクションを表します。

      \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customXmlParts: Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
  - uid: 'excel!Excel.Workbook#dataConnections:member'
    summary: |-
      ブック内のすべてのデータ接続を表します。

      \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataConnections
    fullName: dataConnections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataConnections: Excel.DataConnectionCollection;'
      return:
        type:
          - 'excel!Excel.DataConnectionCollection:class'
  - uid: 'excel!Excel.Workbook#functions:member'
    summary: |-
      計算に使用できるワークシート関数のコレクションを表します。

      \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: functions
    fullName: functions
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly functions: Excel.Functions;'
      return:
        type:
          - 'excel!Excel.Functions:class'
  - uid: 'excel!Excel.Workbook#getActiveCell:member(1)'
    summary: |-
      ブックで現在アクティブなセルを取得します。

      \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getActiveCell()
    fullName: getActiveCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/workbook-get-active-cell.yaml
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let activeCell = myWorkbook.getActiveCell();
              activeCell.load("address");

              await context.sync();
              
              console.log("The active cell is " + activeCell.address);
          });
          ```
  - uid: 'excel!Excel.Workbook#getActiveChart:member(1)'
    summary: |-
      ブックで現在アクティブになっているグラフを取得します。 アクティブなグラフがない場合は、 `ItemNotFound` 例外がスローされます。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getActiveChart()
    fullName: getActiveChart()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveChart(): Excel.Chart;'
      return:
        type:
          - 'excel!Excel.Chart:class'
        description: ''
  - uid: 'excel!Excel.Workbook#getActiveChartOrNullObject:member(1)'
    summary: |-
      ブックで現在アクティブになっているグラフを取得します。 アクティブなグラフがない場合は、null オブジェクトが返されます。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getActiveChartOrNullObject()
    fullName: getActiveChartOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveChartOrNullObject(): Excel.Chart;'
      return:
        type:
          - 'excel!Excel.Chart:class'
        description: ''
  - uid: 'excel!Excel.Workbook#getActiveSlicer:member(1)'
    summary: |-
      ブックで現在アクティブになっているスライサーを取得します。 アクティブなスライサーがない場合は、 `ItemNotFound` 例外がスローされます。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getActiveSlicer()
    fullName: getActiveSlicer()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSlicer(): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
  - uid: 'excel!Excel.Workbook#getActiveSlicerOrNullObject:member(1)'
    summary: |-
      ブックで現在アクティブになっているスライサーを取得します。 アクティブになっているスライサーがない場合、null オブジェクトが返されます。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getActiveSlicerOrNullObject()
    fullName: getActiveSlicerOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSlicerOrNullObject(): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
  - uid: 'excel!Excel.Workbook#getIsActiveCollabSession:member(1)'
    summary: |-
      ブックが複数のユーザーによって編集されている場合 (共同編集)、true となります。 ブックの状態が変更されたときと、メソッドの結果に変更が反映されるまでには、多少の時間がかかる場合があるのでご注意ください。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getIsActiveCollabSession()
    fullName: getIsActiveCollabSession()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsActiveCollabSession(): OfficeExtension.ClientResult<boolean>;'
      return:
        type:
          - 'excel!Excel.Workbook#getIsActiveCollabSession~0:complex'
        description: ''
  - uid: 'excel!Excel.Workbook#getSelectedRange:member(1)'
    summary: |-
      ブックから現在選択されている1つのセル範囲を取得します。 複数の範囲が選択されている場合、このメソッドはエラーをスローします。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getSelectedRange()
    fullName: getSelectedRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function (ctx) { 
              var selectedRange = ctx.workbook.getSelectedRange();
              selectedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(selectedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Workbook#getSelectedRanges:member(1)'
    summary: |-
      ブックから現在選択されている 1 つまたは複数の範囲を取得します。 getSelectedRange() の場合と同様に、このメソッドは、選択されているすべての範囲を表す RangeAreas オブジェクトを返します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getSelectedRanges()
    fullName: getSelectedRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRanges(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml
          await Excel.run(async (context) => {

              const selectedRanges = context.workbook.getSelectedRanges();
              selectedRanges.format.fill.color = "lightblue";

              await context.sync();
          })
          ```
  - uid: 'excel!Excel.Workbook#isDirty:member'
    summary: |-
      ブックが最後に保存されてから変更を行ったかどうかを指定します。 変更したブックを保存しない、または保存するかどうかを確認するダイアログボックスを非表示にして閉じる場合は、このプロパティを true に設定しておくことができます。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: isDirty
    fullName: isDirty
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isDirty: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#load:member(1)'
    summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorkbookLoadOptions): Excel.Workbook;'
      return:
        type:
          - 'excel!Excel.Workbook:class'
        description: ''
      parameters:
        - id: options
          description: 読み込むオブジェクトのプロパティを指定するオプションを提供します。
          type:
            - 'excel!Excel.Interfaces.WorkbookLoadOptions:interface'
  - uid: 'excel!Excel.Workbook#load:member(2)'
    summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Workbook;'
      return:
        type:
          - 'excel!Excel.Workbook:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Workbook#load:member(3)'
    summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Workbook;
      return:
        type:
          - 'excel!Excel.Workbook:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`は、読み込むプロパティを指定するコンマで区切られた文字列で、 `propertyNamesAndPaths.expand` 読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Workbook#name:member'
    summary: |-
      ブックの名前を取得します。

      \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Workbook#names:member'
    summary: |-
      ブック スコープの名前付き項目 (名前付き範囲と名前付き定数) のコレクションを表します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Workbook#onAutoSaveSettingChanged:member'
    summary: |-
      ブックで autoSave の設定が変更されると発生します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onAutoSaveSettingChanged
    fullName: onAutoSaveSettingChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onAutoSaveSettingChanged: OfficeExtension.EventHandlers<Excel.WorkbookAutoSaveSettingChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Workbook#onAutoSaveSettingChanged~0:complex'
  - uid: 'excel!Excel.Workbook#onSelectionChanged:member'
    summary: |-
      ドキュメント内で選択が変更されるときに発生します。

      \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.SelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Workbook#onSelectionChanged~0:complex'
  - uid: 'excel!Excel.Workbook#pivotTables:member'
    summary: |-
      ブックに関連付けられているピボットテーブルのコレクションを表します。

      \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Workbook#pivotTableStyles:member'
    summary: |-
      ブックに関連付けられている PivotTableStyle のコレクションを表します。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: pivotTableStyles
    fullName: pivotTableStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTableStyles: Excel.PivotTableStyleCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableStyleCollection:class'
  - uid: 'excel!Excel.Workbook#previouslySaved:member'
    summary: |-
      ブックがローカルに、またはオンラインで保存されたことがあるかどうかを指定します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: previouslySaved
    fullName: previouslySaved
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly previouslySaved: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#properties:member'
    summary: |-
      ブックのプロパティを取得します。

      \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: properties
    fullName: properties
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly properties: Excel.DocumentProperties;'
      return:
        type:
          - 'excel!Excel.DocumentProperties:class'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/26-document/properties.yaml
          await Excel.run(async (context) => {
              let titleValue = "Excel document properties API";
              let subjectValue = "Set and get document properties";
              let keywordsValue = "Set and get operations";
              let commentsValue = "This is an Excel document properties API code sample";
              let categoryValue = "Office Add-ins";
              let managerValue = "John";
              let companyValue = "Microsoft";

              let docProperties = context.workbook.properties;

              // Set the writeable document properties.
              docProperties.title = titleValue;
              docProperties.subject = subjectValue;
              docProperties.keywords = keywordsValue;
              docProperties.comments = commentsValue;
              docProperties.category = categoryValue;
              docProperties.manager = managerValue;
              docProperties.company = companyValue;

              await context.sync();

              console.log("Set the following document properties: title, subject, keywords, comments, category, manager, company.");
          });
          ```
  - uid: 'excel!Excel.Workbook#protection:member'
    summary: |-
      ブックの保護オブジェクトを返します。

      \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorkbookProtection;'
      return:
        type:
          - 'excel!Excel.WorkbookProtection:class'
  - uid: 'excel!Excel.Workbook#readOnly:member'
    summary: |-
      true の場合、ブックが読み取り専用モードで開かれます。

      \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: readOnly
    fullName: readOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly readOnly: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#save:member(1)'
    summary: |-
      現在のブックを保存します。

      \[[API セット: excelapi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: save(saveBehavior)
    fullName: save(saveBehavior)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'save(saveBehavior?: Excel.SaveBehavior): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/workbook-save-and-close.yaml
          await Excel.run(async (context) => {
              context.workbook.save(Excel.SaveBehavior.save);
          });
          ```
      parameters:
        - id: saveBehavior
          description: ブックの保存動作。
          type:
            - 'excel!Excel.SaveBehavior:enum'
  - uid: 'excel!Excel.Workbook#save:member(2)'
    summary: |-
      現在のブックを保存します。

      \[[API セット: excelapi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: save(saveBehaviorString)
    fullName: save(saveBehaviorString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'save(saveBehaviorString?: "Save" | "Prompt"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: saveBehaviorString
          description: ブックの保存動作。
          type:
            - '"Save" | "Prompt"'
  - uid: 'excel!Excel.Workbook#set:member(1)'
    summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
    remarks: |-
      このメソッドには、次の追加のシグネチャがあります。

      `set(properties: Excel.Workbook): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorkbookUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
          type:
            - 'excel!Excel.Interfaces.WorkbookUpdateData:interface'
        - id: options
          description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Workbook#set:member(2)'
    summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Workbook): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Workbook:class'
  - uid: 'excel!Excel.Workbook#settings:member'
    summary: |-
      ブックに関連付けられている Setting のコレクションを表します。

      \[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: settings
    fullName: settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly settings: Excel.SettingCollection;'
      return:
        type:
          - 'excel!Excel.SettingCollection:class'
  - uid: 'excel!Excel.Workbook#showPivotFieldList:member'
    summary: |-
      ピボットテーブルのフィールドリストウィンドウをブックレベルで表示するかどうかを指定します。

      \[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    isPreview: true
    name: showPivotFieldList
    fullName: showPivotFieldList
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showPivotFieldList: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#slicers:member'
    summary: |-
      ブックに関連付けられているスライサーの集まりを表します。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
  - uid: 'excel!Excel.Workbook#slicerStyles:member'
    summary: |-
      ブックに関連付けられている SlicerStyle のコレクションを表します。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: slicerStyles
    fullName: slicerStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicerStyles: Excel.SlicerStyleCollection;'
      return:
        type:
          - 'excel!Excel.SlicerStyleCollection:class'
  - uid: 'excel!Excel.Workbook#styles:member'
    summary: |-
      ブックに関連付けられているスタイルのコレクションを表します。

      \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: styles
    fullName: styles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly styles: Excel.StyleCollection;'
      return:
        type:
          - 'excel!Excel.StyleCollection:class'
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml
          await Excel.run(async (context) => {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          });
          ```
  - uid: 'excel!Excel.Workbook#tables:member'
    summary: |-
      ブックに関連付けられているテーブルのコレクションを表します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Workbook#tableStyles:member'
    summary: |-
      ブックに関連付けられている TableStyle のコレクションを表します。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: tableStyles
    fullName: tableStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tableStyles: Excel.TableStyleCollection;'
      return:
        type:
          - 'excel!Excel.TableStyleCollection:class'
  - uid: 'excel!Excel.Workbook#timelineStyles:member'
    summary: |-
      ブックに関連付けられている TimelineStyle のコレクションを表します。

      \[[API セット: excelapi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: timelineStyles
    fullName: timelineStyles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly timelineStyles: Excel.TimelineStyleCollection;'
      return:
        type:
          - 'excel!Excel.TimelineStyleCollection:class'
  - uid: 'excel!Excel.Workbook#toJSON:member(1)'
    summary: '`toJSON()`API オブジェクトが渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->`toJSON`その後、渡されたオブジェクトのメソッドを呼び出します。元のブックのオブジェクトは API オブジェクトであるのに対し、 `toJSON` メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.WorkbookData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorkbookData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorkbookData:interface'
        description: ''
  - uid: 'excel!Excel.Workbook#use1904DateSystem:member'
    summary: |-
      ブックの日付を 1904 年から計算する場合、true となります。

      \[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    isPreview: true
    name: use1904DateSystem
    fullName: use1904DateSystem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'use1904DateSystem: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#usePrecisionAsDisplayed:member'
    summary: |-
      ブックを表示桁数でのみ計算する場合、true となります。 このプロパティを false から true に切り替えた場合、データは完全に正確に失われます。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: usePrecisionAsDisplayed
    fullName: usePrecisionAsDisplayed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'usePrecisionAsDisplayed: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Workbook#worksheets:member'
    summary: |-
      ブックに関連付けられているワークシートのコレクションを表します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: worksheets
    fullName: worksheets
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheets: Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Application:class'
    name: Excel.Application
  - uid: 'excel!Excel.BindingCollection:class'
    name: Excel.BindingCollection
  - uid: 'excel!Excel.CloseBehavior:enum'
    name: Excel.CloseBehavior
  - uid: 'excel!Excel.CommentCollection:class'
    name: Excel.CommentCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPartCollection:class'
    name: Excel.CustomXmlPartCollection
  - uid: 'excel!Excel.DataConnectionCollection:class'
    name: Excel.DataConnectionCollection
  - uid: 'excel!Excel.Functions:class'
    name: Excel.Functions
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.Chart:class'
    name: Excel.Chart
  - uid: 'excel!Excel.Slicer:class'
    name: Excel.Slicer
  - uid: 'excel!Excel.Workbook#getIsActiveCollabSession~0:complex'
    name: OfficeExtension.ClientResult<boolean>
    fullName: OfficeExtension.ClientResult<boolean>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <boolean>
        fullName: <boolean>
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.Workbook:class'
    name: Excel.Workbook
  - uid: 'excel!Excel.Interfaces.WorkbookLoadOptions:interface'
    name: Excel.Interfaces.WorkbookLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Workbook#onAutoSaveSettingChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorkbookAutoSaveSettingChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorkbookAutoSaveSettingChangedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorkbookAutoSaveSettingChangedEventArgs:interface'
        name: Excel.WorkbookAutoSaveSettingChangedEventArgs
        fullName: Excel.WorkbookAutoSaveSettingChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Workbook#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.SelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.SelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.SelectionChangedEventArgs:interface'
        name: Excel.SelectionChangedEventArgs
        fullName: Excel.SelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.PivotTableStyleCollection:class'
    name: Excel.PivotTableStyleCollection
  - uid: 'excel!Excel.DocumentProperties:class'
    name: Excel.DocumentProperties
  - uid: 'excel!Excel.WorkbookProtection:class'
    name: Excel.WorkbookProtection
  - uid: 'excel!Excel.SaveBehavior:enum'
    name: Excel.SaveBehavior
  - uid: 'excel!Excel.Interfaces.WorkbookUpdateData:interface'
    name: Interfaces.WorkbookUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.SettingCollection:class'
    name: Excel.SettingCollection
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.SlicerStyleCollection:class'
    name: Excel.SlicerStyleCollection
  - uid: 'excel!Excel.StyleCollection:class'
    name: Excel.StyleCollection
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.TableStyleCollection:class'
    name: Excel.TableStyleCollection
  - uid: 'excel!Excel.TimelineStyleCollection:class'
    name: Excel.TimelineStyleCollection
  - uid: 'excel!Excel.Interfaces.WorkbookData:interface'
    name: Excel.Interfaces.WorkbookData
  - uid: 'excel!Excel.WorksheetCollection:class'
    name: Excel.WorksheetCollection