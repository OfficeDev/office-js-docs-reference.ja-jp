### YamlMime:TSType
name: Excel.WorksheetCollection
uid: excel!Excel.WorksheetCollection:class
package: excel!
fullName: Excel.WorksheetCollection
summary: >-
  ブックの一部であるワークシート オブジェクトのコレクションを表します。


  \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.WorksheetCollection#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これにより、アドインのプロセスがホスト アプリケーションのプロセスOfficeに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: items
  uid: excel!Excel.WorksheetCollection#items:member
  package: excel!
  fullName: items
  summary: このコレクション内に読み込まれた子アイテムを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />[]
- name: onActivated
  uid: excel!Excel.WorksheetCollection#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    ブック内のワークシートがアクティブ化されると発生します。


    \[[API セット: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- name: onAdded
  uid: excel!Excel.WorksheetCollection#onAdded:member
  package: excel!
  fullName: onAdded
  summary: >-
    新しいワークシートがブックに追加された場合に発生します。


    \[[API セット: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetAddedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- name: onCalculated
  uid: excel!Excel.WorksheetCollection#onCalculated:member
  package: excel!
  fullName: onCalculated
  summary: >-
    ブック内のワークシートが計算される場合に発生します。


    \[[API セット: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetCalculatedEventArgs:interface" />&gt;
- name: onChanged
  uid: excel!Excel.WorksheetCollection#onChanged:member
  package: excel!
  fullName: onChanged
  summary: >-
    ブックのワークシートが変更されたときに発生します。


    \[[API セット: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetChangedEventArgs:interface" />&gt;
- name: onColumnSorted
  uid: excel!Excel.WorksheetCollection#onColumnSorted:member
  package: excel!
  fullName: onColumnSorted
  summary: >-
    1 つ以上の列を並べ替えたときに発生します。 これは、左から右に並べ替えを実行したときに発生します。


    \[[API セット: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetColumnSortedEventArgs:interface" />&gt;
- name: onDeactivated
  uid: excel!Excel.WorksheetCollection#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    ブック内のワークシートが非アクティブ化された場合に発生します。


    \[[API セット: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- name: onDeleted
  uid: excel!Excel.WorksheetCollection#onDeleted:member
  package: excel!
  fullName: onDeleted
  summary: >-
    ワークシートがブックから削除された場合に発生します。


    \[[API セット: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetDeletedEventArgs:interface" />&gt;
- name: onFiltered
  uid: excel!Excel.WorksheetCollection#onFiltered:member
  package: excel!
  fullName: onFiltered
  summary: >-
    ブック内でワークシートのフィルターが適用されたときに発生します。


    \[[API セット: ExcelApi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetFilteredEventArgs:interface" />&gt;
- name: onFormatChanged
  uid: excel!Excel.WorksheetCollection#onFormatChanged:member
  package: excel!
  fullName: onFormatChanged
  summary: >-
    ブック内のワークシートの形式が変更された場合に発生します。


    \[[API セット: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetFormatChangedEventArgs:interface" />&gt;
- name: onFormulaChanged
  uid: excel!Excel.WorksheetCollection#onFormulaChanged:member
  package: excel!
  fullName: onFormulaChanged
  summary: >-
    このコレクションのワークシートで 1 つ以上の数式が変更された場合に発生します。 このイベントは、数式自体が変更された場合のイベントで、数式の計算に起因するデータ値ではありません。


    \[[API セット: ExcelApi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'readonly onFormulaChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormulaChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetFormulaChangedEventArgs:interface" />&gt;
- name: onRowHiddenChanged
  uid: excel!Excel.WorksheetCollection#onRowHiddenChanged:member
  package: excel!
  fullName: onRowHiddenChanged
  summary: >-
    特定のワークシートで 1 つ以上の行の非表示状態が変更された場合に発生します。


    \[[API セット: ExcelApi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetRowHiddenChangedEventArgs:interface" />&gt;
- name: onRowSorted
  uid: excel!Excel.WorksheetCollection#onRowSorted:member
  package: excel!
  fullName: onRowSorted
  summary: >-
    1 つ以上の行を並べ替えたときに発生します。 これは、上から下に並べ替えを実行したときに発生します。


    \[[API セット: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetRowSortedEventArgs:interface" />&gt;
- name: onSelectionChanged
  uid: excel!Excel.WorksheetCollection#onSelectionChanged:member
  package: excel!
  fullName: onSelectionChanged
  summary: >-
    ワークシートで選択範囲を変更したときに発生します。


    \[[API セット: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetSelectionChangedEventArgs:interface" />&gt;
- name: onSingleClicked
  uid: excel!Excel.WorksheetCollection#onSingleClicked:member
  package: excel!
  fullName: onSingleClicked
  summary: >-
    ワークシート コレクションで左クリック/タップ操作が実行された場合に発生します。 このイベントは、次の場合にクリックしても発生しない: - ユーザーはマウスをドラッグして複数選択します。 - 数式参照でセル引数が選択されている場合、ユーザーはモード内のセルを選択します。


    \[[API セット: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetSingleClickedEventArgs:interface" />&gt;
methods:
- name: add(name)
  uid: excel!Excel.WorksheetCollection#add:member(1)
  package: excel!
  fullName: add(name)
  summary: >-
    新しいワークシートをブックに追加します。 ワークシートは、既存のワークシートの末尾に追加されます。 新しく追加したワークシートをアクティブ化する場合は、そのワークシートを `.activate()` 呼び出します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    parameters:
    - id: name
      description: 省略可能。 追加するワークシートの名前。 指定した場合、名前は一意である必要があります。 指定されていない場合は、Excel が新しいワークシートの名前を決定します。
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  uid: excel!Excel.WorksheetCollection#addFromBase64:member(1)
  package: excel!
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  summary: >-
    あるブックの指定されたワークシートを現在のブックに挿入します。


    *Note**: この API は現在、Windows と Mac のOfficeでのみサポートされています。 そして、それは廃止されました、代わりに `Workbook.insertWorksheetFromBase64` 使用してください。


    \[[API セット: ExcelApi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    parameters:
    - id: base64File
      description: 必須です。 ソース ブック ファイルを表す base64 でエンコードされた文字列。
      type: string
    - id: sheetNamesToInsert
      description: 省略可能。 挿入する個々のワークシートの名前。 既定では、ソース ブックのすべてのワークシートが挿入されます。
      type: string[]
    - id: positionType
      description: 省略可能。 現在のブックのどこに新しいワークシートが挿入されます。 詳細は「`Excel.WorksheetPositionType`」をご覧ください。 既定値は "Start" です。
      type: <xref uid="excel!Excel.WorksheetPositionType:enum" />
    - id: relativeTo
      description: 省略可能。 パラメーターに対して参照されている現在のブック内の `positionType` ワークシート。 既定値は `null` 、およびに基づいて `positionType`<!-- -->をクリックすると、現在のブックの開始または終了位置にワークシートが挿入されます。
      type: <xref uid="excel!Excel.Worksheet:class" /> | string
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string[]&gt;
      description: 新しく挿入された各ワークシートに対応する ID の配列。
- name: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  uid: excel!Excel.WorksheetCollection#addFromBase64:member(2)
  package: excel!
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  summary: >-
    あるブックの指定されたワークシートを現在のブックに挿入します。


    *Note**: この API は現在、Windows と Mac のOfficeでのみサポートされています。 そして、それは廃止されました、代わりに `Workbook.insertWorksheetFromBase64` 使用してください。


    \[[API セット: ExcelApi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    parameters:
    - id: base64File
      description: 必須です。 ソース ブック ファイルを表す base64 でエンコードされた文字列。
      type: string
    - id: sheetNamesToInsert
      description: 省略可能。 挿入する個々のワークシートの名前。 既定では、ソース ブックのすべてのワークシートが挿入されます。
      type: string[]
    - id: positionTypeString
      description: 省略可能。 現在のブックのどこに新しいワークシートが挿入されます。 詳細は「`Excel.WorksheetPositionType`」をご覧ください。 既定値は "Start" です。
      type: "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: 省略可能。 パラメーターに対して参照されている現在のブック内の `positionType` ワークシート。 既定値は `null` 、およびに基づいて `positionType`<!-- -->をクリックすると、現在のブックの開始または終了位置にワークシートが挿入されます。
      type: <xref uid="excel!Excel.Worksheet:class" /> | string
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string[]&gt;
      description: 新しく挿入された各ワークシートに対応する ID の配列。
- name: getActiveWorksheet()
  uid: excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)
  package: excel!
  fullName: getActiveWorksheet()
  summary: >-
    ブックの、現在作業中のワークシートを取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCount(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getCount:member(1)
  package: excel!
  fullName: getCount(visibleOnly)
  summary: >-
    コレクションに含まれるワークシートの数を取得します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 もし `true`<!-- -->、表示されているワークシートのみを考慮し、非表示のワークシートをスキップします。
      type: boolean
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getFirst(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getFirst:member(1)
  package: excel!
  fullName: getFirst(visibleOnly)
  summary: >-
    コレクション内の最初のワークシートを取得します。


    \[[API セット: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 もし `true`<!-- -->、表示されているワークシートのみを考慮し、非表示のワークシートをスキップします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getItem(key)
  uid: excel!Excel.WorksheetCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: >-
    名前または ID を使用して、ワークシート オブジェクトを取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    parameters:
    - id: key
      description: ワークシートの名前または ID。
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getItemOrNullObject(key)
  uid: excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(key)
  summary: >-
    名前または ID を使用して、ワークシート オブジェクトを取得します。 ワークシートが存在しない場合、この関数はプロパティが次の値に設定された `isNullObject` オブジェクトを返します。 `true`<!-- -->. 詳細については [、「*OrNullObject メソッドとプロパティ」を参照してください。](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    parameters:
    - id: key
      description: ワークシートの名前または ID。
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getLast(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getLast:member(1)
  package: excel!
  fullName: getLast(visibleOnly)
  summary: >-
    コレクション内の最後のワークシートを取得します。


    \[[API セット: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 もし `true`<!-- -->、表示されているワークシートのみを考慮し、非表示のワークシートをスキップします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: load(options)
  uid: excel!Excel.WorksheetCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティのオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.WorksheetCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.WorksheetCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.WorksheetCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定するコンマ区切り文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.WorksheetCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.WorksheetCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマ区切りの文字列で、読み込むナビゲーション プロパティを指定するコンマ区切 `propertyNamesAndPaths.expand` りの文字列です。'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.WorksheetCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.WorksheetCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: API オブジェクトを渡す際に、より有用な出力を提供するために `toJSON()` JavaScript メソッドをオーバーライドします。 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->、順番に、渡 `toJSON` されるオブジェクトのメソッドを呼び出します。元のオブジェクトが API オブジェクトであるのに対し、メソッドはプレーンな JavaScript オブジェクト (次のように入力) `Excel.WorksheetCollection` `toJSON` を返します。 `Excel.Interfaces.WorksheetCollectionData`<!-- -->) コレクションのアイテムから読み込まれたプロパティのコピーが浅い "items" 配列を含む。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.WorksheetCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 7b59b9d57f078281e511e3ba1ea56a120fd69e5f
  ms.sourcegitcommit: 7a78c85d4a5378180c50442becb98dd816065c5c
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 03/10/2021
  ms.locfileid: "50607679"
