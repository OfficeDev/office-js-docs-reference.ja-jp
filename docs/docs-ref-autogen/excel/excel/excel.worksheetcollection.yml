### YamlMime:UniversalReference
items:
  - uid: excel.Excel.WorksheetCollection
    summary: |-
      <span data-ttu-id="4f91f-101">ブックの一部であるワークシート オブジェクトのコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>

      <span data-ttu-id="4f91f-102">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.WorksheetCollection
    fullName: Excel.WorksheetCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.WorksheetCollection.add
      - excel.Excel.WorksheetCollection.addFromBase64
      - excel.Excel.WorksheetCollection.addFromBase64_1
      - excel.Excel.WorksheetCollection.context
      - excel.Excel.WorksheetCollection.getActiveWorksheet
      - excel.Excel.WorksheetCollection.getCount
      - excel.Excel.WorksheetCollection.getFirst
      - excel.Excel.WorksheetCollection.getItem
      - excel.Excel.WorksheetCollection.getItemOrNullObject
      - excel.Excel.WorksheetCollection.getLast
      - excel.Excel.WorksheetCollection.items
      - excel.Excel.WorksheetCollection.load
      - excel.Excel.WorksheetCollection.load_1
      - excel.Excel.WorksheetCollection.load_2
      - excel.Excel.WorksheetCollection.onActivated
      - excel.Excel.WorksheetCollection.onAdded
      - excel.Excel.WorksheetCollection.onCalculated
      - excel.Excel.WorksheetCollection.onChanged
      - excel.Excel.WorksheetCollection.onColumnSorted
      - excel.Excel.WorksheetCollection.onDeactivated
      - excel.Excel.WorksheetCollection.onDeleted
      - excel.Excel.WorksheetCollection.onFiltered
      - excel.Excel.WorksheetCollection.onFormatChanged
      - excel.Excel.WorksheetCollection.onRowHiddenChanged
      - excel.Excel.WorksheetCollection.onRowSorted
      - excel.Excel.WorksheetCollection.onSelectionChanged
      - excel.Excel.WorksheetCollection.onSingleClicked
      - excel.Excel.WorksheetCollection.toJSON
  - uid: excel.Excel.WorksheetCollection.add
    summary: |-
      <span data-ttu-id="4f91f-p101">新しいワークシートをブックに追加します。ワークシートは、既存のワークシートの末尾に追加されます。新しく追加したワークシートをアクティブにする場合は、そのワークシートに対して ".activate() を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>

      <span data-ttu-id="4f91f-106">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-107">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: '<span data-ttu-id="4f91f-p102">省略可能。追加するワークシートの名前。指定する場合、名前は一意である必要があります。指定されていない場合は、Excel が新しいワークシートの名前を決定します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>'
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.addFromBase64
    summary: |-
      <span data-ttu-id="4f91f-112">あるブックの指定されたワークシートを現在のブックに挿入します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-112">Inserts the specified worksheets of a workbook into the current workbook.</span></span>

      <span data-ttu-id="4f91f-113">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-113">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    fullName: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<string[]>'
        description: |-
          <span data-ttu-id="4f91f-114">新しく挿入された各ワークシートに対応する id の配列を格納します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-114">An array of ids corresponding to each newly inserted worksheet.</span></span>

          #### <a name="examples"></a><span data-ttu-id="4f91f-115">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-115">Examples</span></span>

          ```javascript
          const myFile = <HTMLInputElement>document.getElementById("file");
          const reader = new FileReader();

          reader.onload = (event) => {
              Excel.run((context) => {
                  // strip off the metadata before the base64-encoded string
                  const startIndex = reader.result.toString().indexOf("base64,");
                  const workbookContents = reader.result.toString().substr(startIndex + 7);

                  const sheets = context.workbook.worksheets;
                  sheets.addFromBase64(
                      workbookContents,
                      null, // get all the worksheets 
                      Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets
                      );
                  return context.sync();
              });
          };

          // read in the file as a data URL so we can parse the base64-encoded string
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64File
          description: <span data-ttu-id="4f91f-116">必須です。</span><span class="sxs-lookup"><span data-stu-id="4f91f-116">Required.</span></span> <span data-ttu-id="4f91f-117">元のブックファイルを表す base64 でエンコードされた文字列。</span><span class="sxs-lookup"><span data-stu-id="4f91f-117">The base64-encoded string representing the source workbook file.</span></span>
          type:
            - string
        - id: sheetNamesToInsert
          description: '<span data-ttu-id="4f91f-118">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-118">Optional.</span></span> <span data-ttu-id="4f91f-119">挿入する個々のワークシートの名前を入力します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-119">The names of individual worksheets to insert.</span></span> <span data-ttu-id="4f91f-120">既定では、元のブックのすべてのワークシートが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-120">By default, all the worksheets from the source workbook are inserted.</span></span>'
          type:
            - 'string[]'
        - id: positionType
          description: <span data-ttu-id="4f91f-121">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-121">Optional.</span></span> <span data-ttu-id="4f91f-122">現在のブックでは、新しいワークシートが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-122">Where in the current workbook the new worksheets will be inserted.</span></span> <span data-ttu-id="4f91f-123">詳細については、「Excel. ワークシートの種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4f91f-123">See Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="4f91f-124">既定値は "Start" です。</span><span class="sxs-lookup"><span data-stu-id="4f91f-124">Default is "Start".</span></span>
          type:
            - excel.Excel.WorksheetPositionType
        - id: relativeTo
          description: '<span data-ttu-id="4f91f-125">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-125">Optional.</span></span> <span data-ttu-id="4f91f-126">PositionType パラメーターに対して参照されている現在のブックのワークシート。</span><span class="sxs-lookup"><span data-stu-id="4f91f-126">The worksheet in the current workbook that is referenced for the positionType parameter.</span></span> <span data-ttu-id="4f91f-127">既定値は null で、positionType に基づいて、現在のブックの先頭または末尾にワークシートを挿入します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-127">Default is null and, based on positionType, it will insert worksheets at the start or end of the current workbook.</span></span>'
          type:
            - Worksheet | string
  - uid: excel.Excel.WorksheetCollection.addFromBase64_1
    summary: |-
      <span data-ttu-id="4f91f-128">あるブックの指定されたワークシートを現在のブックに挿入します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-128">Inserts the specified worksheets of a workbook into the current workbook.</span></span>

      <span data-ttu-id="4f91f-129">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-129">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)'
    fullName: 'addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<string[]>'
        description: <span data-ttu-id="4f91f-130">新しく挿入された各ワークシートに対応する id の配列を格納します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-130">An array of ids corresponding to each newly inserted worksheet.</span></span>
      parameters:
        - id: base64File
          description: <span data-ttu-id="4f91f-131">必須です。</span><span class="sxs-lookup"><span data-stu-id="4f91f-131">Required.</span></span> <span data-ttu-id="4f91f-132">元のブックファイルを表す base64 でエンコードされた文字列。</span><span class="sxs-lookup"><span data-stu-id="4f91f-132">The base64-encoded string representing the source workbook file.</span></span>
          type:
            - string
        - id: sheetNamesToInsert
          description: '<span data-ttu-id="4f91f-133">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-133">Optional.</span></span> <span data-ttu-id="4f91f-134">挿入する個々のワークシートの名前を入力します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-134">The names of individual worksheets to insert.</span></span> <span data-ttu-id="4f91f-135">既定では、元のブックのすべてのワークシートが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-135">By default, all the worksheets from the source workbook are inserted.</span></span>'
          type:
            - 'string[]'
        - id: positionTypeString
          description: <span data-ttu-id="4f91f-136">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-136">Optional.</span></span> <span data-ttu-id="4f91f-137">現在のブックでは、新しいワークシートが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-137">Where in the current workbook the new worksheets will be inserted.</span></span> <span data-ttu-id="4f91f-138">詳細については、「Excel. ワークシートの種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4f91f-138">See Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="4f91f-139">既定値は "Start" です。</span><span class="sxs-lookup"><span data-stu-id="4f91f-139">Default is "Start".</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: '<span data-ttu-id="4f91f-140">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-140">Optional.</span></span> <span data-ttu-id="4f91f-141">PositionType パラメーターに対して参照されている現在のブックのワークシート。</span><span class="sxs-lookup"><span data-stu-id="4f91f-141">The worksheet in the current workbook that is referenced for the positionType parameter.</span></span> <span data-ttu-id="4f91f-142">既定値は null で、positionType に基づいて、現在のブックの先頭または末尾にワークシートを挿入します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-142">Default is null and, based on positionType, it will insert worksheets at the start or end of the current workbook.</span></span>'
          type:
            - Worksheet | string
  - uid: excel.Excel.WorksheetCollection.context
    summary: <span data-ttu-id="4f91f-143">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="4f91f-143">The request context associated with the object.</span></span> <span data-ttu-id="4f91f-144">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-144">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.WorksheetCollection.getActiveWorksheet
    summary: |-
      <span data-ttu-id="4f91f-145">ブックの、現在作業中のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-145">Gets the currently active worksheet in the workbook.</span></span>

      <span data-ttu-id="4f91f-146">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-147">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-147">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.WorksheetCollection.getCount
    summary: |-
      <span data-ttu-id="4f91f-148">コレクションに含まれるワークシートの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-148">Gets the number of worksheets in the collection.</span></span>

      <span data-ttu-id="4f91f-149">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-149">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount(visibleOnly)
    fullName: getCount(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="4f91f-150">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-150">Optional.</span></span> <span data-ttu-id="4f91f-151">True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="4f91f-151">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.getFirst
    summary: |-
      <span data-ttu-id="4f91f-152">コレクション内の最初のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-152">Gets the first worksheet in the collection.</span></span>

      <span data-ttu-id="4f91f-153">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-153">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getFirst(visibleOnly)
    fullName: getFirst(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-154">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-154">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="4f91f-155">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-155">Optional.</span></span> <span data-ttu-id="4f91f-156">True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="4f91f-156">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.getItem
    summary: |-
      <span data-ttu-id="4f91f-157">名前または ID を使用して、ワークシート オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-157">Gets a worksheet object using its Name or ID.</span></span>

      <span data-ttu-id="4f91f-158">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="4f91f-159">ワークシートの名前または ID。</span><span class="sxs-lookup"><span data-stu-id="4f91f-159">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="4f91f-160">名前または ID を使用して、ワークシート オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-160">Gets a worksheet object using its Name or ID.</span></span> <span data-ttu-id="4f91f-161">ワークシートが存在しない場合は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-161">If the worksheet does not exist, will return a null object.</span></span>

      <span data-ttu-id="4f91f-162">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-162">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="4f91f-163">ワークシートの名前または ID。</span><span class="sxs-lookup"><span data-stu-id="4f91f-163">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.getLast
    summary: |-
      <span data-ttu-id="4f91f-164">コレクション内の最後のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-164">Gets the last worksheet in the collection.</span></span>

      <span data-ttu-id="4f91f-165">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-165">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLast(visibleOnly)
    fullName: getLast(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-166">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-166">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="4f91f-167">省略可能。</span><span class="sxs-lookup"><span data-stu-id="4f91f-167">Optional.</span></span> <span data-ttu-id="4f91f-168">True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。</span><span class="sxs-lookup"><span data-stu-id="4f91f-168">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.items
    summary: <span data-ttu-id="4f91f-169">このコレクション内に読み込まれた子アイテムを取得します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-169">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type:
          - 'Excel.Worksheet[]'
  - uid: excel.Excel.WorksheetCollection.load
    summary: <span data-ttu-id="4f91f-170">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-170">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4f91f-171">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="4f91f-171">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="4f91f-172">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="4f91f-172">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="4f91f-173">`load(option?: string | string[]): Excel.WorksheetCollection`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="4f91f-173">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="4f91f-174">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="4f91f-174">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="4f91f-175">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-175">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="4f91f-176">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="4f91f-176">It is similar to the preceding signature.</span></span> <span data-ttu-id="4f91f-177">Top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-177">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="4f91f-178">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-178">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="4f91f-179">Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-179">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.WorksheetCollection.load_1
    summary: <span data-ttu-id="4f91f-180">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-180">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4f91f-181">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="4f91f-181">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-182">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-182">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="4f91f-183">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="4f91f-183">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.WorksheetCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.WorksheetCollection.onActivated
    summary: |-
      <span data-ttu-id="4f91f-184">ブック内のすべてのワークシートがアクティブになったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-184">Occurs when any worksheet in the workbook is activated.</span></span>

      <span data-ttu-id="4f91f-185">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-185">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-186">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-186">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onActivated.add(onActivate);

              await context.sync();
              console.log("A handler has been registered for the OnActivate event.");
          });
          ```
  - uid: excel.Excel.WorksheetCollection.onAdded
    summary: |-
      <span data-ttu-id="4f91f-187">新しいワークシートがブックに追加されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-187">Occurs when a new worksheet is added to the workbook.</span></span>

      <span data-ttu-id="4f91f-188">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-188">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onAdded
    fullName: onAdded
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-189">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-189">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets;
              sheet.onAdded.add(onWorksheetAdd);

              await context.sync();
              console.log("A handler has been registered for the OnAdded event.");
          });
          ```
  - uid: excel.Excel.WorksheetCollection.onCalculated
    summary: |-
      <span data-ttu-id="4f91f-190">ブック内の任意のワークシートが計算されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-190">Occurs when any worksheet in the workbook is calculated.</span></span>

      <span data-ttu-id="4f91f-191">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-191">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onChanged
    summary: |-
      <span data-ttu-id="4f91f-192">ブックのワークシートが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-192">Occurs when any worksheet in the workbook is changed.</span></span>

      <span data-ttu-id="4f91f-193">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-193">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onColumnSorted
    summary: |-
      <span data-ttu-id="4f91f-194">列を並べ替えたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-194">Occurs when sorting on columns.</span></span>

      <span data-ttu-id="4f91f-195">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-195">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onColumnSorted
    fullName: onColumnSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onDeactivated
    summary: |-
      <span data-ttu-id="4f91f-196">ブック内のすべてのワークシートが非アクティブ化されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-196">Occurs when any worksheet in the workbook is deactivated.</span></span>

      <span data-ttu-id="4f91f-197">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-197">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4f91f-198">例</span><span class="sxs-lookup"><span data-stu-id="4f91f-198">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onDeactivated.add(onDeactivate);

              await context.sync();
              console.log("A handler has been registered for the OnDeactivate event.");
          });
          ```
  - uid: excel.Excel.WorksheetCollection.onDeleted
    summary: |-
      <span data-ttu-id="4f91f-199">ブックからワークシートが削除されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-199">Occurs when a worksheet is deleted from the workbook.</span></span>

      <span data-ttu-id="4f91f-200">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-200">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeleted
    fullName: onDeleted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onFiltered
    summary: |-
      <span data-ttu-id="4f91f-201">ブック内でワークシートのフィルターが適用されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-201">Occurs when any worksheet's filter is applied in the workbook.</span></span>

      <span data-ttu-id="4f91f-202">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-202">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onFiltered
    fullName: onFiltered
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
  - uid: excel.Excel.WorksheetCollection.onFormatChanged
    summary: |-
      <span data-ttu-id="4f91f-203">ブック内のワークシートの書式が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-203">Occurs when any worksheet in the workbook has format changed.</span></span>

      <span data-ttu-id="4f91f-204">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-204">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onRowHiddenChanged
    summary: |-
      <span data-ttu-id="4f91f-205">ブック内のすべてのワークシートの行の非表示状態が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-205">Occurs when any worksheet in the workbook has row hidden state changed.</span></span>

      <span data-ttu-id="4f91f-206">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-206">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowHiddenChanged
    fullName: onRowHiddenChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onRowSorted
    summary: |-
      <span data-ttu-id="4f91f-207">行を並べ替えたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-207">Occurs when sorting on rows.</span></span>

      <span data-ttu-id="4f91f-208">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-208">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowSorted
    fullName: onRowSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onSelectionChanged
    summary: |-
      <span data-ttu-id="4f91f-209">ワークシートで選択範囲を変更したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-209">Occurs when the selection changes on any worksheet.</span></span>

      <span data-ttu-id="4f91f-210">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-210">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onSingleClicked
    summary: |-
      <span data-ttu-id="4f91f-211">ワークシートのコレクションで左クリック/タップ操作が行われるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-211">Occurs when left-clicked/tapped operation happens in the worksheet collection.</span></span> <span data-ttu-id="4f91f-212">このイベントは、次の場合にクリックしても発生しません。-ユーザーがマウスをドラッグして複数選択できるようにします。</span><span class="sxs-lookup"><span data-stu-id="4f91f-212">This event will not be fired when clicking in the following cases: - The user drags the mouse for multi-selection.</span></span> <span data-ttu-id="4f91f-213">-数式参照のセルの引数が選択されている場合、ユーザーはモードでセルを選択します。</span><span class="sxs-lookup"><span data-stu-id="4f91f-213">- The user selects a cell in the mode when cell arguments are selected for formula references.</span></span>

      <span data-ttu-id="4f91f-214">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4f91f-214">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onSingleClicked
    fullName: onSingleClicked
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
  - uid: excel.Excel.WorksheetCollection.toJSON
    summary: '<span data-ttu-id="4f91f-215">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="4f91f-215">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="4f91f-216">.</span><span class="sxs-lookup"><span data-stu-id="4f91f-216"></span></span> <span data-ttu-id="4f91f-217">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="4f91f-217"></span></span><!-- --><span data-ttu-id="4f91f-218">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元`Excel.WorksheetCollection`のオブジェクトは API オブジェクトであるのに`toJSON`対し、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.WorksheetCollectionData`</span><span class="sxs-lookup"><span data-stu-id="4f91f-218">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`</span></span><!-- --><span data-ttu-id="4f91f-219">) を使用して、コレクションのアイテムから読み込まれたプロパティの浅いコピーを持つ "items" 配列を含みます。</span><span class="sxs-lookup"><span data-stu-id="4f91f-219">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetCollectionData
        description: ''