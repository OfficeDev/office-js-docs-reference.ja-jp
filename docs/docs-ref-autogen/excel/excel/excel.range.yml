### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: |-
      <span data-ttu-id="e1b27-101">範囲は、セル、行、列、セルのブロックなど、1つまたは複数の隣接するセルのセットを表します。API 全体で範囲を使用する方法の詳細については、「 [Excel JAVASCRIPT api を使用して範囲を操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)する」および「 [excel javascript api を使用して範囲を操作する (詳細)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced) 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="e1b27-102">.</span><span class="sxs-lookup"><span data-stu-id="e1b27-102"></span></span>

      <span data-ttu-id="e1b27-103">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#autoFill:member(2)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#copyFrom:member(2)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getCellProperties:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnProperties:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowProperties:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(2)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.Range#getSpillingToRange:member(1)'
      - 'excel!Excel.Range#getSpillingToRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpillParent:member(1)'
      - 'excel!Excel.Range#getSpillParentOrNullObject:member(1)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#group:member(1)'
      - 'excel!Excel.Range#group:member(2)'
      - 'excel!Excel.Range#hasSpill:member'
      - 'excel!Excel.Range#height:member'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hideGroupDetails:member(1)'
      - 'excel!Excel.Range#hideGroupDetails:member(2)'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#left:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#savedAsArray:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#setCellProperties:member(1)'
      - 'excel!Excel.Range#setColumnProperties:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#setRowProperties:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(2)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#top:member'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#ungroup:member(1)'
      - 'excel!Excel.Range#ungroup:member(2)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#width:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: |-
      <span data-ttu-id="e1b27-104">A1 スタイルの範囲参照を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="e1b27-105">Address 値にはシート参照が含まれます (例: "Sheet1!A1: B4 ")</span><span class="sxs-lookup"><span data-stu-id="e1b27-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="e1b27-106">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-106">Read-only.</span></span>

      <span data-ttu-id="e1b27-107">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: |-
      <span data-ttu-id="e1b27-108">ユーザーの言語で指定された範囲の範囲参照を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="e1b27-109">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-109">Read-only.</span></span>

      <span data-ttu-id="e1b27-110">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-111">指定したオートフィルロジックを使用して、現在の範囲から移動先の範囲に範囲を埋めます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-111">Fills range from the current range to the destination range using the specified AutoFill logic.</span></span> <span data-ttu-id="e1b27-112">変換先の範囲は null にすることも、ソースを水平方向または垂直方向に拡張することもできます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-112">The destination range can be null, or can extend the source either horizontally or vertically.</span></span> <span data-ttu-id="e1b27-113">連続していない範囲はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e1b27-113">Discontiguous ranges are not supported.</span></span> <span data-ttu-id="e1b27-114">詳細については、「[オートフィルおよびフラッシュフィルの使用](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-114">For more information, read [Use AutoFill and Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span></span><!-- --><span data-ttu-id="e1b27-115">.</span><span class="sxs-lookup"><span data-stu-id="e1b27-115"></span></span>

      <span data-ttu-id="e1b27-116">\[[API set: excelapi 1.9、EXCELAPI β (プレビューのみ) (null `destinationRange` )](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-116">\[ [API set: ExcelApi 1.9, ExcelApi BETA (PREVIEW ONLY) for null `destinationRange`<!-- -->](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-117">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-117">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          });
          ```
      parameters:
        - id: destinationRange
          description: '<span data-ttu-id="e1b27-118">オートフィルの対象となるセル範囲を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-118">The destination range to autofill.</span></span> <span data-ttu-id="e1b27-119">引数 destination に null を指定すると、周囲のセル (UI の範囲の塗りつぶしハンドルをダブルクリックしたときの動作) に基づいてデータが入力されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-119">If the destination range is null, data is filled out based on the surrounding cells (which is the behavior when double-clicking the UI’s range fill handle).</span></span>'
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: '<span data-ttu-id="e1b27-120">オートフィルの種類を示します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-120">The type of autofill.</span></span> <span data-ttu-id="e1b27-121">現在の範囲の内容に基づいて、移動先の範囲をどのように塗りつぶすかを指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-121">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="e1b27-122">既定値は "FillDefault" です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-122">Default is "FillDefault".</span></span>'
          type:
            - 'excel!Excel.AutoFillType:enum'
  - uid: 'excel!Excel.Range#autoFill:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-123">指定したオートフィルロジックを使用して、現在の範囲から移動先の範囲に範囲を埋めます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-123">Fills range from the current range to the destination range using the specified AutoFill logic.</span></span> <span data-ttu-id="e1b27-124">変換先の範囲は null にすることも、ソースを水平方向または垂直方向に拡張することもできます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-124">The destination range can be null, or can extend the source either horizontally or vertically.</span></span> <span data-ttu-id="e1b27-125">連続していない範囲はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e1b27-125">Discontiguous ranges are not supported.</span></span> <span data-ttu-id="e1b27-126">詳細については、「[オートフィルおよびフラッシュフィルの使用](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-126">For more information, read [Use AutoFill and Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span></span><!-- --><span data-ttu-id="e1b27-127">.</span><span class="sxs-lookup"><span data-stu-id="e1b27-127"></span></span>

      <span data-ttu-id="e1b27-128">\[[API set: excelapi 1.9、EXCELAPI β (プレビューのみ) (null `destinationRange` )](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-128">\[ [API set: ExcelApi 1.9, ExcelApi BETA (PREVIEW ONLY) for null `destinationRange`<!-- -->](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: '<span data-ttu-id="e1b27-129">オートフィルの対象となるセル範囲を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-129">The destination range to autofill.</span></span> <span data-ttu-id="e1b27-130">引数 destination に null を指定すると、周囲のセル (UI の範囲の塗りつぶしハンドルをダブルクリックしたときの動作) に基づいてデータが入力されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-130">If the destination range is null, data is filled out based on the surrounding cells (which is the behavior when double-clicking the UI’s range fill handle).</span></span>'
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
        - id: autoFillTypeString
          description: '<span data-ttu-id="e1b27-131">オートフィルの種類を示します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-131">The type of autofill.</span></span> <span data-ttu-id="e1b27-132">現在の範囲の内容に基づいて、移動先の範囲をどのように塗りつぶすかを指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-132">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="e1b27-133">既定値は "FillDefault" です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-133">Default is "FillDefault".</span></span>'
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-134">ワークシート上のセルの範囲を計算します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-134">Calculates a range of cells on a worksheet.</span></span>

      <span data-ttu-id="e1b27-135">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-135">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: |-
      <span data-ttu-id="e1b27-136">範囲に含まれるセルの数。</span><span class="sxs-lookup"><span data-stu-id="e1b27-136">Number of cells in the range.</span></span> <span data-ttu-id="e1b27-137">セルの数が 2^31-1 (2,147,483,647) を超えると、この API は -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-137">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="e1b27-138">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-138">Read-only.</span></span>

      <span data-ttu-id="e1b27-139">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-139">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-140">範囲の値、書式、塗りつぶし、罫線などをクリアします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-140">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="e1b27-141">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-141">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-142">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-142">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="e1b27-143">省略可能。</span><span class="sxs-lookup"><span data-stu-id="e1b27-143">Optional.</span></span> <span data-ttu-id="e1b27-144">クリア操作の種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-144">Determines the type of clear action.</span></span> <span data-ttu-id="e1b27-145">詳細については、「Excel. ClearApplyTo」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-145">See Excel.ClearApplyTo for details.</span></span>
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-146">範囲の値、書式、塗りつぶし、罫線などをクリアします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-146">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="e1b27-147">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-147">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="e1b27-148">省略可能。</span><span class="sxs-lookup"><span data-stu-id="e1b27-148">Optional.</span></span> <span data-ttu-id="e1b27-149">クリア操作の種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-149">Determines the type of clear action.</span></span> <span data-ttu-id="e1b27-150">詳細については、「Excel. ClearApplyTo」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-150">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: |-
      <span data-ttu-id="e1b27-151">範囲に含まれる列の合計数を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-151">Represents the total number of columns in the range.</span></span> <span data-ttu-id="e1b27-152">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-152">Read-only.</span></span>

      <span data-ttu-id="e1b27-153">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-153">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: |-
      <span data-ttu-id="e1b27-154">現在の範囲のすべての列が非表示になっているかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-154">Represents if all columns of the current range are hidden.</span></span>

      <span data-ttu-id="e1b27-155">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-155">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: |-
      <span data-ttu-id="e1b27-156">範囲に含まれる最初のセルの列番号を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-156">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="e1b27-157">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-157">Zero-indexed.</span></span> <span data-ttu-id="e1b27-158">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="e1b27-158">Read-only.</span></span>

      <span data-ttu-id="e1b27-159">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-159">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: |-
      <span data-ttu-id="e1b27-160">範囲に交差する ConditionalFormats のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e1b27-160">Collection of ConditionalFormats that intersect the range.</span></span> <span data-ttu-id="e1b27-161">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-161">Read-only.</span></span>

      <span data-ttu-id="e1b27-162">\[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-162">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.Range#context:member'
    summary: <span data-ttu-id="e1b27-163">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="e1b27-163">The request context associated with the object.</span></span> <span data-ttu-id="e1b27-164">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-164">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-165">データ型を含む範囲セルをテキストに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-165">Converts the range cells with datatypes into text.</span></span>

      <span data-ttu-id="e1b27-166">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-166">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-167">ワークシート内で範囲セルをリンク付きデータ型に変換します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-167">Converts the range cells into linked datatype in the worksheet.</span></span>

      <span data-ttu-id="e1b27-168">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-168">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: <span data-ttu-id="e1b27-169">データのクエリに使用されるサービス ID。</span><span class="sxs-lookup"><span data-stu-id="e1b27-169">The Service ID which will be used to query the data.</span></span>
          type:
            - number
        - id: languageCulture
          description: <span data-ttu-id="e1b27-170">サービスを照会する言語カルチャ。</span><span class="sxs-lookup"><span data-stu-id="e1b27-170">Language Culture to query the service for.</span></span>
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-171">ソース範囲または RangeAreas から現在の範囲にセル データまたは書式設定をコピーします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-171">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="e1b27-172">コピー先の範囲は、元の範囲または RangeAreas のサイズと異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-172">The destination range can be a different size than the source range or RangeAreas.</span></span> <span data-ttu-id="e1b27-173">転送先は、ソースよりも小さい場合は自動的に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-173">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="e1b27-174">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-174">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-175">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-175">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="e1b27-176">コピー元の範囲または RangeAreas を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-176">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="e1b27-177">ソース範囲に複数の範囲がある場合は、四角形の範囲から完全な行または列を削除することによって、そのフォームを作成できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-177">When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: <span data-ttu-id="e1b27-178">コピーするセルのデータまたは書式の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-178">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="e1b27-179">既定値は "すべて" です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-179">Default is "All".</span></span>
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: <span data-ttu-id="e1b27-180">True の場合は、ソース範囲の空白セルをスキップします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-180">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="e1b27-181">既定値は false です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-181">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="e1b27-182">True を指定すると、貼り付け先の範囲内のセルが転置されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-182">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="e1b27-183">既定値は false です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-183">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#copyFrom:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-184">ソース範囲または RangeAreas から現在の範囲にセル データまたは書式設定をコピーします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-184">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="e1b27-185">コピー先の範囲は、元の範囲または RangeAreas のサイズと異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-185">The destination range can be a different size than the source range or RangeAreas.</span></span> <span data-ttu-id="e1b27-186">転送先は、ソースよりも小さい場合は自動的に展開されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-186">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="e1b27-187">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-187">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="e1b27-188">コピー元の範囲または RangeAreas を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-188">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="e1b27-189">ソース範囲に複数の範囲がある場合は、四角形の範囲から完全な行または列を削除することによって、そのフォームを作成できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-189">When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: copyTypeString
          description: <span data-ttu-id="e1b27-190">コピーするセルのデータまたは書式の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-190">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="e1b27-191">既定値は "すべて" です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-191">Default is "All".</span></span>
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: <span data-ttu-id="e1b27-192">True の場合は、ソース範囲の空白セルをスキップします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-192">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="e1b27-193">既定値は false です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-193">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="e1b27-194">True を指定すると、貼り付け先の範囲内のセルが転置されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-194">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="e1b27-195">既定値は false です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-195">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: |-
      <span data-ttu-id="e1b27-196">dataValidation オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-196">Returns a data validation object.</span></span>

      <span data-ttu-id="e1b27-197">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-197">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-198">範囲に関連付けられているセルを削除します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-198">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="e1b27-199">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-199">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-200">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-200">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="e1b27-201">セルをシフトする方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-201">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e1b27-202">詳細については、「DeleteShiftDirection」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-202">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-203">範囲に関連付けられているセルを削除します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-203">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="e1b27-204">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-204">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="e1b27-205">セルをシフトする方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-205">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e1b27-206">詳細については、「DeleteShiftDirection」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-206">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-207">指定された条件に基づいて指定された文字列を見つけます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-207">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="e1b27-208">現在の範囲が1つのセルより大きい場合は、検索はその範囲に制限されます。それ以外の場合は、シート全体がそのセルの後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-208">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span>

      <span data-ttu-id="e1b27-209">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-209">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="e1b27-210">検索テキストと条件に一致する値を含む最初のセルを表す Range オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e1b27-210">The Range object representing the first cell that contains a value matching the search text and criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e1b27-211">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-211">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="e1b27-212">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-212">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="e1b27-213">検索の方向、検索をセル全体に一致させる必要があるかどうか、または大文字と小文字を区別するかどうかを含む、追加の検索条件。</span><span class="sxs-lookup"><span data-stu-id="e1b27-213">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-214">指定された条件に基づいて指定された文字列を見つけます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-214">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="e1b27-215">現在の範囲が1つのセルより大きい場合は、検索はその範囲に制限されます。それ以外の場合は、シート全体がそのセルの後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-215">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span> <span data-ttu-id="e1b27-216">一致しない場合、この関数は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-216">If there are no matches, this function will return a null object.</span></span>

      <span data-ttu-id="e1b27-217">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-217">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="e1b27-218">検索条件に一致する範囲を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-218">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e1b27-219">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-219">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="e1b27-220">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-220">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="e1b27-221">検索の方向、検索をセル全体に一致させる必要があるかどうか、または大文字と小文字を区別するかどうかを含む、追加の検索条件。</span><span class="sxs-lookup"><span data-stu-id="e1b27-221">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-222">現在の範囲に対してフラッシュ フィルを実行します。フラッシュ フィルでは、パターンを感知して自動的にデータが設定されるので、範囲は単一列範囲で、かつパターンを検出できるように周囲にデータが存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-222">Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range must be single column range and have data around in order to find pattern.</span></span>

      <span data-ttu-id="e1b27-223">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-223">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: |-
      <span data-ttu-id="e1b27-224">Format オブジェクト (範囲のフォント、塗りつぶし、罫線、配置などのプロパティをカプセル化するオブジェクト) を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-224">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="e1b27-225">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-225">Read-only.</span></span>

      <span data-ttu-id="e1b27-226">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-226">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: |-
      <span data-ttu-id="e1b27-227">A1 スタイル表記の数式を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-227">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="e1b27-228">範囲に数式を設定する場合、引数 value には単一の値 (文字列) または2次元配列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-228">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="e1b27-229">引数に1つの値を指定すると、範囲内のすべてのセルに適用されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-229">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e1b27-230">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-230">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: |-
      <span data-ttu-id="e1b27-231">ユーザーの言語と数値書式ロケールで、A1 スタイル表記の数式を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-231">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="e1b27-232">たとえば、英語の数式 "=SUM(A1, 1.5)" は、ドイツ語では "=SUMME(A1; 1,5)" になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-232">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="e1b27-233">範囲に数式を設定する場合、引数 value には単一の値 (文字列) または2次元配列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-233">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="e1b27-234">引数に1つの値を指定すると、範囲内のすべてのセルに適用されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-234">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e1b27-235">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-235">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: |-
      <span data-ttu-id="e1b27-236">R1C1 スタイル表記の数式を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-236">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="e1b27-237">範囲に数式を設定する場合、引数 value には単一の値 (文字列) または2次元配列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-237">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="e1b27-238">引数に1つの値を指定すると、範囲内のすべてのセルに適用されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-238">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e1b27-239">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-239">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-240">現在の Range オブジェクトと左上のセルが同じで、指定した数の行と列を含む Range オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-240">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>

      <span data-ttu-id="e1b27-241">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-241">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: numRows
          description: <span data-ttu-id="e1b27-242">新しい範囲サイズの行数を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-242">The number of rows of the new range size.</span></span>
          type:
            - number
        - id: numColumns
          description: <span data-ttu-id="e1b27-243">新しい範囲のサイズの列数を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-243">The number of columns of the new range size.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-244">指定した範囲を包含する、最小の Range オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-244">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="e1b27-245">たとえば、"B2:C5" と "D10:E15" の GetBoundingRect は、"B2:E15" になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-245">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="e1b27-246">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-246">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-247">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-247">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="e1b27-248">Range オブジェクト、アドレスまたは範囲名。</span><span class="sxs-lookup"><span data-stu-id="e1b27-248">The range object or address or range name.</span></span>
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-249">行と列の番号に基づいて、1 つのセルを含んだ範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-249">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="e1b27-250">ワークシートのグリッド内に収まるセルは、親の範囲の境界の外側にある場合があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-250">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="e1b27-251">返されるセルは、範囲の左上のセルを基準に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-251">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="e1b27-252">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-252">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-253">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-253">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="e1b27-254">取得するセルの行番号。</span><span class="sxs-lookup"><span data-stu-id="e1b27-254">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="e1b27-255">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-255">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="e1b27-256">取得セルの列番号。</span><span class="sxs-lookup"><span data-stu-id="e1b27-256">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="e1b27-257">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-257">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getCellProperties:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-258">2D 配列を返します。各セルのフォント、塗りつぶし、罫線、配置などのプロパティ データをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-258">Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.</span></span>

      <span data-ttu-id="e1b27-259">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-259">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'excel!Excel.Range#getCellProperties~0:complex'
        description: |-
          <span data-ttu-id="e1b27-260">各項目が対応するセルの要求されたプロパティを表す2次元配列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-260">A 2D array where each item represents the requested properties of the corresponding cell.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e1b27-261">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-261">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: <span data-ttu-id="e1b27-262">読み込むセルのプロパティを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e1b27-262">An object that represents which cell properties to load.</span></span>
          type:
            - 'excel!Excel.CellPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-263">範囲に含まれる列を 1 つ取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-263">Gets a column contained in the range.</span></span>

      <span data-ttu-id="e1b27-264">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-264">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-265">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-265">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="e1b27-266">取得する範囲の列番号。</span><span class="sxs-lookup"><span data-stu-id="e1b27-266">Column number of the range to be retrieved.</span></span> <span data-ttu-id="e1b27-267">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-267">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnProperties:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-268">一次元配列を返します。各列のフォント、塗りつぶし、罫線、配置などのプロパティ データをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-268">Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="e1b27-269">指定された列内の列間で一貫性のないプロパティについては、null が返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-269">For properties that are not consistent across each cell within a given column, null will be returned.</span></span>

      <span data-ttu-id="e1b27-270">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-270">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getColumnProperties~0:complex'
        description: <span data-ttu-id="e1b27-271">各項目が対応する列の要求されたプロパティを表す配列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-271">An array where each item represents the requested properties of the corresponding column.</span></span>
      parameters:
        - id: columnPropertiesLoadOptions
          description: <span data-ttu-id="e1b27-272">読み込む列のプロパティを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e1b27-272">An object that represents which column properties to load.</span></span>
          type:
            - 'excel!Excel.ColumnPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-273">現在の Range オブジェクトの右にある特定の列数を取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-273">Gets a certain number of columns to the right of the current Range object.</span></span>

      <span data-ttu-id="e1b27-274">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-274">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e1b27-p140">省略可能。結果の範囲に含める列の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p140">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-280">現在の Range オブジェクトの左にある特定の列数を取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-280">Gets a certain number of columns to the left of the current Range object.</span></span>

      <span data-ttu-id="e1b27-281">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-281">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e1b27-p141">省略可能。結果の範囲に含める列の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p141">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-287">範囲の列全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4: E11" を表している`getEntireColumn`場合は、"B: E" という列を表す範囲)。</span><span class="sxs-lookup"><span data-stu-id="e1b27-287">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="e1b27-288">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-288">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-289">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-289">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-290">範囲の行全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4: E11" を表している`GetEntireRow`場合は、行 "4:11" を表す範囲になります)。</span><span class="sxs-lookup"><span data-stu-id="e1b27-290">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="e1b27-291">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-291">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-292">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-292">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-293">範囲を base64 でエンコードされた png 画像としてレンダリングします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-293">Renders the range as a base64-encoded png image.</span></span>

      <span data-ttu-id="e1b27-294">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-294">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-295">指定した範囲の長方形の交差を表す範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-295">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="e1b27-296">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-296">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-297">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-297">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="e1b27-298">範囲の交差を判断するために使用される、Range オブジェクトまたは Range アドレス。</span><span class="sxs-lookup"><span data-stu-id="e1b27-298">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-299">指定した範囲の長方形の交差を表す範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-299">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id="e1b27-300">交差部分が見つからない場合は、null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-300">If no intersection is found, will return a null object.</span></span>

      <span data-ttu-id="e1b27-301">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-301">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-302">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-302">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="e1b27-303">範囲の交差を判断するために使用される、Range オブジェクトまたは Range アドレス。</span><span class="sxs-lookup"><span data-stu-id="e1b27-303">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-304">範囲内の最後のセルを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-304">Gets the last cell within the range.</span></span> <span data-ttu-id="e1b27-305">たとえば、"B2:D5" の最後のセルは "D5" になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-305">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="e1b27-306">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-306">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-307">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-307">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-308">範囲内の最後の列を取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-308">Gets the last column within the range.</span></span> <span data-ttu-id="e1b27-309">たとえば、"B2:D5" の最後の列は "D2:D5" になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-309">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="e1b27-310">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-310">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-311">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-311">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-312">範囲内の最後の行を取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-312">Gets the last row within the range.</span></span> <span data-ttu-id="e1b27-313">たとえば、"B2:D5" の最後の行は "B5:D5" になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-313">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="e1b27-314">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-314">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-315">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-315">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-p146">指定した範囲からのオフセットで範囲を表すオブジェクトを取得します。返される範囲のディメンションは、この範囲と一致します。結果の範囲がワークシートのグリッドの境界線の外にはみ出る場合は、エラーがスローされます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p146">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="e1b27-319">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-319">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-320">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-320">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="e1b27-p147">範囲をオフセットする行数 (正、負、または 0)。正の値は下方向へのオフセットです。また、負の値は上方向へのオフセットです。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p147">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="e1b27-p148">範囲をオフセットする列数 (正、負、または 0)。正の値は右方向へのオフセットです。また、負の値は左方向へのオフセットです。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p148">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-325">現在の Range オブジェクトに似た (ただし、右下隅がいくつかの行と列で拡張 (または縮小) されている) Range オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-325">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>

      <span data-ttu-id="e1b27-326">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-326">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="e1b27-p149">現在の範囲を基準にして、右下隅を拡張する行の数です。範囲を拡張するには正の数値、または範囲を縮小するには負の数値を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p149">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="e1b27-329">現在の範囲を基準にして、右下隅を展開する列数を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-329">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="e1b27-330">範囲を拡張するには正の数値、または範囲を縮小するには負の数値を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-330">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-331">範囲に含まれている行を 1 つ取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-331">Gets a row contained in the range.</span></span>

      <span data-ttu-id="e1b27-332">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-332">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-333">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-333">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="e1b27-334">取得する範囲の行番号。</span><span class="sxs-lookup"><span data-stu-id="e1b27-334">Row number of the range to be retrieved.</span></span> <span data-ttu-id="e1b27-335">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-335">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getRowProperties:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-336">一次元配列を返します。各行のフォント、塗りつぶし、罫線、配置などのプロパティ データをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-336">Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="e1b27-337">指定された行内の列間で一貫性のないプロパティについては、null が返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-337">For properties that are not consistent across each cell within a given row, null will be returned.</span></span>

      <span data-ttu-id="e1b27-338">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-338">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getRowProperties~0:complex'
        description: <span data-ttu-id="e1b27-339">各項目が対応する行の要求されたプロパティを表す配列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-339">An array where each item represents the requested properties of the corresponding row.</span></span>
      parameters:
        - id: rowPropertiesLoadOptions
          description: <span data-ttu-id="e1b27-340">読み込む行プロパティを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e1b27-340">An object that represents which row properties to load.</span></span>
          type:
            - 'excel!Excel.RowPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-341">現在の Range オブジェクトの上にある特定の行数を取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-341">Gets a certain number of rows above the current Range object.</span></span>

      <span data-ttu-id="e1b27-342">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-342">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e1b27-p153">省略可能。結果の範囲に含める行の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p153">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-348">現在の Range オブジェクトの下にある特定の行数を取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-348">Gets a certain number of rows below the current Range object.</span></span>

      <span data-ttu-id="e1b27-349">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-349">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e1b27-p154">省略可能。結果の範囲に含める行の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p154">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-355">指定された型と値に一致するすべてのセルを表し、1 つまたは複数の長方形範囲で構成される RangeAreas オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-355">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e1b27-356">特別なセルが見つからない場合は、ItemNotFound エラーがスローされます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-356">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="e1b27-357">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-357">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-358">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-358">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: <span data-ttu-id="e1b27-359">含めるセルの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-359">The type of cells to include.</span></span>
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="e1b27-360">CellType が定数または数式の場合は、この引数を使用して、結果に含めるセルの種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-360">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e1b27-361">これらの値は、組み合わせて複数の型を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-361">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e1b27-362">この引数を省略すると、すべての定数および数式が対象になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-362">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCells:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-363">指定された型と値に一致するすべてのセルを表し、1 つまたは複数の長方形範囲で構成される RangeAreas オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-363">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e1b27-364">特別なセルが見つからない場合は、ItemNotFound エラーがスローされます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-364">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="e1b27-365">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-365">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="e1b27-366">含めるセルの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-366">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="e1b27-367">CellType が定数または数式の場合は、この引数を使用して、結果に含めるセルの種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-367">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e1b27-368">これらの値は、組み合わせて複数の型を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-368">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e1b27-369">この引数を省略すると、すべての定数および数式が対象になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-369">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-370">指定された型と値に一致するすべてのセルを表し、1 つまたは複数の範囲を構成する RangeAreas オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-370">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e1b27-371">特別なセルが見つからない場合は、null オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-371">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="e1b27-372">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-372">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: <span data-ttu-id="e1b27-373">含めるセルの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-373">The type of cells to include.</span></span>
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="e1b27-374">CellType が定数または数式の場合は、この引数を使用して、結果に含めるセルの種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-374">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e1b27-375">これらの値は、組み合わせて複数の型を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-375">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e1b27-376">この引数を省略すると、すべての定数および数式が対象になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-376">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-377">指定された型と値に一致するすべてのセルを表し、1 つまたは複数の範囲を構成する RangeAreas オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-377">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e1b27-378">特別なセルが見つからない場合は、null オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-378">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="e1b27-379">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-379">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="e1b27-380">含めるセルの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-380">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="e1b27-381">CellType が定数または数式の場合は、この引数を使用して、結果に含めるセルの種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-381">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e1b27-382">これらの値は、組み合わせて複数の型を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-382">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e1b27-383">この引数を省略すると、すべての定数および数式が対象になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-383">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpillingToRange:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-384">アンカー セルで呼び出されたとき、スピル範囲を含む範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-384">Gets the range object containing the spill range when called on an anchor cell.</span></span> <span data-ttu-id="e1b27-385">複数のセルを含む範囲に適用される場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-385">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="e1b27-386">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-386">Read-only.</span></span>

      <span data-ttu-id="e1b27-387">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-387">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillingToRange()
    fullName: getSpillingToRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSpillingToRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-388">アンカー セルで呼び出されたとき、スピル範囲を含む範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-388">Gets the range object containing the spill range when called on an anchor cell.</span></span> <span data-ttu-id="e1b27-389">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-389">Read-only.</span></span> <span data-ttu-id="e1b27-390">指定範囲がアンカーセルでない場合、またはスピル範囲が見つからない場合は、null オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-390">If the range is not an anchor cell or spill range can't be found, a null object will be returned.</span></span>

      <span data-ttu-id="e1b27-391">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-391">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillingToRangeOrNullObject()
    fullName: getSpillingToRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSpillParent:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-392">スピルするセルのアンカー セルを含む範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-392">Gets the range object containing the anchor cell for a cell getting spilled into.</span></span> <span data-ttu-id="e1b27-393">複数のセルを含む範囲に適用される場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-393">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="e1b27-394">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-394">Read-only.</span></span>

      <span data-ttu-id="e1b27-395">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-395">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillParent()
    fullName: getSpillParent()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParent(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSpillParentOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-396">スピルするセルのアンカー セルを含む範囲オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-396">Gets the range object containing the anchor cell for a cell getting spilled into.</span></span> <span data-ttu-id="e1b27-397">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-397">Read-only.</span></span> <span data-ttu-id="e1b27-398">スピルセルが指定されていない場合、または複数のセルが指定されている場合は、null オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-398">If it is not a spill cell or more than once cells are give, a null object will be returned.</span></span>

      <span data-ttu-id="e1b27-399">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-399">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillParentOrNullObject()
    fullName: getSpillParentOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParentOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-400">指定された範囲の左上のセルを囲む領域を表す Range オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-400">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="e1b27-401">周囲の領域は、この範囲に相対の空白の行と空白の列の任意の組み合わせで囲まれた範囲です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-401">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>

      <span data-ttu-id="e1b27-402">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-402">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-403">範囲と重なるテーブルの集まりを範囲限定で取得します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-403">Gets a scoped collection of tables that overlap with the range.</span></span>

      <span data-ttu-id="e1b27-404">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-404">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: '<span data-ttu-id="e1b27-405">True の場合は、範囲範囲内に完全に含まれるテーブルのみを返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-405">If true, returns only tables that are fully contained within the range bounds.</span></span> <span data-ttu-id="e1b27-406">既定値は false です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-406">The default value is false.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-p169">指定した範囲オブジェクトのうち使用されている範囲を返します。範囲内に使用済みのセルがない場合、この関数は ItemNotFound エラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p169">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="e1b27-409">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-409">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-410">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-410">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="e1b27-411">値の入っているセルのみを使用セルと見なします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-411">Considers only cells with values as used cells.</span></span> <span data-ttu-id="e1b27-412">\[Api セット: ExcelApi 1.2\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-412">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-p171">指定した範囲オブジェクトのうち使用されている範囲を返します。範囲内に使用済みのセルがない場合、この関数は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p171">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>

      <span data-ttu-id="e1b27-415">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-415">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-416">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-416">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="e1b27-417">値の入っているセルのみを使用セルと見なします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-417">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-418">現在の範囲の表示されている行を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-418">Represents the visible rows of the current range.</span></span>

      <span data-ttu-id="e1b27-419">\[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-419">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:class'
        description: ''
  - uid: 'excel!Excel.Range#group:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-420">アウトラインの列と行をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-420">Groups columns and rows for an outline.</span></span>

      <span data-ttu-id="e1b27-421">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-421">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-422">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-422">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // Group the larger, main level. Note that the outline controls
              // will be on row 10, meaning 4-9 will collapse and expand.
              sheet.getRange("4:9").group(Excel.GroupOption.byRows);

              // Group the smaller, sublevels. Note that the outline controls
              // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
              sheet.getRange("4:5").group(Excel.GroupOption.byRows);
              sheet.getRange("7:8").group(Excel.GroupOption.byRows);
              await context.sync();
          });
          ```
      parameters:
        - id: groupOption
          description: '<span data-ttu-id="e1b27-423">行または列によって範囲をグループ化する方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-423">Specifies how the range can be grouped by rows or columns.</span></span> <span data-ttu-id="e1b27-424">グループ`InvalidArgument`のオプションが範囲の`isEntireRow`または`isEntireColumn`プロパティと異なる場合、エラーがスローされます`range.isEntireRow` (つまり、 `groupOption` true で、"Bycolumns `range.isEntireColumn` " または`groupOption` true で、"bycolumns")。</span><span class="sxs-lookup"><span data-stu-id="e1b27-424">An `InvalidArgument` error is thrown when the group option differs from the range''s `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").</span></span>'
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#group:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-425">アウトラインの列と行をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-425">Groups columns and rows for an outline.</span></span>

      <span data-ttu-id="e1b27-426">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-426">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: group(groupOptionString)
    fullName: group(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: '<span data-ttu-id="e1b27-427">行または列によって範囲をグループ化する方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-427">Specifies how the range can be grouped by rows or columns.</span></span> <span data-ttu-id="e1b27-428">グループ`InvalidArgument`のオプションが範囲の`isEntireRow`または`isEntireColumn`プロパティと異なる場合、エラーがスローされます`range.isEntireRow` (つまり、 `groupOption` true で、"Bycolumns `range.isEntireColumn` " または`groupOption` true で、"bycolumns")。</span><span class="sxs-lookup"><span data-stu-id="e1b27-428">An `InvalidArgument` error is thrown when the group option differs from the range''s `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").</span></span>'
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hasSpill:member'
    summary: |-
      <span data-ttu-id="e1b27-429">すべてのセルにスピル ボーダーがあるかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-429">Represents if all cells have a spill border.</span></span> <span data-ttu-id="e1b27-430">すべてのセルにスピル枠がある場合は true を返し、すべてのセルにスピル境界線がない場合は false を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-430">Returns true if all cells have a spill border, or false if all cells do not have a spill border.</span></span> <span data-ttu-id="e1b27-431">範囲内の罫線を左右に左右しないセルがある場合は、null を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-431">Returns null if there are cells both with and without spill borders within the range.</span></span>

      <span data-ttu-id="e1b27-432">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-432">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hasSpill
    fullName: hasSpill
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hasSpill: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#height:member'
    summary: |-
      <span data-ttu-id="e1b27-433">100% ズームの場合の、範囲の上端から範囲の下端までの距離を、ポイント単位で返します。 </span><span class="sxs-lookup"><span data-stu-id="e1b27-433">Returns the distance in points, for 100% zoom, from top edge of the range to bottom edge of the range.</span></span> <span data-ttu-id="e1b27-434">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-434">Read-only.</span></span>

      <span data-ttu-id="e1b27-435">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-435">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#hidden:member'
    summary: |-
      <span data-ttu-id="e1b27-436">現在の範囲のすべてのセルが非表示になっているかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-436">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id="e1b27-437">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-437">Read-only.</span></span>

      <span data-ttu-id="e1b27-438">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-438">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hideGroupDetails:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-439">行または列グループの詳細を非表示にします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-439">Hide details of the row or column group.</span></span>

      <span data-ttu-id="e1b27-440">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-440">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: <span data-ttu-id="e1b27-441">グループ化された行または列のグループ化の詳細を非表示にするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-441">Specifies whether to hide details of grouped rows or grouped columns.</span></span>
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#hideGroupDetails:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-442">行または列グループの詳細を非表示にします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-442">Hide details of the row or column group.</span></span>

      <span data-ttu-id="e1b27-443">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-443">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hideGroupDetails(groupOptionString)
    fullName: hideGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: <span data-ttu-id="e1b27-444">グループ化された行または列のグループ化の詳細を非表示にするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-444">Specifies whether to hide details of grouped rows or grouped columns.</span></span>
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: |-
      <span data-ttu-id="e1b27-445">現在の範囲のハイパーリンクを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-445">Represents the hyperlink for the current range.</span></span>

      <span data-ttu-id="e1b27-446">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-446">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-447">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-447">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-p177">この範囲を占めるセルまたはセルの範囲をワークシートに挿入し、領域を空けるために他のセルをシフトします。この時点で空き領域に位置する、新しい Range オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p177">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="e1b27-450">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-450">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-451">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-451">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="e1b27-452">セルをシフトする方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-452">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e1b27-453">詳細については、「InsertShiftDirection」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-453">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-p179">この範囲を占めるセルまたはセルの範囲をワークシートに挿入し、領域を空けるために他のセルをシフトします。この時点で空き領域に位置する、新しい Range オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-p179">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="e1b27-456">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-456">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="e1b27-457">セルをシフトする方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-457">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e1b27-458">詳細については、「InsertShiftDirection」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-458">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: |-
      <span data-ttu-id="e1b27-459">現在の範囲が列全体であるかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-459">Represents if the current range is an entire column.</span></span> <span data-ttu-id="e1b27-460">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-460">Read-only.</span></span>

      <span data-ttu-id="e1b27-461">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-461">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: |-
      <span data-ttu-id="e1b27-462">現在の範囲が行全体であるかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-462">Represents if the current range is an entire row.</span></span> <span data-ttu-id="e1b27-463">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-463">Read-only.</span></span>

      <span data-ttu-id="e1b27-464">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-464">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#left:member'
    summary: |-
      <span data-ttu-id="e1b27-465">100% ズームの場合の、ワークシートの左端から範囲の左端までの距離を、ポイント単位で返します。 </span><span class="sxs-lookup"><span data-stu-id="e1b27-465">Returns the distance in points, for 100% zoom, from left edge of the worksheet to left edge of the range.</span></span> <span data-ttu-id="e1b27-466">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-466">Read-only.</span></span>

      <span data-ttu-id="e1b27-467">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-467">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: |-
      <span data-ttu-id="e1b27-468">各セルのデータ型の状態を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-468">Represents the data type state of each cell.</span></span> <span data-ttu-id="e1b27-469">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-469">Read-only.</span></span>

      <span data-ttu-id="e1b27-470">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-470">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: <span data-ttu-id="e1b27-471">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-471">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e1b27-472">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-472">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="e1b27-473">読み込むオブジェクトのプロパティを指定するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-473">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: <span data-ttu-id="e1b27-474">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-474">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e1b27-475">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-475">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-476">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-476">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="e1b27-477">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-477">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: <span data-ttu-id="e1b27-478">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-478">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e1b27-479">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-479">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="e1b27-480">`propertyNamesAndPaths.select`は、読み込むプロパティを指定するコンマで区切られた文字列で`propertyNamesAndPaths.expand` 、読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-480">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-481">範囲内のセルをワークシートの 1 つの領域に結合します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-481">Merge the range cells into one region in the worksheet.</span></span>

      <span data-ttu-id="e1b27-482">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-482">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-483">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-483">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: <span data-ttu-id="e1b27-484">省略可能。</span><span class="sxs-lookup"><span data-stu-id="e1b27-484">Optional.</span></span> <span data-ttu-id="e1b27-485">指定した範囲のセルを行ごとに結合して、行ごとに別のセルを作成する場合は True に設定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-485">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id="e1b27-486">既定値は False です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-486">The default value is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: |-
      <span data-ttu-id="e1b27-487">指定された範囲の Excel の数値書式コードを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-487">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="e1b27-488">数値の表示形式を範囲に設定する場合、引数 value には単一の値 (文字列) または2次元配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-488">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="e1b27-489">引数に1つの値を指定すると、範囲内のすべてのセルに適用されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-489">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e1b27-490">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-490">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: |-
      <span data-ttu-id="e1b27-491">ユーザーの言語設定に基づいて、指定された範囲の Excel の数値書式コードを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-491">Represents Excel's number format code for the given range, based on the language settings of the user.</span></span> <span data-ttu-id="e1b27-492">数値の表示形式を範囲に設定する場合、引数 value には単一の値 (文字列) または2次元配列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-492">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="e1b27-493">引数に1つの値を指定すると、範囲内のすべてのセルに適用されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-493">If the argument is a single value, it will be applied to all cells in the range.</span></span> <span data-ttu-id="e1b27-494">Excel では、プロパティを`numberFormatLocal`取得または設定するときに、言語や書式の強制変換は実行されません。</span><span class="sxs-lookup"><span data-stu-id="e1b27-494">Excel does not perform any language or format coercion when getting or setting the `numberFormatLocal` property.</span></span> <span data-ttu-id="e1b27-495">返されるテキストには、システム設定で指定された言語に基づいてローカルに書式設定された文字列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-495">Any returned text uses the locally-formatted strings based on the language specified in the system settings.</span></span>

      <span data-ttu-id="e1b27-496">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-496">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-497">列によって指定される範囲から重複する値を削除します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-497">Removes duplicate values from the range specified by the columns.</span></span>

      <span data-ttu-id="e1b27-498">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-498">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:class'
        description: |-
          <span data-ttu-id="e1b27-499">削除された行の数と残りの一意の行の数を含む、結果のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e1b27-499">The resulting object that contains the number of rows removed and the number of remaining unique rows.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e1b27-500">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-500">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: <span data-ttu-id="e1b27-501">重複が含まれる可能性がある範囲内の列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-501">The columns inside the range that may contain duplicates.</span></span> <span data-ttu-id="e1b27-502">少なくとも1つの列を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-502">At least one column needs to be specified.</span></span> <span data-ttu-id="e1b27-503">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-503">Zero-indexed.</span></span>
          type:
            - 'number[]'
        - id: includesHeader
          description: <span data-ttu-id="e1b27-504">True の場合は、入力データにヘッダーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e1b27-504">True if the input data contains header.</span></span> <span data-ttu-id="e1b27-505">既定値は false です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-505">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-506">現在の範囲内で、指定された条件に基づき、指定された文字列を検索し、置換します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-506">Finds and replaces the given string based on the criteria specified within the current range.</span></span>

      <span data-ttu-id="e1b27-507">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-507">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: <span data-ttu-id="e1b27-508">実行された置換の数。</span><span class="sxs-lookup"><span data-stu-id="e1b27-508">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="e1b27-509">検索する文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-509">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="e1b27-510">元のと置き換える文字列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-510">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="e1b27-511">置換条件を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-511">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: |-
      <span data-ttu-id="e1b27-512">範囲に含まれる行の合計数を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-512">Returns the total number of rows in the range.</span></span> <span data-ttu-id="e1b27-513">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-513">Read-only.</span></span>

      <span data-ttu-id="e1b27-514">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-514">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: |-
      <span data-ttu-id="e1b27-515">現在の範囲のすべての行が非表示になっているかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-515">Represents if all rows of the current range are hidden.</span></span>

      <span data-ttu-id="e1b27-516">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-516">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: |-
      <span data-ttu-id="e1b27-517">範囲に含まれる最初のセルの行番号を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-517">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="e1b27-518">0 を起点とする番号になります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-518">Zero-indexed.</span></span> <span data-ttu-id="e1b27-519">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-519">Read-only.</span></span>

      <span data-ttu-id="e1b27-520">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-520">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#savedAsArray:member'
    summary: |-
      <span data-ttu-id="e1b27-521">すべてのセルが配列数式として保存されるかどうかを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-521">Represents if ALL the cells would be saved as an array formula.</span></span> <span data-ttu-id="e1b27-522">すべてのセルが配列数式として保存される場合は true を返し、すべてのセルが配列数式として保存されない場合は false を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-522">Returns true if ALL cells would be saved as an array formula, or false if ALL cells would NOT be saved as an array formula.</span></span> <span data-ttu-id="e1b27-523">一部のセルが配列数式として保存される場合は null を返し、それ以外の場合は null を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-523">Returns null if some cells would be saved as an array formula and some would not be.</span></span>

      <span data-ttu-id="e1b27-524">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-524">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: savedAsArray
    fullName: savedAsArray
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly savedAsArray: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-525">Excel UI で指定した範囲を選択します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-525">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="e1b27-526">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-526">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-527">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-527">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: '<span data-ttu-id="e1b27-528">一度に1つのオブジェクトの複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-528">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="e1b27-529">適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-529">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="e1b27-530">このメソッドには、次の追加のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-530">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="e1b27-531">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-531">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="e1b27-532">メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e1b27-532">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: <span data-ttu-id="e1b27-533">プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-533">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: '<span data-ttu-id="e1b27-534">既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-534">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#setCellProperties:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-535">セル プロパティの 2D 配列に基づいて範囲を更新します。フォント、塗りつぶし、罫線、配置などをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-535">Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="e1b27-536">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-536">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-537">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-537">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Built-in style names are listed in the `BuiltInStyle` enum.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: <span data-ttu-id="e1b27-538">各セルに設定するプロパティを表す2D 配列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-538">A 2D array that represents which properties to set in each cell.</span></span>
          type:
            - 'excel!Excel.Range#setCellProperties~0:complex'
  - uid: 'excel!Excel.Range#setColumnProperties:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-539">列プロパティの一次元配列に基づいて範囲を更新します。フォント、塗りつぶし、罫線、配置などをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-539">Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="e1b27-540">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-540">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: <span data-ttu-id="e1b27-541">各列に設定するプロパティを表す配列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-541">An array that represents which properties to set in each column.</span></span>
          type:
            - 'excel!Excel.Range#setColumnProperties~0:complex'
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-542">次の再計算が発生したときに再計算する範囲を設定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-542">Set a range to be recalculated when the next recalculation occurs.</span></span>

      <span data-ttu-id="e1b27-543">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-543">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setRowProperties:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-544">行プロパティの一次元配列に基づいて範囲を更新します。フォント、塗りつぶし、罫線、配置などをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-544">Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="e1b27-545">\[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-545">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: <span data-ttu-id="e1b27-546">各行に設定するプロパティを表す配列。</span><span class="sxs-lookup"><span data-stu-id="e1b27-546">An array that represents which properties to set in each row.</span></span>
          type:
            - 'excel!Excel.Range#setRowProperties~0:complex'
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-547">アクティブ セルに多数の値が含まれる場合、そのセルのカードを表示します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-547">Displays the card for an active cell if it has rich value content.</span></span>

      <span data-ttu-id="e1b27-548">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-548">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showGroupDetails:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-549">行または列グループの詳細を表示します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-549">Show details of the row or column group.</span></span>

      <span data-ttu-id="e1b27-550">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-550">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: <span data-ttu-id="e1b27-551">グループ化された行またはグループ化された列の詳細を表示するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-551">Specifies whether to show details of grouped rows or grouped columns.</span></span>
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#showGroupDetails:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-552">行または列グループの詳細を表示します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-552">Show details of the row or column group.</span></span>

      <span data-ttu-id="e1b27-553">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-553">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: showGroupDetails(groupOptionString)
    fullName: showGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: <span data-ttu-id="e1b27-554">グループ化された行またはグループ化された列の詳細を表示するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-554">Specifies whether to show details of grouped rows or grouped columns.</span></span>
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#sort:member'
    summary: |-
      <span data-ttu-id="e1b27-555">現在の範囲について、範囲の並べ替えを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-555">Represents the range sort of the current range.</span></span> <span data-ttu-id="e1b27-556">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="e1b27-556">Read-only.</span></span>

      <span data-ttu-id="e1b27-557">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-557">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-558">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-558">Examples</span></span>

          ```typescript
          async function sortTopToBottom(criteria: string) {
              await Excel.run(async (context) => {
                  const sheet = context.workbook.worksheets.getActiveWorksheet();
                  const range = sheet.getRange("A1:E5");

                  // Find the column header that provides the sort criteria.
                  const header = range.find(criteria, {});
                  header.load("columnIndex");
                  await context.sync();

                  range.sort.apply(
                      [
                          {
                              key: header.columnIndex,
                              sortOn: Excel.SortOn.value
                          }
                      ],
                      false /*matchCase*/,
                      true /*hasHeaders*/,
                      Excel.SortOrientation.rows
                  );
                  await context.sync();
              });
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: |-
      <span data-ttu-id="e1b27-559">現在の範囲のスタイルを表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-559">Represents the style of the current range.</span></span> <span data-ttu-id="e1b27-560">セルのスタイルに不整合がある場合は、null が返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-560">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="e1b27-561">ユーザー設定のスタイルの場合は、スタイル名が返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-561">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="e1b27-562">組み込みのスタイルの場合、BuiltInStyle 列挙内の値を表す文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-562">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>

      <span data-ttu-id="e1b27-563">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-563">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-564">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-564">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: |-
      <span data-ttu-id="e1b27-565">指定した範囲のテキスト値。</span><span class="sxs-lookup"><span data-stu-id="e1b27-565">Text values of the specified range.</span></span> <span data-ttu-id="e1b27-566">テキスト値は、セルの幅には依存しません。</span><span class="sxs-lookup"><span data-stu-id="e1b27-566">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="e1b27-567">Excel \# UI で行われた符号置換は、API によって返されるテキスト値には影響しません。</span><span class="sxs-lookup"><span data-stu-id="e1b27-567">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="e1b27-568">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-568">Read-only.</span></span>

      <span data-ttu-id="e1b27-569">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-569">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: '<span data-ttu-id="e1b27-570">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="e1b27-570">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="e1b27-571">.</span><span class="sxs-lookup"><span data-stu-id="e1b27-571"></span></span> <span data-ttu-id="e1b27-572">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="e1b27-572"></span></span><!-- --><span data-ttu-id="e1b27-573">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の Excel Range オブジェクトは API オブジェクトであるのに対し`toJSON` 、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="e1b27-573">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="e1b27-574">) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-574">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#top:member'
    summary: |-
      <span data-ttu-id="e1b27-575">100% ズームの場合の、ワークシートの上端から範囲の上端までの距離を、ポイント単位で返します。 </span><span class="sxs-lookup"><span data-stu-id="e1b27-575">Returns the distance in points, for 100% zoom, from top edge of the worksheet to top edge of the range.</span></span> <span data-ttu-id="e1b27-576">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-576">Read-only.</span></span>

      <span data-ttu-id="e1b27-577">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-577">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: '<span data-ttu-id="e1b27-578">ドキュメントの環境変更に基づいて自動的に調整する目的でオブジェクトを追跡します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-578">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="e1b27-579">この呼び出しは、の省略形です。`context.trackedObjects.add(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="e1b27-579">This call is a shorthand for `context.trackedObjects.add(thisObject)`</span></span><!-- --><span data-ttu-id="e1b27-580">.</span><span class="sxs-lookup"><span data-stu-id="e1b27-580"></span></span> <span data-ttu-id="e1b27-581">呼び出し間で`.sync`このオブジェクトを使用していて、"..." バッチの順次実行の外側で、プロパティの設定時またはオブジェクトのメソッドの呼び出し時に "InvalidObjectPath" エラーが発生する場合は、オブジェクトを追跡対象オブジェクトに追加する必要があります。オブジェクトが最初に作成されたときのコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e1b27-581">If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#ungroup:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-582">アウトラインの列と行のグループ化を解除します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-582">Ungroups columns and rows for an outline.</span></span>

      <span data-ttu-id="e1b27-583">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-583">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-584">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-584">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // This removes two levels of groups from the "A1-R10" range.
              // Any groups at the same level on the same dimension will be removed by a single call.
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              await context.sync();
          });
          ```
      parameters:
        - id: groupOption
          description: <span data-ttu-id="e1b27-585">行または列によって範囲をグループ解除する方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-585">Specifies how the range can be ungrouped by rows or columns.</span></span>
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#ungroup:member(2)'
    summary: |-
      <span data-ttu-id="e1b27-586">アウトラインの列と行のグループ化を解除します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-586">Ungroups columns and rows for an outline.</span></span>

      <span data-ttu-id="e1b27-587">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-587">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: ungroup(groupOptionString)
    fullName: ungroup(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: <span data-ttu-id="e1b27-588">行または列によって範囲をグループ解除する方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-588">Specifies how the range can be ungrouped by rows or columns.</span></span>
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: |-
      <span data-ttu-id="e1b27-589">範囲内のセルを結合解除して別々のセルにします。</span><span class="sxs-lookup"><span data-stu-id="e1b27-589">Unmerge the range cells into separate cells.</span></span>

      <span data-ttu-id="e1b27-590">\[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-590">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-591">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-591">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: '<span data-ttu-id="e1b27-592">前に追跡されていた場合、このオブジェクトに関連付けられているメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-592">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="e1b27-593">この呼び出しは、の短縮形です。`context.trackedObjects.remove(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="e1b27-593">This call is shorthand for `context.trackedObjects.remove(thisObject)`</span></span><!-- --><span data-ttu-id="e1b27-594">.</span><span class="sxs-lookup"><span data-stu-id="e1b27-594"></span></span> <span data-ttu-id="e1b27-595">追跡対象オブジェクトが多いとホスト アプリケーションの動作が遅くなります。追加したオブジェクトが不要になったら、必ずそれを解放してください。</span><span class="sxs-lookup"><span data-stu-id="e1b27-595">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="e1b27-596">メモリリリースを有効に`context.sync()`するには、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-596">You will need to call `context.sync()` before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e1b27-597">例</span><span class="sxs-lookup"><span data-stu-id="e1b27-597">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: |-
      <span data-ttu-id="e1b27-598">指定した範囲の Raw 値を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-598">Represents the raw values of the specified range.</span></span> <span data-ttu-id="e1b27-599">返されるデータの型は、文字列、数値、ブール値のいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="e1b27-599">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="e1b27-600">エラーが含まれているセルは、エラー文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-600">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="e1b27-601">範囲に値を設定する場合、引数 value には単一の値 (文字列、数値、またはブール値)、または2次元配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-601">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="e1b27-602">引数に1つの値を指定すると、範囲内のすべてのセルに適用されます。</span><span class="sxs-lookup"><span data-stu-id="e1b27-602">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e1b27-603">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-603">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: |-
      <span data-ttu-id="e1b27-604">各セルのデータの種類を表します。</span><span class="sxs-lookup"><span data-stu-id="e1b27-604">Represents the type of data of each cell.</span></span> <span data-ttu-id="e1b27-605">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-605">Read-only.</span></span>

      <span data-ttu-id="e1b27-606">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-606">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#width:member'
    summary: |-
      <span data-ttu-id="e1b27-607">100% ズームの場合の、範囲の左端から範囲の右端までの距離を、ポイント単位で返します。 </span><span class="sxs-lookup"><span data-stu-id="e1b27-607">Returns the distance in points, for 100% zoom, from left edge of the range to right edge of the range.</span></span> <span data-ttu-id="e1b27-608">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-608">Read-only.</span></span>

      <span data-ttu-id="e1b27-609">\[[API セット: EXCELAPI BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-609">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: |-
      <span data-ttu-id="e1b27-610">現在の範囲を含んでいるワークシート。</span><span class="sxs-lookup"><span data-stu-id="e1b27-610">The worksheet containing the current range.</span></span> <span data-ttu-id="e1b27-611">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e1b27-611">Read-only.</span></span>

      <span data-ttu-id="e1b27-612">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e1b27-612">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.AutoFillType:enum'
    name: Excel.AutoFillType
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getCellProperties~0:complex'
    name: 'OfficeExtension.ClientResult<CellProperties[][]>'
    fullName: 'OfficeExtension.ClientResult<Excel.CellProperties[][]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.CellProperties:interface'
        name: CellProperties
        fullName: Excel.CellProperties
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'excel!Excel.CellPropertiesLoadOptions:interface'
    name: CellPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getColumnProperties~0:complex'
    name: 'OfficeExtension.ClientResult<ColumnProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.ColumnProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.ColumnProperties:interface'
        name: ColumnProperties
        fullName: Excel.ColumnProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.ColumnPropertiesLoadOptions:interface'
    name: ColumnPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getRowProperties~0:complex'
    name: 'OfficeExtension.ClientResult<RowProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.RowProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.RowProperties:interface'
        name: RowProperties
        fullName: Excel.RowProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.RowPropertiesLoadOptions:interface'
    name: RowPropertiesLoadOptions
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:class'
    name: Excel.RangeView
  - uid: 'excel!Excel.GroupOption:enum'
    name: Excel.GroupOption
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: Excel.RangeHyperlink
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'Excel.LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: Excel.LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.RemoveDuplicatesResult:class'
    name: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Range#setCellProperties~0:complex'
    name: 'SettableCellProperties[][]'
    fullName: 'Excel.SettableCellProperties[][]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableCellProperties:interface'
        name: SettableCellProperties
        fullName: Excel.SettableCellProperties
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#setColumnProperties~0:complex'
    name: 'SettableColumnProperties[]'
    fullName: 'Excel.SettableColumnProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableColumnProperties:interface'
        name: SettableColumnProperties
        fullName: Excel.SettableColumnProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.Range#setRowProperties~0:complex'
    name: 'SettableRowProperties[]'
    fullName: 'Excel.SettableRowProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableRowProperties:interface'
        name: SettableRowProperties
        fullName: Excel.SettableRowProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.RangeSort:class'
    name: Excel.RangeSort
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet