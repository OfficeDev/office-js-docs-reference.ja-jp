### YamlMime:UniversalReference
ms.openlocfilehash: c827b346f429c90b6637cbaefe26dfa1c8677bb0
ms.sourcegitcommit: fd03ef72d6a546b0e4dbe0cc9e75d2a7cf9341a1
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/27/2019
ms.locfileid: "30303117"
items:
- uid: excel.Excel.WorksheetCollection
  summary: >-
    ブックの一部であるワークシート オブジェクトのコレクションを表します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.WorksheetCollection
  fullName: Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetCollection.add
  - excel.Excel.WorksheetCollection.addFromBase64
  - excel.Excel.WorksheetCollection.addFromBase64_1
  - excel.Excel.WorksheetCollection.context
  - excel.Excel.WorksheetCollection.getActiveWorksheet
  - excel.Excel.WorksheetCollection.getCount
  - excel.Excel.WorksheetCollection.getFirst
  - excel.Excel.WorksheetCollection.getItem
  - excel.Excel.WorksheetCollection.getItemOrNullObject
  - excel.Excel.WorksheetCollection.getLast
  - excel.Excel.WorksheetCollection.items
  - excel.Excel.WorksheetCollection.load
  - excel.Excel.WorksheetCollection.load_1
  - excel.Excel.WorksheetCollection.load_2
  - excel.Excel.WorksheetCollection.onActivated
  - excel.Excel.WorksheetCollection.onAdded
  - excel.Excel.WorksheetCollection.onCalculated
  - excel.Excel.WorksheetCollection.onChanged
  - excel.Excel.WorksheetCollection.onDeactivated
  - excel.Excel.WorksheetCollection.onDeleted
  - excel.Excel.WorksheetCollection.onFiltered
  - excel.Excel.WorksheetCollection.onFormatChanged
  - excel.Excel.WorksheetCollection.onSelectionChanged
  - excel.Excel.WorksheetCollection.toJSON
- uid: excel.Excel.WorksheetCollection.add
  summary: >-
    新しいワークシートをブックに追加します。ワークシートは、既存のワークシートの末尾に追加されます。新しく追加したワークシートをアクティブにする場合は、そのワークシートに対して ".activate() を呼び出します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: 省略可能。追加するワークシートの名前。指定する場合、名前は一意である必要があります。指定されていない場合は、Excel が新しいワークシートの名前を決定します。
      type:
      - string
- uid: excel.Excel.WorksheetCollection.addFromBase64
  summary: >-
    ブックの指定されたワークシートを現在のブックに挿入します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: "各アイテムが新しい挿入ワークシートの Id を表す配列。\n#### <a name=\"examples\"></a>例\n\n```javascript\nconst myFile = <HTMLInputElement>document.getElementById(\"file\");\nconst reader = new FileReader();\n\nreader.onload = (event) => {\n    Excel.run((context) => {\n        // strip off the metadata before the base64-encoded string\n        const startIndex = (<string>(<FileReader>event.target).result).indexOf(\"base64,\");\n        const workbookContents = (<string>(<FileReader>event.target).result).substr(startIndex + 7);\n\n        const sheets = context.workbook.worksheets;\n        sheets.addFromBase64(\n            workbookContents,\n            null, // get all the worksheets \n            Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets\n            );\n        return context.sync();\n    });\n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
    parameters:
    - id: base64File
      description: 必須です。 元のブックを表す Base64 文字列。
      type:
      - string
    - id: sheetNamesToInsert
      description: オプション。 挿入する speified されたワークシート名。 既定では、元のブックのすべてのワークシートが挿入されます。
      type:
      - string[]
    - id: positionType
      description: オプション。 位置の種類を挿入します。詳細については、「Excel. ワークシートの種類」を参照してください。 既定値は "Start" です。
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: オプション。 現在のブックの参照元の worksheet オブジェクトまたはワークシートの名前または id。 既定値は null で、現在のブックの先頭または末尾にワークシートを挿入します。
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.addFromBase64_1
  summary: >-
    ブックの指定されたワークシートを現在のブックに挿入します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: 各アイテムが新しい挿入ワークシートの Id を表す配列。
    parameters:
    - id: base64File
      description: 必須です。 元のブックを表す Base64 文字列。
      type:
      - string
    - id: sheetNamesToInsert
      description: オプション。 挿入する speified されたワークシート名。 既定では、元のブックのすべてのワークシートが挿入されます。
      type:
      - string[]
    - id: positionTypeString
      description: オプション。 位置の種類を挿入します。詳細については、「Excel. ワークシートの種類」を参照してください。 既定値は "Start" です。
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: オプション。 現在のブックの参照元の worksheet オブジェクトまたはワークシートの名前または id。 既定値は null で、現在のブックの先頭または末尾にワークシートを挿入します。
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.context
  summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    ブックの、現在作業中のワークシートを取得します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getActiveWorksheet()
  fullName: getActiveWorksheet()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.WorksheetCollection.getCount
  summary: >-
    コレクションに含まれるワークシートの数を取得します。


    \[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount(visibleOnly)
  fullName: getCount(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: 省略可能。true の場合、非表示のワークシートをスキップし、表示可能なワークシートのみを考慮します。
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getFirst
  summary: >-
    コレクション内の最初のワークシートを取得します。


    \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getFirst(visibleOnly)
  fullName: getFirst(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: 省略可能。true の場合、非表示のワークシートをスキップし、表示可能なワークシートのみを考慮します。
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getItem
  summary: >-
    名前または ID を使用して、ワークシート オブジェクトを取得します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: ワークシートの名前または ID。
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    名前または ID に基づいて worksheet オブジェクトを取得します。ワークシートが存在しない場合は null オブジェクトを返します。


    \[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: ワークシートの名前または ID。
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getLast
  summary: >-
    コレクション内の最後のワークシートを取得します。


    \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getLast(visibleOnly)
  fullName: getLast(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: 省略可能。true の場合、非表示のワークシートをスキップし、表示可能なワークシートのみを考慮します。
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.items
  summary: このコレクション内の読み込まれた子アイテムを取得します。
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel.Excel.WorksheetCollection.load
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る前に、"context. sync ()" を呼び出す必要があります。
  remarks: >-
    このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。


    `load(option?: string | string[]): Excel.WorksheetCollection`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。


    `load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.WorksheetCollection.load_1
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type:
      - string | string[]
- uid: excel.Excel.WorksheetCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.WorksheetCollection.onActivated
  summary: >-
    ブック内のすべてのワークシートがアクティブになったときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onAdded
  summary: >-
    新しいワークシートがブックに追加されるときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onCalculated
  summary: >-
    ブック内の任意のワークシートが計算されるときに発生します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel.Excel.WorksheetCollection.onChanged
  summary: >-
    ブック内の任意のワークシートが変更されたときに発生します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onDeactivated
  summary: >-
    ブック内のすべてのワークシートが非アクティブ化されたときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeleted
  summary: >-
    ブックからワークシートが削除されるときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel.Excel.WorksheetCollection.onFiltered
  summary: >-
    ワークシートのフィルターがブック内で適用されるときに発生します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.WorksheetCollection.onFormatChanged
  summary: >-
    ブック内のすべてのワークシートの書式が変更されたときに発生します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onSelectionChanged
  summary: >-
    ワークシートで選択範囲が変更されたときに発生します。


    \[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  isPreview: true
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.toJSON
  summary: API オブジェクトが`toJSON()`渡さ`JSON.stringify()` <!-- -->れるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。 (`JSON.stringify`<!-- -->つまり、によって渡さ`toJSON`れたオブジェクトのメソッドが呼び出されます)。`Excel.WorksheetCollection`元のオブジェクトは API オブジェクトであるのに`toJSON`対し、メソッドは、コレクションのアイテムから`Excel.Interfaces.WorksheetCollectionData` <!-- -->読み込まれたプロパティの浅いコピーを持つ "items" 配列を含む、プレーンな JavaScript オブジェクト (として型指定) を返します。
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
