### YamlMime:UniversalReference
ms.openlocfilehash: c827b346f429c90b6637cbaefe26dfa1c8677bb0
ms.sourcegitcommit: fd03ef72d6a546b0e4dbe0cc9e75d2a7cf9341a1
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/27/2019
ms.locfileid: "30303117"
items:
- uid: excel.Excel.WorksheetCollection
  summary: >-
    <span data-ttu-id="48351-101">ブックの一部であるワークシート オブジェクトのコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="48351-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>


    <span data-ttu-id="48351-102">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.WorksheetCollection
  fullName: Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetCollection.add
  - excel.Excel.WorksheetCollection.addFromBase64
  - excel.Excel.WorksheetCollection.addFromBase64_1
  - excel.Excel.WorksheetCollection.context
  - excel.Excel.WorksheetCollection.getActiveWorksheet
  - excel.Excel.WorksheetCollection.getCount
  - excel.Excel.WorksheetCollection.getFirst
  - excel.Excel.WorksheetCollection.getItem
  - excel.Excel.WorksheetCollection.getItemOrNullObject
  - excel.Excel.WorksheetCollection.getLast
  - excel.Excel.WorksheetCollection.items
  - excel.Excel.WorksheetCollection.load
  - excel.Excel.WorksheetCollection.load_1
  - excel.Excel.WorksheetCollection.load_2
  - excel.Excel.WorksheetCollection.onActivated
  - excel.Excel.WorksheetCollection.onAdded
  - excel.Excel.WorksheetCollection.onCalculated
  - excel.Excel.WorksheetCollection.onChanged
  - excel.Excel.WorksheetCollection.onDeactivated
  - excel.Excel.WorksheetCollection.onDeleted
  - excel.Excel.WorksheetCollection.onFiltered
  - excel.Excel.WorksheetCollection.onFormatChanged
  - excel.Excel.WorksheetCollection.onSelectionChanged
  - excel.Excel.WorksheetCollection.toJSON
- uid: excel.Excel.WorksheetCollection.add
  summary: >-
    <span data-ttu-id="48351-p101">新しいワークシートをブックに追加します。ワークシートは、既存のワークシートの末尾に追加されます。新しく追加したワークシートをアクティブにする場合は、そのワークシートに対して ".activate() を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="48351-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>


    <span data-ttu-id="48351-106">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-107\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="48351-p102">省略可能。追加するワークシートの名前。指定する場合、名前は一意である必要があります。指定されていない場合は、Excel が新しいワークシートの名前を決定します。</span><span class="sxs-lookup"><span data-stu-id="48351-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.addFromBase64
  summary: >-
    <span data-ttu-id="48351-112">ブックの指定されたワークシートを現在のブックに挿入します。</span><span class="sxs-lookup"><span data-stu-id="48351-112">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="48351-113">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-113">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: "<span data-ttu-id=\"48351-114\">各アイテムが新しい挿入ワークシートの Id を表す配列。</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-114\">An array where each item represents the Id of the new inserted worksheet.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-115\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-115\">Examples</span></span>\n\n```javascript\nconst myFile = <HTMLInputElement>document.getElementById(\"file\");\nconst reader = new FileReader();\n\nreader.onload = (event) => {\n    Excel.run((context) => {\n        // strip off the metadata before the base64-encoded string\n        const startIndex = (<string>(<FileReader>event.target).result).indexOf(\"base64,\");\n        const workbookContents = (<string>(<FileReader>event.target).result).substr(startIndex + 7);\n\n        const sheets = context.workbook.worksheets;\n        sheets.addFromBase64(\n            workbookContents,\n            null, // get all the worksheets \n            Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets\n            );\n        return context.sync();\n    });\n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
    parameters:
    - id: base64File
      description: <span data-ttu-id="48351-116">必須です。</span><span class="sxs-lookup"><span data-stu-id="48351-116">Required.</span></span> <span data-ttu-id="48351-117">元のブックを表す Base64 文字列。</span><span class="sxs-lookup"><span data-stu-id="48351-117">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="48351-118">オプション。</span><span class="sxs-lookup"><span data-stu-id="48351-118">Optional.</span></span> <span data-ttu-id="48351-119">挿入する speified されたワークシート名。</span><span class="sxs-lookup"><span data-stu-id="48351-119">The speified worksheet names to insert.</span></span> <span data-ttu-id="48351-120">既定では、元のブックのすべてのワークシートが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="48351-120">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionType
      description: <span data-ttu-id="48351-121">オプション。</span><span class="sxs-lookup"><span data-stu-id="48351-121">Optional.</span></span> <span data-ttu-id="48351-122">位置の種類を挿入します。詳細については、「Excel. ワークシートの種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="48351-122">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="48351-123">既定値は "Start" です。</span><span class="sxs-lookup"><span data-stu-id="48351-123">Default is "Start".</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="48351-124">オプション。</span><span class="sxs-lookup"><span data-stu-id="48351-124">Optional.</span></span> <span data-ttu-id="48351-125">現在のブックの参照元の worksheet オブジェクトまたはワークシートの名前または id。</span><span class="sxs-lookup"><span data-stu-id="48351-125">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="48351-126">既定値は null で、現在のブックの先頭または末尾にワークシートを挿入します。</span><span class="sxs-lookup"><span data-stu-id="48351-126">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.addFromBase64_1
  summary: >-
    <span data-ttu-id="48351-127">ブックの指定されたワークシートを現在のブックに挿入します。</span><span class="sxs-lookup"><span data-stu-id="48351-127">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="48351-128">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-128">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: <span data-ttu-id="48351-129">各アイテムが新しい挿入ワークシートの Id を表す配列。</span><span class="sxs-lookup"><span data-stu-id="48351-129">An array where each item represents the Id of the new inserted worksheet.</span></span>
    parameters:
    - id: base64File
      description: <span data-ttu-id="48351-130">必須です。</span><span class="sxs-lookup"><span data-stu-id="48351-130">Required.</span></span> <span data-ttu-id="48351-131">元のブックを表す Base64 文字列。</span><span class="sxs-lookup"><span data-stu-id="48351-131">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="48351-132">オプション。</span><span class="sxs-lookup"><span data-stu-id="48351-132">Optional.</span></span> <span data-ttu-id="48351-133">挿入する speified されたワークシート名。</span><span class="sxs-lookup"><span data-stu-id="48351-133">The speified worksheet names to insert.</span></span> <span data-ttu-id="48351-134">既定では、元のブックのすべてのワークシートが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="48351-134">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionTypeString
      description: <span data-ttu-id="48351-135">オプション。</span><span class="sxs-lookup"><span data-stu-id="48351-135">Optional.</span></span> <span data-ttu-id="48351-136">位置の種類を挿入します。詳細については、「Excel. ワークシートの種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="48351-136">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="48351-137">既定値は "Start" です。</span><span class="sxs-lookup"><span data-stu-id="48351-137">Default is "Start".</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="48351-138">オプション。</span><span class="sxs-lookup"><span data-stu-id="48351-138">Optional.</span></span> <span data-ttu-id="48351-139">現在のブックの参照元の worksheet オブジェクトまたはワークシートの名前または id。</span><span class="sxs-lookup"><span data-stu-id="48351-139">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="48351-140">既定値は null で、現在のブックの先頭または末尾にワークシートを挿入します。</span><span class="sxs-lookup"><span data-stu-id="48351-140">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.context
  summary: <span data-ttu-id="48351-141">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="48351-141">The request context associated with the object.</span></span> <span data-ttu-id="48351-142">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="48351-142">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    <span data-ttu-id="48351-143">ブックの、現在作業中のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="48351-143">Gets the currently active worksheet in the workbook.</span></span>


    <span data-ttu-id="48351-144">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-144">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getActiveWorksheet()
  fullName: getActiveWorksheet()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-145\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-145\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.WorksheetCollection.getCount
  summary: >-
    <span data-ttu-id="48351-146">コレクションに含まれるワークシートの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="48351-146">Gets the number of worksheets in the collection.</span></span>


    <span data-ttu-id="48351-147">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-147">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount(visibleOnly)
  fullName: getCount(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="48351-p112">省略可能。true の場合、非表示のワークシートをスキップし、表示可能なワークシートのみを考慮します。</span><span class="sxs-lookup"><span data-stu-id="48351-p112">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getFirst
  summary: >-
    <span data-ttu-id="48351-150">コレクション内の最初のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="48351-150">Gets the first worksheet in the collection.</span></span>


    <span data-ttu-id="48351-151">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-151">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getFirst(visibleOnly)
  fullName: getFirst(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-152\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-152\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="48351-p113">省略可能。true の場合、非表示のワークシートをスキップし、表示可能なワークシートのみを考慮します。</span><span class="sxs-lookup"><span data-stu-id="48351-p113">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getItem
  summary: >-
    <span data-ttu-id="48351-155">名前または ID を使用して、ワークシート オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="48351-155">Gets a worksheet object using its Name or ID.</span></span>


    <span data-ttu-id="48351-156">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-156">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="48351-157">ワークシートの名前または ID。</span><span class="sxs-lookup"><span data-stu-id="48351-157">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="48351-p114">名前または ID に基づいて worksheet オブジェクトを取得します。ワークシートが存在しない場合は null オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="48351-p114">Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.</span></span>


    <span data-ttu-id="48351-160">\[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-160">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="48351-161">ワークシートの名前または ID。</span><span class="sxs-lookup"><span data-stu-id="48351-161">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getLast
  summary: >-
    <span data-ttu-id="48351-162">コレクション内の最後のワークシートを取得します。</span><span class="sxs-lookup"><span data-stu-id="48351-162">Gets the last worksheet in the collection.</span></span>


    <span data-ttu-id="48351-163">\[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-163">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLast(visibleOnly)
  fullName: getLast(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-164\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-164\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="48351-p115">省略可能。true の場合、非表示のワークシートをスキップし、表示可能なワークシートのみを考慮します。</span><span class="sxs-lookup"><span data-stu-id="48351-p115">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.items
  summary: <span data-ttu-id="48351-167">このコレクション内の読み込まれた子アイテムを取得します。</span><span class="sxs-lookup"><span data-stu-id="48351-167">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel.Excel.WorksheetCollection.load
  summary: <span data-ttu-id="48351-168">オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。</span><span class="sxs-lookup"><span data-stu-id="48351-168">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="48351-169">プロパティを読み取る前に、"context. sync ()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="48351-169">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="48351-170">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="48351-170">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="48351-171">`load(option?: string | string[]): Excel.WorksheetCollection`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="48351-171">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="48351-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="48351-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="48351-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="48351-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="48351-174">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="48351-174">It is similar to the preceding signature.</span></span> <span data-ttu-id="48351-175">top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="48351-175">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="48351-176">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="48351-176">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="48351-177">option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="48351-177">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.WorksheetCollection.load_1
  summary: <span data-ttu-id="48351-178">オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。</span><span class="sxs-lookup"><span data-stu-id="48351-178">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="48351-179">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="48351-179">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-180\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-180\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="48351-181">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="48351-181">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.WorksheetCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.WorksheetCollection.onActivated
  summary: >-
    <span data-ttu-id="48351-182">ブック内のすべてのワークシートがアクティブになったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-182">Occurs when any worksheet in the workbook is activated.</span></span>


    <span data-ttu-id="48351-183">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-183">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-184\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-184\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onAdded
  summary: >-
    <span data-ttu-id="48351-185">新しいワークシートがブックに追加されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-185">Occurs when a new worksheet is added to the workbook.</span></span>


    <span data-ttu-id="48351-186">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-186">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-187\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-187\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onCalculated
  summary: >-
    <span data-ttu-id="48351-188">ブック内の任意のワークシートが計算されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-188">Occurs when any worksheet in the workbook is calculated.</span></span>


    <span data-ttu-id="48351-189">\[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-189">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel.Excel.WorksheetCollection.onChanged
  summary: >-
    <span data-ttu-id="48351-190">ブック内の任意のワークシートが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-190">Occurs when any worksheet in the workbook is changed.</span></span>


    <span data-ttu-id="48351-191">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-191">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onDeactivated
  summary: >-
    <span data-ttu-id="48351-192">ブック内のすべてのワークシートが非アクティブ化されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-192">Occurs when any worksheet in the workbook is deactivated.</span></span>


    <span data-ttu-id="48351-193">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"48351-194\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"48351-194\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeleted
  summary: >-
    <span data-ttu-id="48351-195">ブックからワークシートが削除されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-195">Occurs when a worksheet is deleted from the workbook.</span></span>


    <span data-ttu-id="48351-196">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-196">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel.Excel.WorksheetCollection.onFiltered
  summary: >-
    <span data-ttu-id="48351-197">ワークシートのフィルターがブック内で適用されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-197">Occurs when any worksheet's filter is applied in the workbook.</span></span>


    <span data-ttu-id="48351-198">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-198">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.WorksheetCollection.onFormatChanged
  summary: >-
    <span data-ttu-id="48351-199">ブック内のすべてのワークシートの書式が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-199">Occurs when any worksheet in the workbook has format changed.</span></span>


    <span data-ttu-id="48351-200">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-200">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onSelectionChanged
  summary: >-
    <span data-ttu-id="48351-201">ワークシートで選択範囲が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="48351-201">Occurs when the selection changes on any worksheet.</span></span>


    <span data-ttu-id="48351-202">\[[API セット: excelapi BETA (プレビューのみ)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="48351-202">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.toJSON
  summary: <span data-ttu-id="48351-203">API オブジェクトが`toJSON()`渡さ`JSON.stringify()` <!-- -->れるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="48351-203">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="48351-204">(`JSON.stringify`<!-- -->つまり、によって渡さ`toJSON`れたオブジェクトのメソッドが呼び出されます)。`Excel.WorksheetCollection`元のオブジェクトは API オブジェクトであるのに`toJSON`対し、メソッドは、コレクションのアイテムから`Excel.Interfaces.WorksheetCollectionData` <!-- -->読み込まれたプロパティの浅いコピーを持つ "items" 配列を含む、プレーンな JavaScript オブジェクト (として型指定) を返します。</span><span class="sxs-lookup"><span data-stu-id="48351-204">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
