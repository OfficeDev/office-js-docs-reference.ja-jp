### YamlMime:UniversalReference
ms.openlocfilehash: 21577ca27ab504e1e11ead29a573bd040dcb5bb3
ms.sourcegitcommit: b05ee546d9dfbc914c8d1c594d9b206b04780bbc
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 11/22/2018
ms.locfileid: "26645531"
items:
- uid: excel.Excel.SettingCollection
  summary: >-
    ブックの一部であるオブジェクトを設定するキーと値ペアのコレクションを表します。 スコープでは、ファイルおよびアドインの作業ウィンドウ (コンテンツ) の組み合わせごとに制限されます。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.SettingCollection
  fullName: Excel.SettingCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.SettingCollection.add
  - excel.Excel.SettingCollection.getCount
  - excel.Excel.SettingCollection.getItem
  - excel.Excel.SettingCollection.getItemOrNullObject
  - excel.Excel.SettingCollection.items
  - excel.Excel.SettingCollection.load
  - excel.Excel.SettingCollection.onSettingsChanged
  - excel.Excel.SettingCollection.toJSON
- uid: excel.Excel.SettingCollection.add
  summary: >-
    指定した設定をブックに設定または追加します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(key, value)
  fullName: add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(key: string, value: string | number | boolean | Date | any[] | any): Excel.Setting;'
    return:
      type:
      - excel.Excel.Setting
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings; \n    settings.onSettingsChanged.add(onChangedSetting);\n\n    await context.sync();\n    console.log(\"Settings changed handler registered.\");\n});\n```"
    parameters:
    - id: key
      description: 新しい設定のキーです。
      type:
      - string
    - id: value
      description: 新しい設定の値です。
      type:
      - string | number | boolean | Date | any[] | any
- uid: excel.Excel.SettingCollection.getCount
  summary: >-
    コレクション内にある Setting の数を取得します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.SettingCollection.getItem
  summary: >-
    キーから Setting エントリを取得します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(key)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Setting;'
    return:
      type:
      - excel.Excel.Setting
      description: ''
    parameters:
    - id: key
      description: 設定のキーです。
      type:
      - string
- uid: excel.Excel.SettingCollection.getItemOrNullObject
  summary: >-
    キーから Setting エントリを取得します。Setting が存在しない場合は null オブジェクトを返します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Setting;'
    return:
      type:
      - excel.Excel.Setting
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    let needsReview = settings.getItem(\"NeedsReview\");\n    needsReview.delete();\n    needsReview = settings.getItemOrNullObject(\"NeedsReview\");\n\n    await context.sync();\n\n    if (needsReview.isNullObject) {\n        console.log(\"The setting has been deleted\");\n    } else {\n        console.log(\"The setting was not deleted\");\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: key
      description: 設定のキーです。
      type:
      - string
- uid: excel.Excel.SettingCollection.items
  summary: このコレクションに読み込まれている子項目を取得します。
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Setting[];'
    return:
      type:
      - Excel.Setting[]
- uid: excel.Excel.SettingCollection.load
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 "Context.sync()"は、プロパティを読み取る前に呼び出す必要があります。
  remarks: >-
    だけでなく、この署名は、このメソッドは、次の署名をします。


    `load(option?: { select?: string; expand?: string; }): Excel.SettingCollection`-どこで読み込むには、プロパティを指定するコンマ区切りの文字列は、option.select、options.expand を読み込むナビゲーション プロパティを指定するコンマ区切りの文字列。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.SettingCollection`でコレクション型のみ使用できます。 前の署名に似ていますが。 Option.top は、結果に含めることができるコレクション アイテムの最大数を指定します。 Option.skip はスキップされ、その結果に含まれていない項目の数を指定します。 Option.top が指定されている場合、結果セットが指定数のアイテムをスキップした後開始されます。
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.SettingCollection;'
    return:
      type:
      - excel.Excel.SettingCollection
      description: ''
    parameters:
    - id: option
      description: コンマで区切られた文字列またはロードするにはプロパティを指定する文字列の配列。
      type:
      - string | string[]
- uid: excel.Excel.SettingCollection.onSettingsChanged
  summary: >-
    ドキュメント内の設定が変更されるときに発生します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onSettingsChanged
  fullName: onSettingsChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSettingsChanged: OfficeExtension.EventHandlers<Excel.SettingsChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.SettingsChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings; \n    settings.onSettingsChanged.add(onChangedSetting);\n\n    await context.sync();\n    console.log(\"Settings changed handler registered.\");\n});\n```"
- uid: excel.Excel.SettingCollection.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.SettingCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.SettingCollectionData
      description: ''
