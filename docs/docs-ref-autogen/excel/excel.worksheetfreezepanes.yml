### YamlMime:UniversalReference
ms.openlocfilehash: b0436d89db9b46e0dc1850fd3b2715496b541150
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 09/20/2018
ms.locfileid: "24048818"
items:
- uid: excel.Excel.WorksheetFreezePanes
  summary: '\[[API セット: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]'
  name: Excel.WorksheetFreezePanes
  fullName: excel.Excel.WorksheetFreezePanes
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetFreezePanes.freezeAt
  - excel.Excel.WorksheetFreezePanes.freezeColumns
  - excel.Excel.WorksheetFreezePanes.freezeRows
  - excel.Excel.WorksheetFreezePanes.getLocation
  - excel.Excel.WorksheetFreezePanes.getLocationOrNullObject
  - excel.Excel.WorksheetFreezePanes.toJSON
  - excel.Excel.WorksheetFreezePanes.unfreeze
- uid: excel.Excel.WorksheetFreezePanes.freezeAt
  summary: >-
    作業中のワークシート ビューで保持されているセルを設定します。 最上部と左側のペインで凍結されることにあるセル範囲を指定したが対応しています。


    \[[API セット: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: freezeAt(frozenRange)
  fullName: excel.Excel.WorksheetFreezePanes.freezeAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'freezeAt(frozenRange: Range | string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Freeze the specified range in top-and-left-most pane of the worksheet.\n    sheet.freezePanes.freezeAt(sheet.getRange(\"H2:K5\"));\n\n    await context.sync();\n});\n```"
    parameters:
    - id: frozenRange
      description: 固定、またはウィンドウ枠の固定を削除する場合は null にするセルを表す範囲です。
      type:
      - Range | string
- uid: excel.Excel.WorksheetFreezePanes.freezeColumns
  summary: >-
    埋め込みのワークシートの最初の列を固定します。


    \[[API セット: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: freezeColumns(count)
  fullName: excel.Excel.WorksheetFreezePanes.freezeColumns
  langs:
  - typeScript
  type: method
  syntax:
    content: 'freezeColumns(count?: number): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Freeze the first two columns in the worksheet.\n    sheet.freezePanes.freezeColumns(2);\n\n    await context.sync();\n});\n```"
    parameters:
    - id: count
      description: 任意の数の列を固定するには、またはすべての列の固定を解除するのには 0
      type:
      - number
- uid: excel.Excel.WorksheetFreezePanes.freezeRows
  summary: >-
    上でワークシートの行を固定します。


    \[[API セット: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: freezeRows(count)
  fullName: excel.Excel.WorksheetFreezePanes.freezeRows
  langs:
  - typeScript
  type: method
  syntax:
    content: 'freezeRows(count?: number): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Freeze the top two rows in the worksheet.\n    sheet.freezePanes.freezeRows(2);\n\n    await context.sync();\n});\n```"
    parameters:
    - id: count
      description: 固定、またはすべての行の固定を解除するのにはゼロの行の任意の数
      type:
      - number
- uid: excel.Excel.WorksheetFreezePanes.getLocation
  summary: >-
    作業中のワークシート ビューで固定されたセルを表す範囲を取得します。 固定範囲は、最上部と左側のウィンドウで保持されているセルに対応します。


    \[[API セット: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getLocation()
  fullName: excel.Excel.WorksheetFreezePanes.getLocation
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLocation(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.WorksheetFreezePanes.getLocationOrNullObject
  summary: >-
    作業中のワークシート ビューで固定されたセルを表す範囲を取得します。 固定範囲は、最上部と左側のウィンドウで保持されているセルに対応します。 固定されたウィンドウ枠がない場合は、null オブジェクトを返します。


    \[[API セット: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getLocationOrNullObject()
  fullName: excel.Excel.WorksheetFreezePanes.getLocationOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLocationOrNullObject(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const frozenRange = sheet.freezePanes.getLocationOrNullObject();\n    frozenRange.load(\"address\");\n\n    await context.sync();\n\n    if (frozenRange.isNullObject) {\n        OfficeHelpers.UI.notify(`The worksheet does not contain a frozen pane.`);\n    } else {\n        OfficeHelpers.UI.notify(`The address of the frozen range (cells that are frozen in the top-and-left-most pane) is \"${frozenRange.address}\"`);\n    }\n});\n```"
- uid: excel.Excel.WorksheetFreezePanes.toJSON
  name: toJSON()
  fullName: excel.Excel.WorksheetFreezePanes.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON:'
    return:
      type:
      - >-
        {
                    [key: string]: string;
                }
      description: ''
- uid: excel.Excel.WorksheetFreezePanes.unfreeze
  summary: >-
    ワークシート内のすべての固定されたウィンドウ枠を削除します。


    \[[API セット: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: unfreeze()
  fullName: excel.Excel.WorksheetFreezePanes.unfreeze
  langs:
  - typeScript
  type: method
  syntax:
    content: 'unfreeze(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.freezePanes.unfreeze();\n\n    await context.sync();\n});\n```"
