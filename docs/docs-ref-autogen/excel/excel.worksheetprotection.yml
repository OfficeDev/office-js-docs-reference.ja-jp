### YamlMime:UniversalReference
items:
  - uid: excel.Excel.WorksheetProtection
    summary: |-
      シート オブジェクトの保護を表します。

      \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.WorksheetProtection
    fullName: Excel.WorksheetProtection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.WorksheetProtection.context
      - excel.Excel.WorksheetProtection.load
      - excel.Excel.WorksheetProtection.load_1
      - excel.Excel.WorksheetProtection.load_2
      - excel.Excel.WorksheetProtection.options
      - excel.Excel.WorksheetProtection.protect
      - excel.Excel.WorksheetProtection.protected
      - excel.Excel.WorksheetProtection.toJSON
      - excel.Excel.WorksheetProtection.unprotect
  - uid: excel.Excel.WorksheetProtection.context
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.WorksheetProtection.load
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。
    remarks: |-
      このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。

      `load(option?: string | string[]): Excel.WorksheetProtection`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。

      `load(option?: { select?: string; expand?: string; }): Excel.WorksheetProtection`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetProtection`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetProtectionLoadOptions): Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.WorksheetProtectionLoadOptions
  - uid: excel.Excel.WorksheetProtection.load_1
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: excel.Excel.WorksheetProtection.load_2
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.WorksheetProtection.options
    summary: |-
      シートの保護のオプション。 読み取り専用です。

      \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: options
    fullName: options
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly options: Excel.WorksheetProtectionOptions;'
      return:
        type:
          - excel.Excel.WorksheetProtectionOptions
  - uid: excel.Excel.WorksheetProtection.protect
    summary: |-
      ワークシートを保護します。 ワークシートが既に保護されている場合は、失敗します。

      \[[API set: excelapi 1.2 for options、password の 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'protect(options, password)'
    fullName: 'protect(options, password)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protect(options?: Excel.WorksheetProtectionOptions, password?: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function(ctx) {
            // get a reference to Sheet1
            var sheet = ctx.workbook.worksheets.getItem("Sheet1");

            // Protect inserting or deleting rows in Sheet1
            sheet.protection.protect({
              allowInsertRows: false,
              allowDeleteRows: false
            });

            return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.load("protection/protected");

              await context.sync();

              if (!activeSheet.protection.protected) {
                  activeSheet.protection.protect();
              }
          });
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          await Excel.run(async (context) => {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.load("protection/protected");

              await context.sync();

              if (!activeSheet.protection.protected) {
                  activeSheet.protection.protect(null, password);
              }
          });
          ```
      parameters:
        - id: options
          description: 省略可能です。 シートの保護のオプション。
          type:
            - excel.Excel.WorksheetProtectionOptions
        - id: password
          description: 省略可能です。 シート保護のパスワードを入力します。
          type:
            - string
  - uid: excel.Excel.WorksheetProtection.protected
    summary: |-
      ワークシートが保護されているかどうかを示します。 読み取り専用です。

      \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: protected
    fullName: protected
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protected: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.WorksheetProtection.toJSON
    summary: API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元のブック保護オブジェクトは API オブジェクトであるのに対して`toJSON` 、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.WorksheetProtectionData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetProtectionData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetProtectionData
        description: ''
  - uid: excel.Excel.WorksheetProtection.unprotect
    summary: |-
      ワークシートの保護を解除します。

      \[[API set: excelapi 1.7 (パスワード](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets))\]
    name: unprotect(password)
    fullName: unprotect(password)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unprotect(password?: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function(ctx) {
            // get a reference to Sheet1
            var sheet = ctx.workbook.worksheets.getItem("Sheet1");

            // Remove all protects applied to Sheet1
            sheet.protection.unprotect();

            return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Unprotecting a worksheet with unprotect() will remove all 
          // WorksheetProtectionOptions options applied to a worksheet.
          // To remove only a subset of WorksheetProtectionOptions use the 
          // protect() method and set the options you wish to remove to true.
          Excel.run(function(ctx) {
            var sheet = ctx.workbook.worksheets.getItem("Sheet1");
            sheet.protection.protect({
              allowInsertRows: false, // Protect row insertion
              allowDeleteRows: true // Unprotect row deletion
            });
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.protection.unprotect();
          });
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          await Excel.run(async (context) => {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.protection.unprotect(password);
          });
          ```
      parameters:
        - id: password
          description: シートの保護パスワード。
          type:
            - string