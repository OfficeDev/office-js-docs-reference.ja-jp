### YamlMime:TSType
name: Excel.Range
uid: excel!Excel.Range:class
package: excel!
fullName: Excel.Range
summary: >-
  Range は、セル、行、列、セルブロックなど、1 つ以上の連続するセルのセットを表します。API 全体での範囲の使用方法の詳細については[、「Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)を使用した範囲の使用」と[「Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)を使用した範囲の使用 (詳細)」を参照してください。<!-- -->.


  \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: address
  uid: excel!Excel.Range#address:member
  package: excel!
  fullName: address
  summary: >-
    A1 スタイルの範囲参照を指定します。 アドレス値には、シート参照 (例: "Sheet1!A1:B4")。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly address: string;'
    return:
      type: string
- name: addressLocal
  uid: excel!Excel.Range#addressLocal:member
  package: excel!
  fullName: addressLocal
  summary: >-
    ユーザーの言語で指定した範囲の範囲参照を指定します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type: string
- name: cellCount
  uid: excel!Excel.Range#cellCount:member
  package: excel!
  fullName: cellCount
  summary: >-
    範囲内のセルの数を指定します。 セルの数が 2^31-1 (2,147,483,647) を超えると、この API は -1 を返します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type: number
- name: columnCount
  uid: excel!Excel.Range#columnCount:member
  package: excel!
  fullName: columnCount
  summary: >-
    範囲内の列の総数を指定します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type: number
- name: columnHidden
  uid: excel!Excel.Range#columnHidden:member
  package: excel!
  fullName: columnHidden
  summary: >-
    現在の範囲のすべての列が非表示になっているかどうかを表します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type: boolean
- name: columnIndex
  uid: excel!Excel.Range#columnIndex:member
  package: excel!
  fullName: columnIndex
  summary: >-
    範囲内の最初のセルの列番号を指定します。 0 を起点とする番号になります。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type: number
- name: context
  uid: excel!Excel.Range#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これにより、アドインのプロセスがホスト アプリケーションのプロセスOfficeに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: format
  uid: excel!Excel.Range#format:member
  package: excel!
  fullName: format
  summary: >-
    Format オブジェクト (範囲のフォント、塗りつぶし、罫線、配置などのプロパティをカプセル化するオブジェクト) を返します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type: <xref uid="excel!Excel.RangeFormat:class" />
- name: formulas
  uid: excel!Excel.Range#formulas:member
  package: excel!
  fullName: formulas
  summary: >-
    A1 スタイル表記の数式を表します。 セルに数式がない場合は、その値が代わりに返されます。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulas: any[][];'
    return:
      type: any[][]
- name: formulasLocal
  uid: excel!Excel.Range#formulasLocal:member
  package: excel!
  fullName: formulasLocal
  summary: >-
    ユーザーの言語と数値書式ロケールで、A1 スタイル表記の数式を表します。 たとえば、英語の数式 "=SUM(A1, 1.5)" は、ドイツ語では "=SUMME(A1; 1,5)" になります。 セルに数式がない場合は、その値が代わりに返されます。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type: any[][]
- name: formulasR1C1
  uid: excel!Excel.Range#formulasR1C1:member
  package: excel!
  fullName: formulasR1C1
  summary: >-
    R1C1 スタイル表記の数式を表します。 セルに数式がない場合は、その値が代わりに返されます。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type: any[][]
- name: hidden
  uid: excel!Excel.Range#hidden:member
  package: excel!
  fullName: hidden
  summary: >-
    現在の範囲のすべてのセルが非表示になっているかどうかを表します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type: boolean
- name: numberFormat
  uid: excel!Excel.Range#numberFormat:member
  package: excel!
  fullName: numberFormat
  summary: >-
    指定した範囲の Excel の数値書式コードを表します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type: any[][]
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: rowCount
  uid: excel!Excel.Range#rowCount:member
  package: excel!
  fullName: rowCount
  summary: >-
    範囲に含まれる行の合計数を返します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type: number
- name: rowHidden
  uid: excel!Excel.Range#rowHidden:member
  package: excel!
  fullName: rowHidden
  summary: >-
    現在の範囲のすべての行が非表示になっているかどうかを表します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type: boolean
- name: rowIndex
  uid: excel!Excel.Range#rowIndex:member
  package: excel!
  fullName: rowIndex
  summary: >-
    範囲に含まれる最初のセルの行番号を返します。 0 を起点とする番号になります。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type: number
- name: sort
  uid: excel!Excel.Range#sort:member
  package: excel!
  fullName: sort
  summary: >-
    現在の範囲について、範囲の並べ替えを表します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type: <xref uid="excel!Excel.RangeSort:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml\nasync function sortTopToBottom(criteria: string) {\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const range = sheet.getRange(\"A1:E5\");\n\n        // Find the column header that provides the sort criteria.\n        const header = range.find(criteria, {});\n        header.load(\"columnIndex\");\n        await context.sync();\n\n        range.sort.apply(\n            [\n                {\n                    key: header.columnIndex,\n                    sortOn: Excel.SortOn.value\n                }\n            ],\n            false /*matchCase*/,\n            true /*hasHeaders*/,\n            Excel.SortOrientation.rows\n        );\n        await context.sync();\n    });\n}\n```"
- name: text
  uid: excel!Excel.Range#text:member
  package: excel!
  fullName: text
  summary: >-
    指定した範囲のテキスト値。 テキスト値は、セルの幅には依存しません。 \#Excel UI で行う符号の置換は、API によって返されるテキスト値には影響しません。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly text: string[][];'
    return:
      type: string[][]
- name: values
  uid: excel!Excel.Range#values:member
  package: excel!
  fullName: values
  summary: >-
    指定した範囲の Raw 値を表します。 返されるデータの型は、文字列、数値、ブール値のいずれかになります。 エラーが含まれているセルは、エラー文字列を返します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'values: any[][];'
    return:
      type: any[][]
- name: valueTypes
  uid: excel!Excel.Range#valueTypes:member
  package: excel!
  fullName: valueTypes
  summary: >-
    各セルのデータの種類を指定します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type: <xref uid="excel!Excel.RangeValueType:enum" />[][]
- name: worksheet
  uid: excel!Excel.Range#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    現在の範囲を含んでいるワークシート。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: clear(applyTo)
  uid: excel!Excel.Range#clear:member(1)
  package: excel!
  fullName: clear(applyTo)
  summary: >-
    範囲の値、書式、塗りつぶし、罫線などをクリアします。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: 省略可能。 クリア操作の種類を決定します。 詳細については、「Excel.ClearApplyTo」を参照してください。
      type: <xref uid="excel!Excel.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: clear(applyToString)
  uid: excel!Excel.Range#clear:member(2)
  package: excel!
  fullName: clear(applyToString)
  summary: >-
    範囲の値、書式、塗りつぶし、罫線などをクリアします。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
    parameters:
    - id: applyToString
      description: 省略可能。 クリア操作の種類を決定します。 詳細については、「Excel.ClearApplyTo」を参照してください。
      type: "\"All\" | \"Formats\" | \"Contents\" | \"Hyperlinks\" | \"RemoveHyperlinks\""
    return:
      type: void
      description: ''
- name: delete(shift)
  uid: excel!Excel.Range#delete:member(1)
  package: excel!
  fullName: delete(shift)
  summary: >-
    範囲に関連付けられているセルを削除します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    parameters:
    - id: shift
      description: セルをシフトする方向を指定します。 詳細については、「Excel.DeleteShiftDirection」を参照してください。
      type: <xref uid="excel!Excel.DeleteShiftDirection:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete(shiftString)
  uid: excel!Excel.Range#delete:member(2)
  package: excel!
  fullName: delete(shiftString)
  summary: >-
    範囲に関連付けられているセルを削除します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shiftString: "Up" | "Left"): void;'
    parameters:
    - id: shiftString
      description: セルをシフトする方向を指定します。 詳細については、「Excel.DeleteShiftDirection」を参照してください。
      type: "\"Up\" | \"Left\""
    return:
      type: void
      description: ''
- name: getBoundingRect(anotherRange)
  uid: excel!Excel.Range#getBoundingRect:member(1)
  package: excel!
  fullName: getBoundingRect(anotherRange)
  summary: >-
    指定した範囲を包含する、最小の Range オブジェクトを取得します。 たとえば、"B2:C5" と "D10:E15" の GetBoundingRect は、"B2:E15" になります。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: Range オブジェクト、アドレスまたは範囲名。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCell(row, column)
  uid: excel!Excel.Range#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    行と列の番号に基づいて、1 つのセルを含んだ範囲オブジェクトを取得します。 セルは、ワークシート グリッド内にある限り、親範囲の境界外に配置できます。 返されるセルは、範囲の左上のセルを基準に配置されます。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: 取得するセルの行番号。 0 を起点とする番号になります。
      type: number
    - id: column
      description: 取得セルの列番号。 0 を起点とする番号になります。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.cell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getColumn(column)
  uid: excel!Excel.Range#getColumn:member(1)
  package: excel!
  fullName: getColumn(column)
  summary: >-
    範囲に含まれる列を 1 つ取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    parameters:
    - id: column
      description: 取得する範囲の列番号。 0 を起点とする番号になります。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getColumnsAfter(count)
  uid: excel!Excel.Range#getColumnsAfter:member(1)
  package: excel!
  fullName: getColumnsAfter(count)
  summary: >-
    現在の Range オブジェクトの右にある特定の列数を取得します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 省略可能。結果の範囲に含める列の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getColumnsBefore(count)
  uid: excel!Excel.Range#getColumnsBefore:member(1)
  package: excel!
  fullName: getColumnsBefore(count)
  summary: >-
    現在の Range オブジェクトの左にある特定の列数を取得します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 省略可能。結果の範囲に含める列の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getEntireColumn()
  uid: excel!Excel.Range#getEntireColumn:member(1)
  package: excel!
  fullName: getEntireColumn()
  summary: >-
    範囲の列全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4:E11" を表す場合、そのオブジェクトは列 `getEntireColumn` "B:E" を表す範囲です)。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getEntireRow()
  uid: excel!Excel.Range#getEntireRow:member(1)
  package: excel!
  fullName: getEntireRow()
  summary: >-
    範囲の行全体を表すオブジェクトを取得します (たとえば、現在の範囲がセル "B4:E11" を表す場合、そのオブジェクトは行 `GetEntireRow` "4:11" を表す範囲です)。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getIntersection(anotherRange)
  uid: excel!Excel.Range#getIntersection:member(1)
  package: excel!
  fullName: getIntersection(anotherRange)
  summary: >-
    指定した範囲の長方形の交差を表す範囲オブジェクトを取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: 範囲の交差を判断するために使用される、Range オブジェクトまたは Range アドレス。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getIntersectionOrNullObject(anotherRange)
  uid: excel!Excel.Range#getIntersectionOrNullObject:member(1)
  package: excel!
  fullName: getIntersectionOrNullObject(anotherRange)
  summary: >-
    指定した範囲の長方形の交差を表す範囲オブジェクトを取得します。 交差部分が見つからない場合は、null オブジェクトを返します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: 範囲の交差を判断するために使用される、Range オブジェクトまたは Range アドレス。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getLastCell()
  uid: excel!Excel.Range#getLastCell:member(1)
  package: excel!
  fullName: getLastCell()
  summary: >-
    範囲内の最後のセルを取得します。 たとえば、"B2:D5" の最後のセルは "D5" になります。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastColumn()
  uid: excel!Excel.Range#getLastColumn:member(1)
  package: excel!
  fullName: getLastColumn()
  summary: >-
    範囲内の最後の列を取得します。 たとえば、"B2:D5" の最後の列は "D2:D5" になります。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastRow()
  uid: excel!Excel.Range#getLastRow:member(1)
  package: excel!
  fullName: getLastRow()
  summary: >-
    範囲内の最後の行を取得します。 たとえば、"B2:D5" の最後の行は "B5:D5" になります。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getOffsetRange(rowOffset, columnOffset)
  uid: excel!Excel.Range#getOffsetRange:member(1)
  package: excel!
  fullName: getOffsetRange(rowOffset, columnOffset)
  summary: >-
    指定した範囲からのオフセットで範囲を表すオブジェクトを取得します。返される範囲のディメンションは、この範囲と一致します。結果の範囲がワークシートのグリッドの境界線の外にはみ出る場合は、エラーがスローされます。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    parameters:
    - id: rowOffset
      description: 範囲をオフセットする行数 (正、負、または 0)。正の値は下方向へのオフセットです。また、負の値は上方向へのオフセットです。
      type: number
    - id: columnOffset
      description: 範囲をオフセットする列数 (正、負、または 0)。正の値は右方向へのオフセットです。また、負の値は左方向へのオフセットです。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:J5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getResizedRange(deltaRows, deltaColumns)
  uid: excel!Excel.Range#getResizedRange:member(1)
  package: excel!
  fullName: getResizedRange(deltaRows, deltaColumns)
  summary: >-
    現在の Range オブジェクトに似た (ただし、右下隅がいくつかの行と列で拡張 (または縮小) されている) Range オブジェクトを取得します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    parameters:
    - id: deltaRows
      description: 現在の範囲を基準にして、右下隅を拡張する行の数です。範囲を拡張するには正の数値、または範囲を縮小するには負の数値を使用します。
      type: number
    - id: deltaColumns
      description: 現在の範囲を基準に、右下隅を展開する列の数。 範囲を拡張するには正の数値、または範囲を縮小するには負の数値を使用します。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRow(row)
  uid: excel!Excel.Range#getRow:member(1)
  package: excel!
  fullName: getRow(row)
  summary: >-
    範囲に含まれている行を 1 つ取得します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    parameters:
    - id: row
      description: 取得する範囲の行番号。 0 を起点とする番号になります。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRowsAbove(count)
  uid: excel!Excel.Range#getRowsAbove:member(1)
  package: excel!
  fullName: getRowsAbove(count)
  summary: >-
    現在の Range オブジェクトの上にある特定の行数を取得します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 省略可能。結果の範囲に含める行の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRowsBelow(count)
  uid: excel!Excel.Range#getRowsBelow:member(1)
  package: excel!
  fullName: getRowsBelow(count)
  summary: >-
    現在の Range オブジェクトの下にある特定の行数を取得します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 省略可能。結果の範囲に含める行の数です。通常、正の数値を使用して現在の範囲外に範囲を作成します。負の数値を使用して、現在の範囲内に範囲を作成することもできます。既定値は 1 です。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Range#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: >-
    指定した範囲オブジェクトのうち使用されている範囲を返します。範囲内に使用済みのセルがない場合、この関数は ItemNotFound エラーをスローします。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: '値の入っているセルのみを使用セルと見なします。 \[Api セット: ExcelApi 1.2\]'
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Range#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    指定した範囲オブジェクトのうち使用されている範囲を返します。範囲内に使用済みのセルがない場合、この関数は null オブジェクトを返します。


    \[[API セット: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 値の入っているセルのみを使用セルと見なします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/used-range.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        console.log(\"Need Data to Make Chart\");\n        console.log(\"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\");\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
- name: getVisibleView()
  uid: excel!Excel.Range#getVisibleView:member(1)
  package: excel!
  fullName: getVisibleView()
  summary: >-
    現在の範囲の表示されている行を表します。


    \[[API セット: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type: <xref uid="excel!Excel.RangeView:class" />
      description: ''
- name: insert(shift)
  uid: excel!Excel.Range#insert:member(1)
  package: excel!
  fullName: insert(shift)
  summary: >-
    この範囲を占めるセルまたはセルの範囲をワークシートに挿入し、領域を空けるために他のセルをシフトします。この時点で空き領域に位置する、新しい Range オブジェクトが返されます。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    parameters:
    - id: shift
      description: セルをシフトする方向を指定します。 詳細については、「Excel.InsertShiftDirection」を参照してください。
      type: <xref uid="excel!Excel.InsertShiftDirection:enum" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insert(shiftString)
  uid: excel!Excel.Range#insert:member(2)
  package: excel!
  fullName: insert(shiftString)
  summary: >-
    この範囲を占めるセルまたはセルの範囲をワークシートに挿入し、領域を空けるために他のセルをシフトします。この時点で空き領域に位置する、新しい Range オブジェクトが返されます。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
    parameters:
    - id: shiftString
      description: セルをシフトする方向を指定します。 詳細については、「Excel.InsertShiftDirection」を参照してください。
      type: "\"Down\" | \"Right\""
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Range#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティのオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.RangeLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Range#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Range;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定するコンマ区切り文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Range#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Range;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマ区切りの文字列で、読み込むナビゲーション プロパティを指定するコンマ区切 `propertyNamesAndPaths.expand` りの文字列です。'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: merge(across)
  uid: excel!Excel.Range#merge:member(1)
  package: excel!
  fullName: merge(across)
  summary: >-
    範囲内のセルをワークシートの 1 つの領域に結合します。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'merge(across?: boolean): void;'
    parameters:
    - id: across
      description: 省略可能。 指定した範囲のセルを行ごとに結合して、行ごとに別のセルを作成する場合は True に設定します。 既定値は False です。
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: select()
  uid: excel!Excel.Range#select:member(1)
  package: excel!
  fullName: select()
  summary: >-
    Excel UI で指定した範囲を選択します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: set(properties, options)
  uid: excel!Excel.Range#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: オブジェクトの複数のプロパティを同時に設定します。 適切なプロパティを持つプレーン オブジェクト、または同じ種類の別の API オブジェクトを渡します。
  remarks: "このメソッドには、次の追加の署名があります。\n\n`set(properties: Excel.Range): void`\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: \"#4472C4\"\n            },\n            font: {\n                name: \"Verdana\",\n                color: \"white\"\n            }\n        }\n    })\n    range.format.autofitColumns();\n    await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const sourceRange = sheet.getRange(\"B2:E2\");\n    sourceRange.load(\"format/fill/color, format/font/name, format/font/color\");\n    await context.sync();\n\n    // Set properties based on the loaded and synced \n    // source range.\n    const targetRange = sheet.getRange(\"B7:E7\");\n    targetRange.set(sourceRange); \n    targetRange.format.autofitColumns();\n    await context.sync();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティと同型的に構造化されたプロパティを持つ JavaScript オブジェクト。
      type: <xref uid="excel!Excel.Interfaces.RangeUpdateData:interface" />
    - id: options
      description: properties オブジェクトが読み取り専用プロパティを設定しようとすると、エラーを抑制するオプションを提供します。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Range#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクト上の複数のプロパティを同時に設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Range): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Range:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Range#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: API オブジェクトを渡す際に、より有用な出力を提供するために `toJSON()` JavaScript メソッドをオーバーライドします。 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->、順番に、渡 `toJSON` されるオブジェクトのメソッドを呼び出します。元の Excel.Range オブジェクトが API オブジェクトであるのに対し、メソッドはプレーンな JavaScript オブジェクト (次のように入力) `toJSON` を返します。 `Excel.Interfaces.RangeData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを含む。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.RangeData:interface" />
      description: ''
- name: track()
  uid: excel!Excel.Range#track:member(1)
  package: excel!
  fullName: track()
  summary: ドキュメントの環境変更に基づいて自動的に調整する目的でオブジェクトを追跡します。 この呼び出しは、 `context.trackedObjects.add(thisObject)`<!-- -->. このオブジェクトを呼び出し間で使用し、.run バッチのシーケンシャル実行の外側で使用し、プロパティの設定またはオブジェクトのメソッドの呼び出し時に "InvalidObjectPath" エラーが発生する場合は、オブジェクトが最初に作成された時点で、追跡対象オブジェクト コレクションにオブジェクトを追加する必要がありました。 `.sync`
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: unmerge()
  uid: excel!Excel.Range#unmerge:member(1)
  package: excel!
  fullName: unmerge()
  summary: >-
    範囲内のセルを結合解除して別々のセルにします。


    \[[API セット: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'unmerge(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: untrack()
  uid: excel!Excel.Range#untrack:member(1)
  package: excel!
  fullName: untrack()
  summary: 前に追跡されていた場合、このオブジェクトに関連付けられているメモリを解放します。 この呼び出しは、 `context.trackedObjects.remove(thisObject)`<!-- -->. 追跡対象オブジェクトが多いとホスト アプリケーションの動作が遅くなります。追加したオブジェクトが不要になったら、必ずそれを解放してください。 メモリ解放が有効に `context.sync()` される前に呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: db9e7fde956aceccd6a9115443904b3a671fe6d4
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51229886"
