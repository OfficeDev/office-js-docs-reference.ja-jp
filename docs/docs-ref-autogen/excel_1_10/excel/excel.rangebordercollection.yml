### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.RangeBorderCollection:class'
    summary: |-
      範囲の境界線を構成する複数の境界線オブジェクトを表します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.RangeBorderCollection
    fullName: Excel.RangeBorderCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.RangeBorderCollection#context:member'
      - 'excel!Excel.RangeBorderCollection#count:member'
      - 'excel!Excel.RangeBorderCollection#getItem:member(1)'
      - 'excel!Excel.RangeBorderCollection#getItem:member(2)'
      - 'excel!Excel.RangeBorderCollection#getItemAt:member(1)'
      - 'excel!Excel.RangeBorderCollection#items:member'
      - 'excel!Excel.RangeBorderCollection#load:member(1)'
      - 'excel!Excel.RangeBorderCollection#load:member(2)'
      - 'excel!Excel.RangeBorderCollection#load:member(3)'
      - 'excel!Excel.RangeBorderCollection#tintAndShade:member'
      - 'excel!Excel.RangeBorderCollection#toJSON:member(1)'
  - uid: 'excel!Excel.RangeBorderCollection#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.RangeBorderCollection#count:member'
    summary: |-
      コレクションに含まれる境界線オブジェクトの数。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeBorderCollection#getItem:member(1)'
    summary: |-
      オブジェクトの名前を使用して、境界線オブジェクトを取得します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: Excel.BorderIndex): Excel.RangeBorder;'
      return:
        type:
          - 'excel!Excel.RangeBorder:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var borderName = 'EdgeTop';
              var border = range.format.borders.getItem(borderName);
              border.load('style');
              return ctx.sync().then(function() {
                      console.log(border.style);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 取得する border オブジェクトのインデックス値を指定します。 詳細については、「Excel BorderIndex」を参照してください。
          type:
            - 'excel!Excel.BorderIndex:enum'
  - uid: 'excel!Excel.RangeBorderCollection#getItem:member(2)'
    summary: |-
      オブジェクトの名前を使用して、境界線オブジェクトを取得します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(indexString)
    fullName: getItem(indexString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(indexString: "EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight" | "InsideVertical" | "InsideHorizontal" | "DiagonalDown" | "DiagonalUp"): Excel.RangeBorder;'
      return:
        type:
          - 'excel!Excel.RangeBorder:class'
        description: ''
      parameters:
        - id: indexString
          description: 取得する border オブジェクトのインデックス値を指定します。 詳細については、「Excel BorderIndex」を参照してください。
          type:
            - '"EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight" | "InsideVertical" | "InsideHorizontal" | "DiagonalDown" | "DiagonalUp"'
  - uid: 'excel!Excel.RangeBorderCollection#getItemAt:member(1)'
    summary: |-
      オブジェクトのインデックスを使用して、境界線オブジェクトを取得します。

      \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.RangeBorder;'
      return:
        type:
          - 'excel!Excel.RangeBorder:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var border = range.format.borders.getItemAt(0);
              border.load('sideIndex');
              return ctx.sync().then(function() {
                  console.log(border.sideIndex);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 取得するオブジェクトのインデックス値。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'excel!Excel.RangeBorderCollection#items:member'
    summary: このコレクション内に読み込まれた子アイテムを取得します。
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.RangeBorder[];'
      return:
        type:
          - 'excel!Excel.RangeBorderCollection#items~0:complex'
  - uid: 'excel!Excel.RangeBorderCollection#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeBorderCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.RangeBorderCollection;'
      return:
        type:
          - 'excel!Excel.RangeBorderCollection:class'
        description: ''
      parameters:
        - id: options
          description: 読み込むオブジェクトのプロパティを指定するオプションを提供します。
          type:
            - 'excel!Excel.RangeBorderCollection#load~0:complex'
  - uid: 'excel!Excel.RangeBorderCollection#load:member(2)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.RangeBorderCollection;'
      return:
        type:
          - 'excel!Excel.RangeBorderCollection:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var borders = range.format.borders;
              border.load('items');
              return ctx.sync().then(function() {
                  console.log(borders.count);
                  for (var i = 0; i < borders.items.length; i++) {
                      console.log(borders.items[i].sideIndex);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.RangeBorderCollection#load:member(3)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.RangeBorderCollection;'
      return:
        type:
          - 'excel!Excel.RangeBorderCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`は、読み込むプロパティを指定するコンマで区切られた文字列で`propertyNamesAndPaths.expand` 、読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.RangeBorderCollection#tintAndShade:member'
    summary: |-
      範囲の境界線の色を明るくまたは暗くする double を指定します。値は、-1 (最も暗い) から 1 (最も明るい) までの範囲で、元の色は0になります。 Null 値は、境界のコレクション全体に均一な tintAndShade が設定されていないことを示します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: tintAndShade
    fullName: tintAndShade
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tintAndShade: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeBorderCollection#toJSON:member(1)'
    summary: API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元`Excel.RangeBorderCollection`のオブジェクトは API オブジェクトであるのに`toJSON`対し、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.RangeBorderCollectionData`<!-- -->) を使用して、コレクションのアイテムから読み込まれたプロパティの浅いコピーを持つ "items" 配列を含みます。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeBorderCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeBorderCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.RangeBorder:class'
    name: Excel.RangeBorder
  - uid: 'excel!Excel.BorderIndex:enum'
    name: Excel.BorderIndex
  - uid: 'excel!Excel.RangeBorderCollection#items~0:complex'
    name: 'Excel.RangeBorder[]'
    fullName: 'Excel.RangeBorder[]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeBorder:class'
        name: Excel.RangeBorder
        fullName: Excel.RangeBorder
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.RangeBorderCollection:class'
    name: Excel.RangeBorderCollection
  - uid: 'excel!Excel.RangeBorderCollection#load~0:complex'
    name: Excel.Interfaces.RangeBorderCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.RangeBorderCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.RangeBorderCollectionLoadOptions:interface'
        name: Excel.Interfaces.RangeBorderCollectionLoadOptions
        fullName: Excel.Interfaces.RangeBorderCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.RangeBorderCollectionData:interface'
    name: Excel.Interfaces.RangeBorderCollectionData