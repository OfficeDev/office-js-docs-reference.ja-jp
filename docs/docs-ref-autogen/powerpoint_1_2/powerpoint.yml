### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
- powerpoint!PowerPoint.Slide:class
- powerpoint!PowerPoint.SlideCollection:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
- powerpoint!PowerPoint.InsertSlideFormatting:enum
interfaces:
- powerpoint!PowerPoint.InsertSlideOptions:interface
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
- powerpoint!PowerPoint.Interfaces.SlideLoadOptions:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    新しいプレゼンテーションを作成して開きます。 必要に応じて、プレゼンテーションに base64 エンコードの .pptx ファイルを事前に入力できます。


    \[[API セット: PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: 省略可能。 base64 でエンコードされた .pptx ファイル。 既定値は null です。
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: 新しい RequestContext を使用して、PowerPoint オブジェクト モデルでアクションを実行するバッチ スクリプトを実行します。 promise が解決されると、実行中に自動的に割り当てられた追跡対象オブジェクトが解放されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: RequestContext を取り込み、約束を返す関数 (通常、"context.sync()" の結果だけです)。 context パラメーターは、PowerPoint アプリケーションへの要求を容易にします。 Officeと PowerPoint アプリケーションは 2 つの異なるプロセスで実行されますので、アドインから PowerPoint オブジェクト モデルにアクセスするには RequestContext が必要です。
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: 以前に作成した API オブジェクトの RequestContext を使用して、PowerPoint オブジェクト モデルでアクションを実行するバッチ スクリプトを実行します。 promise が解決されると、実行中に自動的に割り当てられた追跡対象オブジェクトが解放されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: 以前に作成された API オブジェクト。 バッチは、渡されたオブジェクトと同じ RequestContext を使用します。つまり、オブジェクトに適用された変更は "context.sync()" によって取得されます。
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: RequestContext を取り込み、約束を返す関数 (通常、"context.sync()" の結果だけです)。 context パラメーターは、PowerPoint アプリケーションへの要求を容易にします。 Officeと PowerPoint アプリケーションは 2 つの異なるプロセスで実行されますので、アドインから PowerPoint オブジェクト モデルにアクセスするには RequestContext が必要です。
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: 以前に作成した API オブジェクトの RequestContext を使用して、PowerPoint オブジェクト モデルでアクションを実行するバッチ スクリプトを実行します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: 以前に作成された API オブジェクトの配列。 配列が検証され、すべてのオブジェクトが同じコンテキストを共有します。 バッチは、この共有 RequestContext を使用します。つまり、これらのオブジェクトに適用された変更は "context.sync()" によって取得されます。
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: RequestContext を取り込み、約束を返す関数 (通常、"context.sync()" の結果だけです)。 context パラメーターは、PowerPoint アプリケーションへの要求を容易にします。 Officeと PowerPoint アプリケーションは 2 つの異なるプロセスで実行されますので、アドインから PowerPoint オブジェクト モデルにアクセスするには RequestContext が必要です。
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 2e1385414eb2703006879f96c9a4c8b678fab1ac
  ms.sourcegitcommit: f7c5207ef96c4f6034fcb1b48e1b0036abf4fccc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 04/16/2021
  ms.locfileid: "51877228"
