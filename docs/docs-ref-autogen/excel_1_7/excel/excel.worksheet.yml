### YamlMime:TSType
name: Excel.Worksheet
uid: excel!Excel.Worksheet:class
package: excel!
fullName: Excel.Worksheet
summary: >-
  Excel のワークシートは、セルのグリッドです。 データ、表、グラフなどを含めることができます。ワークシートオブジェクトモデルの詳細については、「 [Excel JAVASCRIPT API を使用してワークシートを操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)する」を参照してください。<!-- -->.


  \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: charts
  uid: excel!Excel.Worksheet#charts:member
  package: excel!
  fullName: charts
  summary: >-
    ワークシートの一部であるグラフのコレクションを返します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
- name: context
  uid: excel!Excel.Worksheet#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: freezePanes
  uid: excel!Excel.Worksheet#freezePanes:member
  package: excel!
  fullName: freezePanes
  summary: >-
    ワークシート上の固定されたウィンドウを操作するために使用できるオブジェクトを取得します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type: <xref uid="excel!Excel.WorksheetFreezePanes:class" />
- name: id
  uid: excel!Excel.Worksheet#id:member
  package: excel!
  fullName: id
  summary: >-
    指定されたブックのワークシートを一意に識別する値を返します。 この識別子の値は、ワークシートの名前を変更したり移動したりしても同じままです。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Worksheet#name:member
  package: excel!
  fullName: name
  summary: >-
    ワークシートの表示名。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Worksheet#names:member
  package: excel!
  fullName: names
  summary: >-
    現在のワークシートにスコープされている名前のコレクション。


    \[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:class" />
- name: onActivated
  uid: excel!Excel.Worksheet#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    ワークシートがアクティブになるときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onChanged
  uid: excel!Excel.Worksheet#onChanged:member
  package: excel!
  fullName: onChanged
  summary: >-
    特定のワークシートでデータが変更されたときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-worksheet.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n    await context.sync();\n\n    console.log(\"Added a worksheet-level data-changed event handler.\");\n});\n```"
- name: onDeactivated
  uid: excel!Excel.Worksheet#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    ワークシートが非アクティブになるときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onSelectionChanged
  uid: excel!Excel.Worksheet#onSelectionChanged:member
  package: excel!
  fullName: onSelectionChanged
  summary: >-
    特定のワークシートで選択範囲が変更されたときに発生します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetSelectionChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: pivotTables
  uid: excel!Excel.Worksheet#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: >-
    ワークシートの一部になっているピボットテーブルのコレクション。


    \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-get-pivottables.yaml\nawait Excel.run(async (context) => {\n  // Get the names of all the PivotTables in the current worksheet.\n  const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;\n  pivotTables.load(\"name\");\n  await context.sync();\n\n  // Display the names in the console.\n  console.log(\"PivotTables in the current worksheet:\")\n  pivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n});\n```"
- name: position
  uid: excel!Excel.Worksheet#position:member
  package: excel!
  fullName: position
  summary: >-
    0 を起点とした、ブック内のワークシートの位置。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'position: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: protection
  uid: excel!Excel.Worksheet#protection:member
  package: excel!
  fullName: protection
  summary: >-
    ワークシートのシート保護オブジェクトを返します。


    \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type: <xref uid="excel!Excel.WorksheetProtection:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Protect inserting or deleting rows in Sheet1\n  sheet.protection.protect({\n    allowInsertRows: false,\n    allowDeleteRows: false\n  });\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Unprotecting a worksheet with unprotect() will remove all \n// WorksheetProtectionOptions options applied to a worksheet.\n// To remove only a subset of WorksheetProtectionOptions use the \n// protect() method and set the options you wish to remove to true.\nExcel.run(function(ctx) {\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n  sheet.protection.protect({\n    allowInsertRows: false, // Protect row insertion\n    allowDeleteRows: true // Unprotect row deletion\n  });\n});\n```"
- name: standardHeight
  uid: excel!Excel.Worksheet#standardHeight:member
  package: excel!
  fullName: standardHeight
  summary: >-
    ワークシート内のすべての行の標準 (既定) の高さ (ポイント数) を返します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type: number
- name: standardWidth
  uid: excel!Excel.Worksheet#standardWidth:member
  package: excel!
  fullName: standardWidth
  summary: >-
    ワークシート内のすべての列の標準 (既定) 幅を指定します。 列幅の単位は、標準スタイルの 1 文字分の幅に相当します。 プロポーショナル フォントでは、数字の 0 の幅が列幅の単位になります。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'standardWidth: number;'
    return:
      type: number
- name: tabColor
  uid: excel!Excel.Worksheet#tabColor:member
  package: excel!
  fullName: tabColor
  summary: >-
    ワークシートのタブの色を設定します。 タブの色を取得するときに、ワークシートが非表示の場合、値は null になります。 ワークシートが表示されているにもかかわらず、tab の色が auto に設定されている場合は、空の文字列が返されます。 それ以外の場合は、プロパティは "123456" という色を設定するときに、"" という形式で設定され \# ます。色を設定するときは、空の文字列を使用して "auto" 色を設定するか、または実際の色を設定します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tabColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/tab-color.yaml\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- name: tables
  uid: excel!Excel.Worksheet#tables:member
  package: excel!
  fullName: tables
  summary: >-
    ワークシートの一部になっているグラフのコレクション。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:class" />
- name: visibility
  uid: excel!Excel.Worksheet#visibility:member
  package: excel!
  fullName: visibility
  summary: >-
    ワークシートの可視性。


    \[[API set: 表示を読み取るための excelapi 1.1、設定用の 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) 。 \]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type: <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden" | "VeryHidden"
methods:
- name: activate()
  uid: excel!Excel.Worksheet#activate:member(1)
  package: excel!
  fullName: activate()
  summary: >-
    Excel UI でワークシートをアクティブにします。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: calculate(markAllDirty)
  uid: excel!Excel.Worksheet#calculate:member(1)
  package: excel!
  fullName: calculate(markAllDirty)
  summary: >-
    ワークシート上のすべてのセルを計算します。


    \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    parameters:
    - id: markAllDirty
      description: True を設定すると、すべてがダーティとしてマークされます。
      type: boolean
    return:
      type: void
      description: ''
- name: copy(positionType, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(1)
  package: excel!
  fullName: copy(positionType, relativeTo)
  summary: >-
    ワークシートをコピーし、指定した位置に配置します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    parameters:
    - id: positionType
      description: 新しく作成されたワークシートを配置するブック内の位置を指定します。 既定値は "None" で、ワークシートの先頭にワークシートを挿入します。
      type: <xref uid="excel!Excel.WorksheetPositionType:enum" />
    - id: relativeTo
      description: 新しく作成されたワークシートの位置を決定する既存のワークシート。 これは、 `positionType` が "Before" または "After" の場合にのみ必要になります。
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: >-
        新しく作成されたワークシート。


        #### <a name="examples"></a>例


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-copy.yaml

        await Excel.run(async (context) => {

            let myWorkbook = context.workbook;
            let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
            let copiedSheet = sampleSheet.copy("End")

            sampleSheet.load("name");
            copiedSheet.load("name");

            await context.sync();

            console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
        });

        ```
- name: copy(positionTypeString, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(2)
  package: excel!
  fullName: copy(positionTypeString, relativeTo)
  summary: >-
    ワークシートをコピーし、指定した位置に配置します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    parameters:
    - id: positionTypeString
      description: 新しく作成されたワークシートを配置するブック内の位置を指定します。 既定値は "None" で、ワークシートの先頭にワークシートを挿入します。
      type: "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: 新しく作成されたワークシートの位置を決定する既存のワークシート。 これは、 `positionType` が "Before" または "After" の場合にのみ必要になります。
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: 新しく作成されたワークシート。
- name: delete()
  uid: excel!Excel.Worksheet#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    ブックからワークシートを削除します。 ワークシートの可視性が "非常に非表示" に設定されている場合は、削除操作が失敗して例外が発生し `InvalidOperation` ます。 最初に表示を削除する前に、表示を非表示または表示に変更する必要があります。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCell(row, column)
  uid: excel!Excel.Worksheet#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    行と列の番号に基づいて、1 つのセルを含んだ範囲オブジェクトを取得します。 ワークシートのグリッド内に収まるセルは、親の範囲の境界の外側にある場合があります。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: 取得するセルの行番号。 0 を起点とする番号になります。
      type: number
    - id: column
      description: 取得するセルの列番号。 0 を起点とする番号になります。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getNext(visibleOnly)
  uid: excel!Excel.Worksheet#getNext:member(1)
  package: excel!
  fullName: getNext(visibleOnly)
  summary: >-
    これに続くワークシートを取得します。 このメソッドに続くワークシートがない場合、このメソッドはエラーをスローします。


    \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getNextOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getNextOrNullObject:member(1)
  package: excel!
  fullName: getNextOrNullObject(visibleOnly)
  summary: >-
    これに続くワークシートを取得します。 このメソッドに続くワークシートがない場合、このメソッドは null オブジェクトを返します。


    \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getPrevious(visibleOnly)
  uid: excel!Excel.Worksheet#getPrevious:member(1)
  package: excel!
  fullName: getPrevious(visibleOnly)
  summary: >-
    これより前のワークシートを取得します。 前のワークシートがない場合、このメソッドはエラーをスローします。


    \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getPreviousOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getPreviousOrNullObject:member(1)
  package: excel!
  fullName: getPreviousOrNullObject(visibleOnly)
  summary: >-
    これより前のワークシートを取得します。 前のワークシートがない場合、このメソッドは null の objet を返します。


    \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 省略可能。 True の場合は、表示されているワークシートのみを考慮し、非表示のワークシートについてはスキップします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getRange(address)
  uid: excel!Excel.Worksheet#getRange:member(1)
  package: excel!
  fullName: getRange(address)
  summary: >-
    アドレスまたは名前で指定された、セルの単一の四角形のブロックを表す range オブジェクトを取得します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    parameters:
    - id: address
      description: '省略可能。 範囲のアドレスまたは名前を表す文字列。 たとえば、"A1: B2" となります。 指定されていない場合は、ワークシート全体の範囲が返されます。'
      type: string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  uid: excel!Excel.Worksheet#getRangeByIndexes:member(1)
  package: excel!
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  summary: >-
    特定の行インデックスと列インデックスから開始し、一定数の行と列にわたる、Range オブジェクトを取得します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    parameters:
    - id: startRow
      description: 開始行 (ゼロインデックス)。
      type: number
    - id: startColumn
      description: 開始列 (ゼロインデックス)。
      type: number
    - id: rowCount
      description: 範囲に含める行の数を指定します。
      type: number
    - id: columnCount
      description: 範囲に含める列の数を指定します。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: >-
    使用範囲とは、値または書式設定が割り当たっているすべてのセルを包含する最小の範囲です。 ワークシート全体が空白の場合、この関数は左上のセルを返します (つまり、エラーはスローされ *ません* )。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: '省略可能。 True の場合は、値を持つセルのみを使用セルと見なします (書式設定は無視されます)。 \[Api セット: ExcelApi 1.2\]'
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    使用範囲とは、値または書式設定が割り当たっているすべてのセルを包含する最小の範囲です。ワークシート全体が空白の場合、この関数は null オブジェクトを返します。


    \[[API セット: excelapi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 省略可能。 値の入っているセルのみを使用セルと見なします。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Worksheet#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティを指定するオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.WorksheetLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Worksheet#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Worksheet#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Worksheet;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマで区切られた文字列で、 `propertyNamesAndPaths.expand` 読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Worksheet#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
  remarks: >-
    このメソッドには、次の追加のシグネチャがあります。


    `set(properties: Excel.Worksheet): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
      type: <xref uid="excel!Excel.Interfaces.WorksheetUpdateData:interface" />
    - id: options
      description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Worksheet#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Worksheet#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: '`toJSON()`API オブジェクトが渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->`toJSON`その後、渡されたオブジェクトのメソッドを呼び出します。元の Worksheet オブジェクトは API オブジェクトであるのに対して、 `toJSON` メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.WorksheetData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.WorksheetData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 25a9790a3c09568d308b056beeda98606b8dab20
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49342627"
