### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.MessageRead:interface'
    summary: |-
      Office のメッセージの読み取りモード[。アイテム](xref:outlook!Office.Item:interface)<!-- -->.

      **重要**: これは、内部の Outlook オブジェクトであり、既存のインターフェイスを使用して直接公開されるものではありません。 これは、次のモードとして扱う必要があります。`Office.context.mailbox.item`<!-- -->. 詳細については、「[オブジェクトモデル](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item)」ページを参照してください。

      親インターフェイス:

      - [ItemRead](xref:outlook!Office.ItemRead:interface)

      - [Message](xref:outlook!Office.Message:interface)
    name: Office.MessageRead
    fullName: Office.MessageRead
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Message:interface'
      - 'outlook!Office.ItemRead:interface'
    package: outlook!
    children:
      - 'outlook!Office.MessageRead#addHandlerAsync:member(1)'
      - 'outlook!Office.MessageRead#addHandlerAsync:member(2)'
      - 'outlook!Office.MessageRead#attachments:member'
      - 'outlook!Office.MessageRead#body:member'
      - 'outlook!Office.MessageRead#cc:member'
      - 'outlook!Office.MessageRead#conversationId:member'
      - 'outlook!Office.MessageRead#dateTimeCreated:member'
      - 'outlook!Office.MessageRead#dateTimeModified:member'
      - 'outlook!Office.MessageRead#displayReplyAllForm:member(1)'
      - 'outlook!Office.MessageRead#displayReplyForm:member(1)'
      - 'outlook!Office.MessageRead#end:member'
      - 'outlook!Office.MessageRead#from:member'
      - 'outlook!Office.MessageRead#getEntities:member(1)'
      - 'outlook!Office.MessageRead#getEntitiesByType:member(1)'
      - 'outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)'
      - 'outlook!Office.MessageRead#getRegExMatches:member(1)'
      - 'outlook!Office.MessageRead#getRegExMatchesByName:member(1)'
      - 'outlook!Office.MessageRead#getSelectedEntities:member(1)'
      - 'outlook!Office.MessageRead#getSelectedRegExMatches:member(1)'
      - 'outlook!Office.MessageRead#internetMessageId:member'
      - 'outlook!Office.MessageRead#itemClass:member'
      - 'outlook!Office.MessageRead#itemId:member'
      - 'outlook!Office.MessageRead#itemType:member'
      - 'outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.MessageRead#location:member'
      - 'outlook!Office.MessageRead#normalizedSubject:member'
      - 'outlook!Office.MessageRead#notificationMessages:member'
      - 'outlook!Office.MessageRead#recurrence:member'
      - 'outlook!Office.MessageRead#removeHandlerAsync:member(1)'
      - 'outlook!Office.MessageRead#removeHandlerAsync:member(2)'
      - 'outlook!Office.MessageRead#sender:member'
      - 'outlook!Office.MessageRead#seriesId:member'
      - 'outlook!Office.MessageRead#start:member'
      - 'outlook!Office.MessageRead#subject:member'
      - 'outlook!Office.MessageRead#to:member'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync:member(1)'
    summary: |-
      サポートされているイベントのイベント ハンドラーを追加します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Item object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item#events)を参照してください。

      \[[API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを呼び出す必要のあるイベント。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~0:complex'
        - id: handler
          description: イベントを処理する関数。 関数は、オブジェクト リテラルである単一パラメーターを受け入れる必要があります。 パラメーターの type プロパティは、に渡される eventType と一致します。 `parameter``addHandlerAsync`<!-- -->.
          type:
            - any
        - id: options
          description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync:member(2)'
    summary: |-
      サポートされているイベントのイベント ハンドラーを追加します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Item object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item#events)を参照してください。

      \[[API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを呼び出す必要のあるイベント。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~2:complex'
        - id: handler
          description: イベントを処理する関数。 関数は、オブジェクト リテラルである単一パラメーターを受け入れる必要があります。 パラメーターの type プロパティは、に渡されるパラメーターと一致します。 `eventType``addHandlerAsync`<!-- -->.
          type:
            - any
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageRead#attachments:member'
    summary: アイテムの添付ファイルを配列として取得します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      **注**: セキュリティ上の問題が発生する可能性があるため、特定の種類のファイルが Outlook によってブロックされているため、返されません。 詳細については、「 [Outlook のブロック](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)された添付ファイル」を参照してください。<!-- -->.

      #### <a name="examples"></a>例

      ```javascript
      // The following code builds an HTML string with details of all attachments on the current item.
      var item = Office.context.mailbox.item;
      var outputString = "";

      if (item.attachments.length > 0) {
          for (i = 0 ; i < item.attachments.length ; i++) {
              var attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }

      console.log(outputString);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachments-read.yaml
      var attachments = Office.context.mailbox.item.attachments;
      console.log(attachments);
      ```
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#attachments~0:complex'
  - uid: 'outlook!Office.MessageRead#body:member'
    summary: |-
      アイテムの本文を操作するメソッドを提供するオブジェクトを取得します。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.MessageRead#cc:member'
    summary: |-
      メッセージの CC (カーボン コピー) の受信者へのアクセスを提供します。 オブジェクトの種類とアクセスのレベルは、現在のアイテムのモードによって異なります。

      `cc` プロパティは、メッセージの CC 行にある各受信者について、`EmailAddressDetails` オブジェクトを含む配列を返します。 既定では、コレクションは最大 100 人のメンバーに制限されています。 ただし、Outlook on the web では最大20メンバーを取得できますが、Windows と Mac では最大500メンバーを取得することができます。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml
      var msgCc = Office.context.mailbox.item.cc;
      console.log("Message copied to:");
      for (var i = 0; i < msgCc.length; i++) {
        console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
      }
      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#cc~0:complex'
  - uid: 'outlook!Office.MessageRead#conversationId:member'
    summary: |-
      特定のメッセージが含まれている電子メールの会話の識別子を取得します。

      メール アプリを閲覧フォームでアクティブ化するか、新規作成フォームの返信でアクティブ化すると、このプロパティで整数を取得することができます。その後、ユーザーが返信の件名を変更した場合、その返信の送信時にメッセージの会話 ID が変更され、以前に取得した値は適用されなくなります。

      新規作成フォームで新しいアイテムに対してこのプロパティに null を取得します。ユーザーが件名を設定し、アイテムを保存する場合、`conversationId` プロパティは値を返します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml
      console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);
      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#dateTimeCreated:member'
    summary: アイテムが作成された日時を取得します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml
      console.log(`Creation date and time: ${Office.context.mailbox.item.dateTimeCreated}`);
      ```
    name: dateTimeCreated
    fullName: dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#dateTimeModified:member'
    summary: |-
      アイテムが最後に変更された日時を取得します。

      **注**: このメンバーは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml
      console.log(`Date and time item last modified: ${Office.context.mailbox.item.dateTimeModified}`);
      ```
    name: dateTimeModified
    fullName: dateTimeModified
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#displayReplyAllForm:member(1)'
    summary: |-
      選択したメッセージの送信者とすべての受信者、または選択した予定の開催者およびすべての出席者を含む返信フォームが表示されます。

      Web 上の Outlook では、返信フォームは、3列表示のポップアップフォームとして表示され、2列または1列表示のポップアップフォームとして表示されます。

      文字列パラメーターのいずれかが制限値を超えると、`displayReplyAllForm` は例外をスローします。

      パラメーターに添付ファイルが指定されている場合 `formData.attachments` 、Outlook はすべての添付ファイルをダウンロードしようとして、返信フォームに添付します。 添付ファイルの追加に失敗すると、フォーム UI でエラーが表示されます。 表示できない場合、エラー メッセージはスローされません。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // The following code passes a string to the `displayReplyAllForm` function.
      Office.context.mailbox.item.displayReplyAllForm('hello there');
      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyAllForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyAllForm(
      {
      'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-reply-forms.yaml
      Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with <b>some bold text</b>.");
      ```
    name: displayReplyAllForm(formData)
    fullName: displayReplyAllForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: '回答フォームの本文を表すテキストと HTML が含まれる文字列。 文字列は 32 KB または本文または添付ファイルのデータとコールバック関数を含む[ReplyFormData](xref:outlook!Office.ReplyFormData:interface)オブジェクトに制限されます。'
          type:
            - 'outlook!Office.MessageRead#displayReplyAllForm~0:complex'
  - uid: 'outlook!Office.MessageRead#displayReplyForm:member(1)'
    summary: |-
      選択したメッセージの送信者のみ、または選択した予定の開催者のみを含む回答フォームが表示されます。

      Web 上の Outlook では、返信フォームは、3列表示のポップアップフォームとして表示され、2列または1列表示のポップアップフォームとして表示されます。

      文字列パラメーターのいずれかが制限値を超えると、`displayReplyForm` は例外をスローします。

      パラメーターに添付ファイルが指定されている場合 `formData.attachments` 、Outlook はすべての添付ファイルをダウンロードしようとして、返信フォームに添付します。 添付ファイルの追加に失敗すると、フォーム UI でエラーが表示されます。 表示できない場合、エラー メッセージはスローされません。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // The following code passes a string to the `displayReplyForm` function.
      Office.context.mailbox.item.displayReplyForm('hello there');
      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-reply-forms.yaml
      Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some text in italics</i>.");
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-reply-with-attachments.yaml
      Office.context.mailbox.item.displayReplyForm({
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ],
        options: { asyncContext: null },
        callback: function(result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Action failed with message ${result.error.message}`);
          }
        }
      });
      ```
    name: displayReplyForm(formData)
    fullName: displayReplyForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: '回答フォームの本文を表すテキストと HTML が含まれる文字列。 文字列は 32 KB または本文または添付ファイルのデータとコールバック関数を含む[ReplyFormData](xref:outlook!Office.ReplyFormData:interface)オブジェクトに制限されます。'
          type:
            - 'outlook!Office.MessageRead#displayReplyForm~0:complex'
  - uid: 'outlook!Office.MessageRead#end:member'
    summary: |-
      予定が終了する日付と時刻を取得します。

      `end`プロパティは、 `Date` 協定世界時 (UTC) の日付と時刻の値として表されるオブジェクトです。 メソッドを使用すると、 `convertToLocalClientTime` プロパティの `end` 値をクライアントのローカルの日付と時刻に変換できます。

      `Time.setAsync` メソッドを使用して終了時刻を設定する場合、`convertToUtcClientTime` メソッドを使用して、クライアント上のローカルの時刻をサーバーの UTC に変換する必要があります。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-end-read.yaml
      console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);
      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#from:member'
    summary: |-
      メッセージの送信者の電子メール アドレスを取得します。

      メッセージが代理人から送信された場合を除き、`from` プロパティと `sender` プロパティは同一人物を表します。 その場合、プロパティは `from` 委任者を表し、 `sender` プロパティはデリゲートを表します。

      **注**: `recipientType` `EmailAddressDetails` プロパティ内のオブジェクトのプロパティ `from` は未定義です。

      `from`プロパティはオブジェクトを返し `EmailAddressDetails` ます。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml
      var msgFrom = Office.context.mailbox.item.from;
      console.log("Message received from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      ```
    name: from
    fullName: from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.MessageRead#getEntities:member(1)'
    summary: |-
      選択したアイテムの本文にあるエンティティを取得します。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml
      var entities = Office.context.mailbox.item.getEntities();
      var entityTypesFound = 0;
      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }
      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }
      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }
      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }
      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }
      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }
      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }
      if (entityTypesFound == 0)
      {
          console.log("No entities found on this item.");
      }
      ```
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.MessageRead#getEntitiesByType:member(1)'
    summary: |-
      選択したアイテムの本文内で検出された指定のエンティティ型のすべてのエンティティを含む配列を取得します。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`Restricted`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml
      console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
      ```
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.MessageRead#getEntitiesByType~0:complex'
        description: 渡された値 `entityType` が列挙型の有効なメンバーでない場合、 `EntityType` メソッドは`null`<!-- -->. 指定した型のエンティティがアイテムの本文に存在しない場合、メソッドは空の配列を返します。 それ以外の場合は、返される配列内のオブジェクトの型は、`entityType` パラメーター内の要求されたエンティティの型によって異なります。
      parameters:
        - id: entityType
          description: |-
            列挙値の1つ `EntityType` 。

            このメソッドを使用する最低限のアクセス許可レベルは次のようになります。`Restricted`<!-- -->、 `ReadItem` 次の表で指定されているように、一部のエンティティ型にアクセスする必要があります。

            <table> <tr> <th>EntityType の値</th> <th>返される配列内のオブジェクトの型</th> <th>必要なアクセス許可のレベル</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contact</td> <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>
          type:
            - 'outlook!Office.MessageRead#getEntitiesByType~1:complex'
  - uid: 'outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)'
    summary: |-
      マニフェスト XML ファイルで定義された名前付きフィルターを通過する、選択したアイテム内の既知のエンティティを返します。

      この `getFilteredEntitiesByName` メソッドは、 `ItemHasKnownEntity` 指定された要素値を持つマニフェスト XML ファイルの rule 要素で定義されている正規表現に一致するエンティティを返し `FilterName` ます。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml
      // This API would only work when you click on highlighted physical address that has the word "Way" in it.
      console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
      ```
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.MessageRead#getFilteredEntitiesByName~0:complex'
        description: '`ItemHasKnownEntity`パラメーターに一致する要素の値を持つ要素がマニフェストに存在しない場合、 `FilterName` メソッドは次のように `name` 返します。`null`<!-- -->. `name` パラメーターがマニフェスト内の `ItemHasKnownEntity` 要素と一致せず、現在のアイテム内に一致するエンティティがない場合は、メソッドは空の配列を返します。'
      parameters:
        - id: name
          description: 一致するフィルターを定義する `ItemHasKnownEntity` ルール要素の名前。
          type:
            - string
  - uid: 'outlook!Office.MessageRead#getRegExMatches:member(1)'
    summary: |-
      選択したアイテム内の、マニフェスト XML ファイルで定義された正規表現に一致する文字列の値を返します。

      `getRegExMatches` メソッドは、マニフェスト XML ファイル内の、各 `ItemHasRegularExpressionMatch` または `ItemHasKnownEntity` ルール要素で定義された正規表現に一致する文字列を返します。`ItemHasRegularExpressionMatch` ルールの場合、そのルールで指定されたアイテムのプロパティに一致する文字列が発生する必要があります。`PropertyName` 単純型は、サポートされるプロパティを定義します。

      アイテムの body プロパティに `ItemHasRegularExpressionMatch` ルールを指定する場合、正規表現でさらに本文をフィルター処理し、アイテムの本文全体を返さないようにします。 . * などの正規表現を使用してアイテムの本文全体を取得しても、期待する結果が返されない場合があります。 この場合、代わりに `Body.getAsync` メソッドを使用して本文全体を取得します。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      // The following example shows how to access the array of
      // matches for the regular expression rule elements `fruits`
      // and `veggies`, which are specified in the manifest.
      var allMatches = Office.context.mailbox.item.getRegExMatches();
      var fruits = allMatches.fruits;
      var veggies = allMatches.veggies;
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml
      // This API would only work when you click on highlighted word "ScriptLab".
      console.log(Office.context.mailbox.item.getRegExMatches());
      ```
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: マニフェスト XML ファイルで定義された正規表現に一致する文字列の配列が格納されたオブジェクト。各配列の名前は、一致する `ItemHasRegularExpressionMatch` ルールの `RegExName` 属性、または一致する `ItemHasKnownEntity` ルールの `FilterName` 属性の対応する値と等しくなります。
  - uid: 'outlook!Office.MessageRead#getRegExMatchesByName:member(1)'
    summary: |-
      選択したアイテム内の、マニフェスト XML ファイルで定義された、指定された正規表現に一致する文字列の値を返します。

      `getRegExMatchesByName` メソッドは、`ItemHasRegularExpressionMatch` ルール要素で定義された正規表現に一致する文字列を返します。このルール要素は、指定された `RegExName` 要素値を持つマニフェスト XML ファイル内にあります。

      アイテムの body プロパティに `ItemHasRegularExpressionMatch` ルールを指定する場合、正規表現でさらに本文をフィルター処理し、アイテムの本文全体を返さないようにします。 . * などの正規表現を使用してアイテムの本文全体を取得しても、期待する結果が返されない場合があります。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");
      var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml
      // This API would only work when you click on highlighted word "ScriptLab".
      console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
      ```
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: マニフェスト XML ファイルで定義された正規表現に一致する文字列が格納された配列。
      parameters:
        - id: name
          description: 一致するフィルターを定義する `ItemHasRegularExpressionMatch` ルール要素の名前。
          type:
            - string
  - uid: 'outlook!Office.MessageRead#getSelectedEntities:member(1)'
    summary: |-
      強調表示された一致内で見つかったユーザーが選択しているエンティティを取得します。 強調表示された一致は、コンテキスト アドインに適用されます。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。

      \[[API set: Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml
      var entities = Office.context.mailbox.item.getSelectedEntities();
      var entityTypesFound = 0;
      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }
      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }
      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }
      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }
      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }
      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }
      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }
      if (entityTypesFound == 0)
      {
          console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
      }
      ```
    name: getSelectedEntities()
    fullName: getSelectedEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.MessageRead#getSelectedRegExMatches:member(1)'
    summary: |-
      マニフェスト XML ファイルで定義した正規表現と一致する、強調表示された一致内の文字列値を返します。 強調表示された一致は、コンテキスト アドインに適用されます。

      `getSelectedRegExMatches` メソッドは、マニフェスト XML ファイル内の、各 `ItemHasRegularExpressionMatch` または `ItemHasKnownEntity` ルール要素で定義された正規表現に一致する文字列を返します。`ItemHasRegularExpressionMatch` ルールの場合、そのルールで指定されたアイテムのプロパティに一致する文字列が発生する必要があります。`PropertyName` 単純型は、サポートされるプロパティを定義します。

      アイテムの body プロパティに `ItemHasRegularExpressionMatch` ルールを指定する場合、正規表現でさらに本文をフィルター処理し、アイテムの本文全体を返さないようにします。 . * などの正規表現を使用してアイテムの本文全体を取得しても、期待する結果が返されない場合があります。 この場合、代わりに `Body.getAsync` メソッドを使用して本文全体を取得します。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。

      \[[API set: Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      // The following example shows how to access the array of matches for the
      // regular expression rule elements `fruits` and `veggies`, which are
      // specified in the manifest.
      var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();
      var fruits = selectedMatches.fruits;
      var veggies = selectedMatches.veggies;
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml
      var matches = Office.context.mailbox.item.getSelectedRegExMatches();
      if (matches) {
          console.log(matches);
      }
      else {
          console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
      }
      ```
    name: getSelectedRegExMatches()
    fullName: getSelectedRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRegExMatches(): any;'
      return:
        type:
          - any
        description: マニフェスト XML ファイルで定義された正規表現に一致する文字列の配列が格納されたオブジェクト。各配列の名前は、一致する `ItemHasRegularExpressionMatch` ルールの `RegExName` 属性、または一致する `ItemHasKnownEntity` ルールの `FilterName` 属性の対応する値と等しくなります。
  - uid: 'outlook!Office.MessageRead#internetMessageId:member'
    summary: 電子メールメッセージのインターネットメッセージ識別子を取得します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml
      console.log(`Internet message ID: ${Office.context.mailbox.item.internetMessageId}`);
      ```
    name: internetMessageId
    fullName: internetMessageId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'internetMessageId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemClass:member'
    summary: |-
      選択されたアイテムの Exchange Web サービスのアイテム クラスを取得します。

      既定のメッセージクラスを拡張するカスタムメッセージクラス (たとえば、カスタム予定表メッセージクラスなど) を作成できます。`IPM.Appointment.Contoso`<!-- -->.
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      `itemClass` プロパティには、選択したアイテムのメッセージ クラスを指定します。次に、メッセージまたは予定アイテムの既定のメッセージ クラスを示します。

      <table> <tr> <th>型</th> <th>説明</th> <th>Item クラス</th> </tr> <tr> <td>予定アイテム</td> <td>これらは、アイテムクラス IPM の予定表アイテムです。予定または IPM.予定発生。</td> <td>IPM.予定、IPM.予定の発生</td> </tr> <tr> <td>メッセージ アイテム</td> <td>これには、既定のメッセージクラス IPM を持つ電子メールメッセージが含まれます。注、会議出席依頼、返信、および取り消しは、IPM を使用しています。基本メッセージクラスとしての会議をスケジュールします。</td> <td>IPM.注、IPM.会議の出席依頼、IPM.Neg、IPM.Schedule、IPM.予約します。会議の予約を取り消します。</td> </tr> </table>

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-class-read.yaml
      console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);
      ```
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemId:member'
    summary: |-
      現在のアイテムの[Exchange Web サービスのアイテム識別子](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)を取得します。

      この `itemId` プロパティは、新規作成モードでは使用できません。 アイテム識別子が必要な場合は、このメソッドを使用して `saveAsync` アイテムをストアに保存することができます。これにより、コールバック関数のパラメーターにアイテム識別子が返され `asyncResult.value` ます。

      **注**: プロパティによって返される識別子 `itemId` は、 [Exchange Web サービスのアイテム識別子](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)と同じです。<!-- -->. `itemId` プロパティは、Outlook Entry ID または Outlook REST API で使用される ID と同一ではありません。 この値を使用して REST API 呼び出しを行う前に、次のようにして変換する必要があります。`Office.context.mailbox.convertToRestId`<!-- -->. 詳細については、「outlook[アドインからの OUTLOOK REST api の使用](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id)」を参照してください。<!-- -->.
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // The following code checks for the presence of an item
      // identifier. If the `itemId` property returns `null` or
      // `undefined`, it saves the item to the store and gets the
      // item identifier from the asynchronous result.
      // **Important**: `saveAsync` was introduced with requirement set 1.3
      // so you can't get the `itemId` in Compose mode in earlier sets.
      var itemId = Office.context.mailbox.item.itemId;
      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }
      ```
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemType:member'
    summary: |-
      インスタンスが表しているアイテムの種類を取得します。

      プロパティは、 `itemType` 列挙値の1つを返し `ItemType` ます。これは、アイテムのオブジェクトインスタンスがメッセージと予定のどちらであるかを示します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml
      console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.MessageRead#itemType~0:complex'
  - uid: 'outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)'
    summary: |-
      選択されたアイテムのこのアドインのカスタム プロパティを非同期に読み込みます。

      カスタム プロパティは、アプリケーションごと、アイテムごとのキーと値のペアとして格納されます。このメソッドは、コールバックで `CustomProperties` オブジェクトを返します。このオブジェクトは、現在のアイテムおよび現在のアドインに固有のカスタム プロパティにアクセスするためのメソッドを提供します。カスタム プロパティは、アイテム上では暗号化されません。そのため、セキュリティ保護記憶域として使用するべきではありません。

      カスタム プロパティは `asyncResult.value` プロパティの `CustomProperties` オブジェクトとして指定されます。 このオブジェクトは、アイテムからカスタム プロパティを取得、設定、削除し、サーバーに設定し直すカスタム プロパティへの変更を保存するために使用できます。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: メソッドが完了すると、パラメーターに渡された関数 `callback` が、型の1つのパラメーターで呼び出されます。`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageRead#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: 省略可能です。 開発者は、コールバック関数でアクセスする任意のオブジェクトを指定できます。 このオブジェクトには、コールバック関数の `asyncResult.asyncContext` プロパティによってアクセスすることができます。
          type:
            - any
  - uid: 'outlook!Office.MessageRead#location:member'
    summary: |-
      会議出席依頼の場所を取得します。

      `location` プロパティは、予定の場所を格納した文字列を返します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-location-read.yaml
      console.log(`Appointment location: ${Office.context.mailbox.item.location}`);
      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#normalizedSubject:member'
    summary: |-
      すべてのプレフィックスが削除されたアイテムの件名を取得します (RE: および早送りを含む)。

      プロパティは、 `normalizedSubject` アイテムの件名を任意の標準プレフィックス (RE: や FW:) など) で取得します。電子メールプログラムによって追加されます。 これらのプレフィックスが付いたままの状態でアイテムの件名を取得するには、`subject` プロパティを使用します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml
      console.log(`Normalized subject: ${Office.context.mailbox.item.normalizedSubject}`);
      ```
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#notificationMessages:member'
    summary: |-
      アイテムの通知メッセージを取得します。

      \[[API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.MessageRead#recurrence:member'
    summary: |-
      予定の定期的なパターンを取得します。 会議出席依頼の定期的なパターンを取得します。 予定アイテムの読み取りおよび作成モード。 会議出席依頼アイテムの閲覧モード。

      この `recurrence` プロパティは、 `Recurrence` アイテムが series または series 内のインスタンスの場合、定期的な予定または会議出席依頼のオブジェクトを返します。 `null`は、単一の予定および1つの予定の会議出席依頼に対して返されます。 `undefined`は、会議出席依頼ではないメッセージに対して返されます。

      **注**: 会議出席依頼には、次の itemclass 値があります。`IPM.Schedule.Meeting.Request`<!-- -->.

      **注**: オブジェクトが null の場合は、その `recurrence` オブジェクトが単一の予定または1つの予定の会議出席依頼であり、データ系列の一部ではないことを示します。

      \[[API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-recurrence-read.yaml
      var recurrence = Office.context.mailbox.item.recurrence;

      if (recurrence === undefined) {
        console.log("This item is a message but not a meeting request.");
      } else if (recurrence === null) {
        console.log("This is a single appointment.");
      } else {
        console.log(JSON.stringify(recurrence));
      }
      ```
    name: recurrence
    fullName: recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - 'outlook!Office.Recurrence:interface'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync:member(1)'
    summary: |-
      サポートされているイベントの種類のイベント ハンドラーを削除します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Item object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item#events)を参照してください。

      \[[API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを取り消すイベント。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~0:complex'
        - id: options
          description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync:member(2)'
    summary: |-
      サポートされているイベントの種類のイベント ハンドラーを削除します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Item object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item#events)を参照してください。

      \[[API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを取り消すイベント。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~2:complex'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageRead#sender:member'
    summary: |-
      電子メール メッセージの送信者の電子メール アドレスを取得します。

      メッセージが代理人から送信された場合を除き、`from` プロパティと `sender` プロパティは同一人物を表します。 その場合、プロパティは `from` 委任者を表し、 `sender` プロパティはデリゲートを表します。

      **注**: `recipientType` `EmailAddressDetails` プロパティ内のオブジェクトのプロパティ `sender` は未定義です。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml
      var msgSender = Office.context.mailbox.item.sender;
      console.log("Sender: " + msgSender.displayName + " (" + msgSender.emailAddress + ")");
      ```
    name: sender
    fullName: sender
    langs:
      - typeScript
    type: property
    syntax:
      content: 'sender: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.MessageRead#seriesId:member'
    summary: |-
      インスタンスが属する系列の id を取得します。

      Web 上の Outlook およびデスクトップクライアントでは、は、 `seriesId` このアイテムが属する親 (シリーズ) アイテムの Exchange Web サービス (EWS) ID を返します。 ただし、iOS と Android では、は `seriesId` 親アイテムの REST ID を返します。

      **注**: プロパティによって返される識別子 `seriesId` は、Exchange Web サービスのアイテム識別子と同じです。 `seriesId`プロパティが OUTLOOK REST API で使用される Outlook id と同じではありません。 この値を使用して REST API 呼び出しを行う前に、次のようにして変換する必要があります。`Office.context.mailbox.convertToRestId`<!-- -->. 詳細については、「outlook[アドインからの OUTLOOK REST api の使用](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)」を参照してください。<!-- -->.

      `seriesId`このプロパティは、 `null` 単一の予定、系列のアイテム、会議出席依頼などの親アイテムを持たないアイテムに対して、 `undefined` 会議出席依頼以外のアイテムに対して返されます。

      \[[API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml
      var seriesId = Office.context.mailbox.item.seriesId;

      if (seriesId === undefined) {
        console.log("This is a message that's not a meeting request.");
      } else if (seriesId === null) {
        console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
      } else {
        console.log("This is an instance belonging to series with ID " + seriesId);
      }
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#start:member'
    summary: |-
      予定が開始される日付と時刻を取得します。

      `start`プロパティは、 `Date` 協定世界時 (UTC) の日付と時刻の値として表されるオブジェクトです。 メソッドを使用すると、 `convertToLocalClientTime` クライアントのローカルの日付と時刻に値を変換できます。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-start-read.yaml
      console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);
      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#subject:member'
    summary: |-
      アイテムの subject フィールドに表示される説明を取得します。

      `subject` プロパティは、電子メール サーバーによって送信されたアイテムの件名全体を取得または設定します。

      `subject` プロパティは文字列を返します。 プロパティを使用し `normalizedSubject` て、"RE:" や "FW:" のような先頭にあるプレフィックスを除いた、件名を取得します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-subject-read.yaml
      console.log(`Subject: ${Office.context.mailbox.item.subject}`);
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#to:member'
    summary: |-
      メッセージの To 行にある受信者へのアクセスを提供します。 オブジェクトの種類とアクセスのレベルは、現在のアイテムのモードによって異なります。

      `to` プロパティは、メッセージの To 行にある各受信者について、`EmailAddressDetails` オブジェクトを含む配列を返します。 既定では、コレクションは最大 100 人のメンバーに制限されています。 ただし、Outlook on the web では最大20メンバーを取得できますが、Windows と Mac では最大500メンバーを取得することができます。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: メッセージの読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml
      var msgTo = Office.context.mailbox.item.to;
      console.log("Message sent to:");
      for (var i = 0; i < msgTo.length; i++) {
        console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
      }
      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#to~0:complex'
references:
  - uid: 'outlook!Office.Message:interface'
    name: Message
  - uid: 'outlook!Office.ItemRead:interface'
    name: ItemRead
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#attachments~0:complex'
    name: 'AttachmentDetails[]'
    fullName: 'Office.AttachmentDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.MessageRead#cc~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.MessageRead#displayReplyAllForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.MessageRead#displayReplyForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.EmailAddressDetails:interface'
    name: EmailAddressDetails
  - uid: 'outlook!Office.Entities:interface'
    name: Entities
  - uid: 'outlook!Office.MessageRead#getEntitiesByType~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.MessageRead#getEntitiesByType~1:complex'
    name: MailboxEnums.EntityType | string
    fullName: Office.MailboxEnums.EntityType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.EntityType:enum'
        name: MailboxEnums.EntityType
        fullName: Office.MailboxEnums.EntityType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#getFilteredEntitiesByName~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.MessageRead#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.Recurrence:interface'
    name: Recurrence
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#to~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'