### YamlMime:UniversalReference
ms.openlocfilehash: b52c294c7c7b30390622fec52183f8d455e9060d
ms.sourcegitcommit: b0b614f5315ab2e5c1e0ea51c687498f87684a07
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/15/2019
ms.locfileid: "30054983"
items:
- uid: outlook.Office.AttachmentContent
  summary: >-
    <span data-ttu-id="b935a-101">メッセージアイテムまたは予定アイテムの添付ファイルのコンテンツを表します。</span><span class="sxs-lookup"><span data-stu-id="b935a-101">Represents the content of an attachment on a message or appointment item.</span></span>


    <span data-ttu-id="b935a-102">\[[API セット: メールボックスのプレビュー](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b935a-102">\[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]</span></span>
  remarks: <table> <tr><td>[<span data-ttu-id="b935a-103">最小限のアクセス許可レベル</span><span class="sxs-lookup"><span data-stu-id="b935a-103">Minimum permission level</span></span>](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td><span data-ttu-id="b935a-104">ReadItem</span><span class="sxs-lookup"><span data-stu-id="b935a-104">ReadItem</span></span></td></tr> <tr><td>[<span data-ttu-id="b935a-105">適用可能な Outlook のモード</span><span class="sxs-lookup"><span data-stu-id="b935a-105">Applicable Outlook mode</span></span>](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td><span data-ttu-id="b935a-106">新規作成または読み取り</span><span class="sxs-lookup"><span data-stu-id="b935a-106">Compose or Read</span></span></td></tr> </table>
  isPreview: true
  name: Office.AttachmentContent
  fullName: Office.AttachmentContent
  langs:
  - typeScript
  type: interface
  package: outlook
  children:
  - outlook.Office.AttachmentContent.content
  - outlook.Office.AttachmentContent.format
- uid: outlook.Office.AttachmentContent.content
  summary: <span data-ttu-id="b935a-107">文字列としての添付ファイルの内容。</span><span class="sxs-lookup"><span data-stu-id="b935a-107">The content of an attachment as a string.</span></span>
  isPreview: true
  name: content
  fullName: content
  langs:
  - typeScript
  type: property
  syntax:
    content: 'content: string;'
    return:
      type:
      - string
- uid: outlook.Office.AttachmentContent.format
  summary: >-
    <span data-ttu-id="b935a-108">添付ファイルのコンテンツに使用する文字列形式。</span><span class="sxs-lookup"><span data-stu-id="b935a-108">The string format to use for an attachment's content.</span></span>


    <span data-ttu-id="b935a-109">添付ファイルの場合、書式設定は base64 でエンコードされた文字列です。</span><span class="sxs-lookup"><span data-stu-id="b935a-109">For file attachments, the formatting is a base64-encoded string.</span></span>


    <span data-ttu-id="b935a-110">メッセージを表すアイテムの添付ファイルの場合、書式設定は .eml 形式のファイルを表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b935a-110">For item attachments that represent messages, the formatting is a string representing an .eml formatted file.</span></span>


    <span data-ttu-id="b935a-111">アイテムの添付ファイルが予定表アイテムを表す場合、書式設定は icalendar ファイルを表す文字列になります。</span><span class="sxs-lookup"><span data-stu-id="b935a-111">For item attachments that represent calendar items, the formatting is a string representing an .icalendar file.</span></span>


    <span data-ttu-id="b935a-112">クラウド添付ファイルの場合、書式設定は URL 文字列です。</span><span class="sxs-lookup"><span data-stu-id="b935a-112">For cloud attachments, the formatting is a URL string.</span></span>
  isPreview: true
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'format: MailboxEnums.AttachmentContentFormat;'
    return:
      type:
      - MailboxEnums.AttachmentContentFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b935a-113\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"b935a-113\">Examples</span></span>\n\n```javascript\nvar item = Office.context.mailbox.item;\nvar listOfAttachments = [];\nitem.getAttachmentsAsync(callback);\n\nfunction callback(result) {\n    if (result.value.length > 0) {\n        for (i = 0 ; i < result.value.length ; i++) {\n            var options = {asyncContext: {type: result.value[i].attachmentType}};\n            getAttachmentContentAsync(result.value[i].id, options, handleAttachmentsCallback);\n        }\n    }\n}\n\nfunction handleAttachmentsCallback(result) {\n    // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.\n    if (result.format === Office.MailboxEnums.AttachmentContentFormat.Base64) {\n        // Handle file attachment.\n    } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Eml) {\n        // Handle email item attachment.\n    } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.ICalendar) {\n        // Handle .icalender attachment.\n    } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Url) {\n        // Handle cloud attachment.\n    } else {\n        // Handle attachment formats that are not supported.\n    }\n}\n```"
