### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Mailbox:interface'
    summary: |-
      Microsoft Outlook アドインオブジェクトモデルへのアクセスを提供します。

      主要なプロパティ:

      - `diagnostics`<!-- -->: Outlook アドインに診断情報を提供します。

      - `item`<!-- -->: Outlook アドインのメッセージや予定にアクセスするためのメソッドとプロパティを提供します。

      - `userProfile`<!-- -->: Outlook アドインのユーザーに関する情報を提供します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`Restricted`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り
    name: Office.Mailbox
    fullName: Office.Mailbox
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Mailbox#addHandlerAsync:member(1)'
      - 'outlook!Office.Mailbox#addHandlerAsync:member(2)'
      - 'outlook!Office.Mailbox#convertToEwsId:member(1)'
      - 'outlook!Office.Mailbox#convertToLocalClientTime:member(1)'
      - 'outlook!Office.Mailbox#convertToRestId:member(1)'
      - 'outlook!Office.Mailbox#convertToUtcClientTime:member(1)'
      - 'outlook!Office.Mailbox#diagnostics:member'
      - 'outlook!Office.Mailbox#displayAppointmentForm:member(1)'
      - 'outlook!Office.Mailbox#displayAppointmentFormAsync:member(1)'
      - 'outlook!Office.Mailbox#displayMessageForm:member(1)'
      - 'outlook!Office.Mailbox#displayMessageFormAsync:member(1)'
      - 'outlook!Office.Mailbox#displayNewAppointmentForm:member(1)'
      - 'outlook!Office.Mailbox#displayNewAppointmentFormAsync:member(1)'
      - 'outlook!Office.Mailbox#displayNewMessageForm:member(1)'
      - 'outlook!Office.Mailbox#displayNewMessageFormAsync:member(1)'
      - 'outlook!Office.Mailbox#ewsUrl:member'
      - 'outlook!Office.Mailbox#getCallbackTokenAsync:member(1)'
      - 'outlook!Office.Mailbox#getCallbackTokenAsync:member(2)'
      - 'outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)'
      - 'outlook!Office.Mailbox#item:member'
      - 'outlook!Office.Mailbox#makeEwsRequestAsync:member(1)'
      - 'outlook!Office.Mailbox#masterCategories:member'
      - 'outlook!Office.Mailbox#removeHandlerAsync:member(1)'
      - 'outlook!Office.Mailbox#removeHandlerAsync:member(2)'
      - 'outlook!Office.Mailbox#restUrl:member'
      - 'outlook!Office.Mailbox#userProfile:member'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync:member(1)'
    summary: |-
      サポートされているイベントのイベント ハンドラーを追加します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Mailbox object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox#events)を参照してください。

      \[[API set: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを呼び出す必要のあるイベント。
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~0:complex'
        - id: handler
          description: イベントを処理する関数。 関数は、オブジェクト リテラルである単一パラメーターを受け入れる必要があります。 パラメーターの type プロパティは、に渡されるパラメーターと一致します。 `eventType``addHandlerAsync`<!-- -->.
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~1:complex'
        - id: options
          description: 省略可能です。 コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が、型の1つのパラメーターで呼び出されます。`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~2:complex'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync:member(2)'
    summary: |-
      サポートされているイベントのイベント ハンドラーを追加します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Mailbox object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox#events)を参照してください。

      \[[API set: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      Office.initialize = function (reason) {
          $(document).ready(function () {
              Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, loadNewItem, function (result) {
              if (result.status === Office.AsyncResultStatus.Failed) {
                      // Handle error.
                  }
              });
          });
      };

      function loadNewItem(eventArgs) {
          // Load the properties of the newly selected item.
          loadProps(Office.context.mailbox.item);
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを呼び出す必要のあるイベント。
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~3:complex'
        - id: handler
          description: イベントを処理する関数。 関数は、オブジェクト リテラルである単一パラメーターを受け入れる必要があります。 パラメーターの type プロパティは、に渡されるパラメーターと一致します。 `eventType``addHandlerAsync`<!-- -->.
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~4:complex'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が、型の1つのパラメーターで呼び出されます。`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~5:complex'
  - uid: 'outlook!Office.Mailbox#convertToEwsId:member(1)'
    summary: |-
      REST 形式のアイテム ID を EWS 形式に変換します。

      REST API (Outlook Mail API や Microsoft Graph など) で取得されたアイテム ID は、Exchange Web サービス (EWS) に使用される形式とは異なる形式を使用します。 メソッドは、REST 形式の ID を EWS 用の適切な形式に変換します。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。

      \[[API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`Restricted`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml
      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);
      var ewsId = Office.context.mailbox.item.itemId;
      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);

      console.log("REST URL: " + Office.context.mailbox.restUrl);
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("REST item ID: " + restId);

      var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("EWS ID (from REST ID): " + ewsId2);
      ```
    name: 'convertToEwsId(itemId, restVersion)'
    fullName: 'convertToEwsId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: Outlook REST Api 用に書式設定されたアイテム ID。
          type:
            - string
        - id: restVersion
          description: アイテム ID の取得に使用された Outlook REST API のバージョンを示す値。
          type:
            - 'outlook!Office.Mailbox#convertToEwsId~0:complex'
  - uid: 'outlook!Office.Mailbox#convertToLocalClientTime:member(1)'
    summary: |-
      クライアントのローカル時間で時間情報が含まれている辞書を取得します。

      Web またはデスクトップクライアント上の Outlook 用メールアプリで使用される日付と時刻は、異なるタイムゾーンを使用することができます。 Outlook では、クライアントコンピューターのタイムゾーンが使用されます。Outlook on the web では、Exchange 管理センター (EAC) で設定されているタイムゾーンが使用されます。 日付と時刻の値を処理して、ユーザーインターフェイスに表示される値が、ユーザーが期待するタイムゾーンに常に一致するようにする必要があります。

      メールアプリがデスクトップクライアント上の Outlook で実行されている場合、このメソッドは、 `convertToLocalClientTime` クライアントコンピューターのタイムゾーンに設定された値を持つ dictionary オブジェクトを返します。 メールアプリが web 上の Outlook で実行されている場合、このメソッドは、 `convertToLocalClientTime` EAC で指定されたタイムゾーンに設定された値を持つ dictionary オブジェクトを返します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り
    name: convertToLocalClientTime(timeValue)
    fullName: convertToLocalClientTime(timeValue)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
      return:
        type:
          - 'outlook!Office.LocalClientTime:interface'
        description: ''
      parameters:
        - id: timeValue
          description: '`Date` オブジェクト。'
          type:
            - '!Date:interface'
  - uid: 'outlook!Office.Mailbox#convertToRestId:member(1)'
    summary: |-
      EWS 形式のアイテム ID を REST 形式に変換します。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。

      \[[API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`Restricted`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      EWS またはプロパティを使用して取得したアイテム Id は、 `itemId` REST api で使用される形式 ( [OUTLOOK メール API](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations)や[Microsoft Graph](https://graph.microsoft.io/)など) とは異なる形式を使用します。<!-- -->. メソッドは、EWS 形式の ID を REST 用の適切な形式に変換します。

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml
      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {
          var ewsId = Office.context.mailbox.item.itemId;
          var token = result.value;
          var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
          var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                  
          var xhr = new XMLHttpRequest();
          xhr.open('GET', getMessageUrl);
          xhr.setRequestHeader("Authorization", "Bearer " + token);
          xhr.onload = function (e) {
              console.log(this.response);
          }
          xhr.send();
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml
      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);
      var ewsId = Office.context.mailbox.item.itemId;
      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);

      console.log("REST URL: " + Office.context.mailbox.restUrl);
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("REST item ID: " + restId);

      var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("EWS ID (from REST ID): " + ewsId2);
      ```
    name: 'convertToRestId(itemId, restVersion)'
    fullName: 'convertToRestId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: Exchange Web サービス (EWS) 形式のアイテム ID
          type:
            - string
        - id: restVersion
          description: 変換後の ID を使用する Outlook REST API のバージョンを示す値。
          type:
            - 'outlook!Office.Mailbox#convertToRestId~0:complex'
  - uid: 'outlook!Office.Mailbox#convertToUtcClientTime:member(1)'
    summary: |-
      `Date`時刻情報を含むディクショナリからオブジェクトを取得します。

      このメソッドは、ローカルの `convertToUtcClientTime` 日付と時刻を含むディクショナリを、 `Date` ローカルの日付と時刻に対応する適切な値を持つオブジェクトに変換します。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Represents 3:37 PM PDT on Monday, August 26, 2019.
      var input = {
          date: 26,
          hours: 15,
          milliseconds: 2,
          minutes: 37,
          month: 7,
          seconds: 2,
          timezoneOffset: -420,
          year: 2019
      };

      // result should be a Date object.
      var result = Office.context.mailbox.convertToUtcClientTime(input);

      // Output should be "2019-08-26T22:37:02.002Z".
      console.log(result.toISOString());
      ```
    name: convertToUtcClientTime(input)
    fullName: convertToUtcClientTime(input)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
      return:
        type:
          - '!Date:interface'
        description: 時間が UTC で表現された日付オブジェクト。
      parameters:
        - id: input
          description: 変換するローカル時刻の値。
          type:
            - 'outlook!Office.LocalClientTime:interface'
  - uid: 'outlook!Office.Mailbox#diagnostics:member'
    summary: |-
      Outlook アドインに診断情報を提供します。

      次のメンバーが含まれています。

      - `hostName`(string): ホストアプリケーションの名前を表す文字列。 次のいずれかの値である必要があります。`Outlook`<!-- -->, `OutlookWebApp`<!-- -->, `OutlookIOS`<!-- -->、または`OutlookAndroid`<!-- -->. **注**: デスクトップクライアント (Windows および Mac) の outlook では、"outlook" 値が返されます。

      - `hostVersion`(string): ホストアプリケーションまたは Exchange サーバーのバージョン (例: "15.0.468.0") を表す文字列。 メールアドインがデスクトップまたはモバイルクライアントの Outlook で実行されている場合、この `hostVersion` プロパティはホストアプリケーションのバージョン (outlook) を返します。 Web 上の Outlook では、このプロパティは Exchange サーバーのバージョンを返します。

      - `OWAView`( `MailboxEnums.OWAView` または文字列): web 上の Outlook の現在のビューを表す列挙 (または文字列リテラル)。 ホストアプリケーションが web 上の Outlook 上にない場合、このプロパティにアクセスすると undefined が返されます。 Outlook on the web には3つのビューがあります (画面が狭くなったときに表示されます。画面の幅が広い場合は表示されます)。画面の幅に対応して表示される場合は表示され、画面の `OneColumn` `TwoColumns` `ThreeColumns` 幅に対応して表示可能な列数。

      詳細については[、「Office. Diagnostics](xref:outlook!Office.Diagnostics:interface) 」を参照してください。<!-- -->.
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: Diagnostics;'
      return:
        type:
          - 'outlook!Office.Diagnostics:interface'
  - uid: 'outlook!Office.Mailbox#displayAppointmentForm:member(1)'
    summary: |-
      既存の予定を表示します。

      `displayAppointmentForm` メソッドは、デスクトップ上の新しいウィンドウやモバイル デバイス上のダイアログ ボックスに既存の予定を開きます。

      Outlook on the Mac では、このメソッドを使用して、定期的なアイテムの一部ではない単一の予定を表示したり、定期的なアイテムのマスター予定を表示したりできます。 ただし、定期的なアイテムのインスタンスのプロパティ (アイテム ID を含む) にアクセスできないため、一連のインスタンスを表示することはできません。

      Web 上の Outlook では、フォームの本文が32K 文字以下の場合にのみ、このメソッドは指定されたフォームを開きます。

      指定したアイテム識別子が既存の予定を識別しない場合は、クライアントコンピューターまたはデバイスで空のウィンドウが開き、エラーメッセージは返されません。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-existing-appointment.yaml
      var itemId = $("#itemId").val();
      Office.context.mailbox.displayAppointmentForm(itemId);
      ```
    name: displayAppointmentForm(itemId)
    fullName: displayAppointmentForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayAppointmentForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 既存の予定の Exchange Web サービス (EWS) 識別子。
          type:
            - string
  - uid: 'outlook!Office.Mailbox#displayAppointmentFormAsync:member(1)'
    summary: |-
      既存の予定を表示します。

      `displayAppointmentFormAsync` メソッドは、デスクトップ上の新しいウィンドウやモバイル デバイス上のダイアログ ボックスに既存の予定を開きます。

      Outlook on the Mac では、このメソッドを使用して、定期的なアイテムの一部ではない単一の予定を表示したり、定期的なアイテムのマスター予定を表示したりできます。 ただし、定期的なアイテムのインスタンスのプロパティ (アイテム ID を含む) にアクセスできないため、一連のインスタンスを表示することはできません。

      Web 上の Outlook では、フォームの本文が32K 文字以下の場合にのみ、このメソッドは指定されたフォームを開きます。

      指定したアイテム識別子が既存の予定を識別しない場合は、クライアントコンピューターまたはデバイスで空のウィンドウが開き、エラーメッセージは返されません。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。

      \[[API セット: メールボックスのプレビュー](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-existing-appointment.yaml
      var itemId = $("#itemId").val();

      // The async version will return error 9049 if the item is not found.
      // The async version is only available in preview.
      Office.context.mailbox.displayAppointmentFormAsync(itemId, function(asyncResult) {
        console.log("Result: " + JSON.stringify(asyncResult));
      });
      ```
    isPreview: true
    name: 'displayAppointmentFormAsync(itemId, options, callback)'
    fullName: 'displayAppointmentFormAsync(itemId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayAppointmentFormAsync(itemId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 既存の予定の Exchange Web サービス (EWS) 識別子。
          type:
            - string
        - id: options
          description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.Mailbox#displayAppointmentFormAsync~0:complex'
  - uid: 'outlook!Office.Mailbox#displayMessageForm:member(1)'
    summary: |-
      既存のメッセージを表示します。

      `displayMessageForm` メソッドは、デスクトップ上の新しいウィンドウやモバイル デバイス上のダイアログ ボックスに既存のメッセージを開きます。

      Web 上の Outlook では、フォームの本文が32K 文字以下の場合にのみ、このメソッドは指定されたフォームを開きます。

      指定したアイテム識別子が既存のメッセージを識別しない場合、クライアントコンピューターにメッセージは表示されず、エラーメッセージは返されません。

      予定を表す itemId を使用しないでください `displayMessageForm` 。 既存の `displayAppointmentForm` 予定を表示したり、新しい予定を作成するためのフォームを表示したりするには、メソッドを使用し `displayNewAppointmentForm` ます。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-existing-message.yaml
      var itemId = $("#itemId").val();
      Office.context.mailbox.displayMessageForm(itemId);
      ```
    name: displayMessageForm(itemId)
    fullName: displayMessageForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayMessageForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 既存のメッセージの Exchange Web サービス (EWS) 識別子。
          type:
            - string
  - uid: 'outlook!Office.Mailbox#displayMessageFormAsync:member(1)'
    summary: |-
      既存のメッセージを表示します。

      `displayMessageFormAsync` メソッドは、デスクトップ上の新しいウィンドウやモバイル デバイス上のダイアログ ボックスに既存のメッセージを開きます。

      Web 上の Outlook では、フォームの本文が32K 文字以下の場合にのみ、このメソッドは指定されたフォームを開きます。

      指定したアイテム識別子が既存のメッセージを識別しない場合、クライアントコンピューターにメッセージは表示されず、エラーメッセージは返されません。

      `displayMessageForm`予定を表す itemId で or メソッドを使用しないでください `displayMessageFormAsync` 。 既存の `displayAppointmentForm` `displayAppointmentFormAsync` 予定を表示したり、 `displayNewAppointmentForm` 新しい予定を作成するためのフォームを表示したりするには、またはメソッドを使用し `displayNewAppointmentFormAsync` ます。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。

      \[[API セット: メールボックスのプレビュー](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-existing-message.yaml
      var itemId = $("#itemId").val();

      // The async version will return error 9049 if the item is not found.
      // The async version is only available in preview.
      Office.context.mailbox.displayAppointmentFormAsync(itemId, function (asyncResult) {
       console.log("Result: " + JSON.stringify(asyncResult));
      });
      ```
    isPreview: true
    name: 'displayMessageFormAsync(itemId, options, callback)'
    fullName: 'displayMessageFormAsync(itemId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayMessageFormAsync(itemId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 既存のメッセージの Exchange Web サービス (EWS) 識別子。
          type:
            - string
        - id: options
          description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.Mailbox#displayMessageFormAsync~0:complex'
  - uid: 'outlook!Office.Mailbox#displayNewAppointmentForm:member(1)'
    summary: |-
      新しい予定を作成するためのフォームを表示します。

      `displayNewAppointmentForm` メソッドを使用すると、ユーザーが新しい予定または会議を作成できるフォームが開きます。パラメーターを指定すると、予定のフォーム フィールドにパラメーターの内容が自動的に設定されます。

      Web 上の Outlook では、このメソッドは常に出席者フィールドを含むフォームを表示します。 入力引数として出席者を指定しないと、このメソッドにより **[保存]** ボタンのあるフォームが表示されます。 出席者を指定した場合には、フォームにその出席者と **[送信]** ボタンが表示されます。

      Outlook リッチクライアントおよび Outlook RT で、の出席者またはリソースを`requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->、または `resources` パラメーターを指定すると、[**送信**] ボタンを含む会議フォームが表示されます。 受信者を指定しない場合、このメソッドは [ ** &amp; 閉じる**] ボタンの付いた予定フォームを表示します。

      パラメーターのいずれかが指定のサイズ制限を超える場合、または不明なパラメーター名が指定されている場合は、例外がスローされます。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-new-appointment.yaml
      var start = new Date();
      var end = new Date();
      end.setHours(start.getHours() + 1);

      Office.context.mailbox.displayNewAppointmentForm({
        requiredAttendees: ["bob@contoso.com"],
        optionalAttendees: ["sam@contoso.com"],
        start: start,
        end: end,
        location: "Home",
        subject: "meeting",
        resources: ["projector@contoso.com"],
        body: "Hello World!"
      });
      ```
    name: displayNewAppointmentForm(parameters)
    fullName: displayNewAppointmentForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: '`AppointmentForm`新しい予定を記述します。 すべてのプロパティは省略可能です。'
          type:
            - 'outlook!Office.AppointmentForm:interface'
  - uid: 'outlook!Office.Mailbox#displayNewAppointmentFormAsync:member(1)'
    summary: |-
      新しい予定を作成するためのフォームを表示します。

      `displayNewAppointmentFormAsync` メソッドを使用すると、ユーザーが新しい予定または会議を作成できるフォームが開きます。パラメーターを指定すると、予定のフォーム フィールドにパラメーターの内容が自動的に設定されます。

      Web 上の Outlook では、このメソッドは常に出席者フィールドを含むフォームを表示します。 入力引数として出席者を指定しないと、このメソッドにより **[保存]** ボタンのあるフォームが表示されます。 出席者を指定した場合には、フォームにその出席者と **[送信]** ボタンが表示されます。

      Outlook リッチクライアントおよび Outlook RT で、の出席者またはリソースを`requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->、または `resources` パラメーターを指定すると、[**送信**] ボタンを含む会議フォームが表示されます。 受信者を指定しない場合、このメソッドは [ ** &amp; 閉じる**] ボタンの付いた予定フォームを表示します。

      パラメーターのいずれかが指定のサイズ制限を超える場合、または不明なパラメーター名が指定されている場合は、例外がスローされます。

      **注**: このメソッドは、iOS または Android の Outlook ではサポートされていません。

      \[[API セット: メールボックスのプレビュー](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-new-appointment.yaml
      var start = new Date();
      var end = new Date();
      end.setHours(start.getHours() + 1);

      // The async version is only available in preview, and provides
      // a callback when the new appointment form has been created.
      Office.context.mailbox.displayNewAppointmentFormAsync(
        {
          requiredAttendees: ["bob@contoso.com"],
          optionalAttendees: ["sam@contoso.com"],
          start: start,
          end: end,
          location: "Home",
          subject: "meeting",
          resources: ["projector@contoso.com"],
          body: "Hello World!"
        },
        function(asyncResult) {
          console.log(JSON.stringify(asyncResult));
        }
      );
      ```
    isPreview: true
    name: 'displayNewAppointmentFormAsync(parameters, options, callback)'
    fullName: 'displayNewAppointmentFormAsync(parameters, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewAppointmentFormAsync(parameters: AppointmentForm, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: '`AppointmentForm`新しい予定を記述します。 すべてのプロパティは省略可能です。'
          type:
            - 'outlook!Office.AppointmentForm:interface'
        - id: options
          description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.Mailbox#displayNewAppointmentFormAsync~0:complex'
  - uid: 'outlook!Office.Mailbox#displayNewMessageForm:member(1)'
    summary: |-
      新しいメッセージを作成するためのフォームを表示します。

      The `displayNewMessageForm` method opens a form that enables the user to create a new message. If parameters are specified, the message form fields are automatically populated with the contents of the parameters.

      パラメータのいずれかが指定されたサイズ制限を超えた場合、または不明なパラメータ名が指定された場合には、例外がスローされます。

      \[[API set: Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-new-message.yaml
      Office.context.mailbox.displayNewMessageForm({
        toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
        ccRecipients: ["sam@contoso.com"],
        subject: "Outlook add-ins are cool!",
        htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
        attachments: [
          {
            type: "file",
            name: "image.png",
            url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
            isInline: true
          }
        ]
      });
      ```
    name: displayNewMessageForm(parameters)
    fullName: displayNewMessageForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewMessageForm(parameters: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: |-
            新規作成フォームでユーザーに対して入力されるすべての値を含むディクショナリ。 すべてのパラメーターは省略可能です。

            `toRecipients`<!-- -->: 電子メールアドレスを含む文字列の配列、または宛先行の各受信者の[Emailaddressdetails](xref:outlook!Office.EmailAddressDetails:interface)オブジェクトを含む配列。 配列の上限は 100 エントリです。

            `ccRecipients`<!-- -->: 電子メールアドレスを含む文字列の配列、または Cc 行の各受信者の[Emailaddressdetails](xref:outlook!Office.EmailAddressDetails:interface)オブジェクトを含む配列。 配列の上限は 100 エントリです。

            `bccRecipients`<!-- -->: メールアドレスを含む文字列の配列、または Bcc 行の各受信者の[Emailaddressdetails](xref:outlook!Office.EmailAddressDetails:interface)オブジェクトを含む配列。 配列の上限は 100 エントリです。

            `subject`<!-- -->: メッセージの件名を含む文字列。 文字列は最大 255 文字に制限されます。

            `htmlBody`<!-- -->: メッセージの HTML 本文。 本文の内容は、最大サイズが 32 KB に制限されます。

            `attachments`<!-- -->: ファイルまたはアイテムの添付ファイルのいずれかの JSON オブジェクトの配列。

            `attachments.type`<!-- -->: 添付ファイルの種類を示します。 アイテムの添付ファイルの添付ファイルまたはアイテムのファイルである必要があります。

            `attachments.name`<!-- -->: 添付ファイルの名前を含む文字列。長さは最大255文字です。

            `attachments.url`<!-- -->: Type が file に設定されている場合にのみ使用します。 ファイルの場所の URI。

            `attachments.isInline`<!-- -->: Type が file に設定されている場合にのみ使用します。 True の場合は、添付ファイルはメッセージ本文にインラインで表示され、添付ファイルリストには表示されないことを示します。

            `attachments.itemId`<!-- -->: Type が item に設定されている場合にのみ使用します。 新しいメッセージに添付する、既存の電子メールの EWS 項目の id です。 最大の長さが 100 文字の文字列です。
          type:
            - any
  - uid: 'outlook!Office.Mailbox#displayNewMessageFormAsync:member(1)'
    summary: |-
      新しいメッセージを作成するためのフォームを表示します。

      The `displayNewMessageFormAsync` method opens a form that enables the user to create a new message. If parameters are specified, the message form fields are automatically populated with the contents of the parameters.

      パラメータのいずれかが指定されたサイズ制限を超えた場合、または不明なパラメータ名が指定された場合には、例外がスローされます。

      \[[API セット: メールボックスのプレビュー](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/display-new-message.yaml
      // The async version is only available in preview, and
      // provides a callback when the new message form has been created.
      Office.context.mailbox.displayNewMessageFormAsync(
        {
          toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
          ccRecipients: ["sam@contoso.com"],
          subject: "Outlook add-ins are cool!",
          htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
          attachments: [
            {
              type: "file",
              name: "image.png",
              url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
              isInline: true
            }
          ]
        },
        function(asyncResult) {
          console.log(JSON.stringify(asyncResult));
        }
      );
      ```
    isPreview: true
    name: 'displayNewMessageFormAsync(parameters, options, callback)'
    fullName: 'displayNewMessageFormAsync(parameters, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewMessageFormAsync(parameters: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: |-
            新規作成フォームでユーザーに対して入力されるすべての値を含むディクショナリ。 すべてのパラメーターは省略可能です。

            `toRecipients`<!-- -->: 電子メールアドレスを含む文字列の配列、または宛先行の各受信者の[Emailaddressdetails](xref:outlook!Office.EmailAddressDetails:interface)オブジェクトを含む配列。 配列の上限は 100 エントリです。

            `ccRecipients`<!-- -->: 電子メールアドレスを含む文字列の配列、または Cc 行の各受信者の[Emailaddressdetails](xref:outlook!Office.EmailAddressDetails:interface)オブジェクトを含む配列。 配列の上限は 100 エントリです。

            `bccRecipients`<!-- -->: メールアドレスを含む文字列の配列、または Bcc 行の各受信者の[Emailaddressdetails](xref:outlook!Office.EmailAddressDetails:interface)オブジェクトを含む配列。 配列の上限は 100 エントリです。

            `subject`<!-- -->: メッセージの件名を含む文字列。 文字列は最大 255 文字に制限されます。

            `htmlBody`<!-- -->: メッセージの HTML 本文。 本文の内容は、最大サイズが 32 KB に制限されます。

            `attachments`<!-- -->: ファイルまたはアイテムの添付ファイルのいずれかの JSON オブジェクトの配列。

            `attachments.type`<!-- -->: 添付ファイルの種類を示します。 アイテムの添付ファイルの添付ファイルまたはアイテムのファイルである必要があります。

            `attachments.name`<!-- -->: 添付ファイルの名前を含む文字列。長さは最大255文字です。

            `attachments.url`<!-- -->: Type が file に設定されている場合にのみ使用します。 ファイルの場所の URI。

            `attachments.isInline`<!-- -->: Type が file に設定されている場合にのみ使用します。 True の場合は、添付ファイルはメッセージ本文にインラインで表示され、添付ファイルリストには表示されないことを示します。

            `attachments.itemId`<!-- -->: Type が item に設定されている場合にのみ使用します。 新しいメッセージに添付する、既存の電子メールの EWS 項目の id です。 最大の長さが 100 文字の文字列です。
          type:
            - any
        - id: options
          description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が1つのパラメーターで呼び出されます。`asyncResult`<!-- -->`Office.AsyncResult`。オブジェクトです。
          type:
            - 'outlook!Office.Mailbox#displayNewMessageFormAsync~0:complex'
  - uid: 'outlook!Office.Mailbox#ewsUrl:member'
    summary: |-
      Gets the URL of the Exchange Web Services (EWS) endpoint for this email account. Read mode only.

      アプリは、 `ReadItem` 読み取りモードでメンバーを呼び出すために、マニフェストで指定されたアクセス許可を持っている必要があり `ewsUrl` ます。

      In compose mode you must call the `saveAsync` method before you can use the `ewsUrl` member. アプリは `ReadWriteItem` 、メソッドを呼び出すためのアクセス許可を持っている必要があり `saveAsync` ます。

      **注**: このメンバーは、iOS または Android の Outlook ではサポートされていません。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      The `ewsUrl` value can be used by a remote service to make EWS calls to the user's mailbox. たとえば、[選択されたアイテムから添付ファイルを取得](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)するリモートサービスを作成できます。<!-- -->.

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml
      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);
      var ewsId = Office.context.mailbox.item.itemId;
      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);

      console.log("REST URL: " + Office.context.mailbox.restUrl);
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("REST item ID: " + restId);

      var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("EWS ID (from REST ID): " + ewsId2);
      ```
    name: ewsUrl
    fullName: ewsUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ewsUrl: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync:member(1)'
    summary: |-
      REST Api または Exchange Web サービス (EWS) を呼び出すために使用されるトークンを含む文字列を取得します。

      `getCallbackTokenAsync` メソッドは、ユーザーのメールボックスをホストする Exchange Server から不透明なトークンを取得する非同期の呼び出しを行います。コールバック トークンの有効期間は 5 分です。

      トークンは、プロパティの文字列として返され `asyncResult.value` ます。

      `getCallbackTokenAsync`読み取りモードでメソッドを呼び出すには、最小のアクセス許可レベルが必要です。`ReadItem`<!-- -->.

      `getCallbackTokenAsync`新規作成モードでメソッドを呼び出すには、アイテムを保存しておく必要があります。 このメソッドには、 `saveAsync` 最小のアクセス許可レベルが必要です。`ReadWriteItem`<!-- -->.

      **重要**: 委任または共有のシナリオのガイダンスについては、「[代理人アクセス](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)」の記事を参照してください。

      *REST トークン*

      REST トークンが要求されたとき (`options.isRest` = `true`<!-- -->)、生成されたトークンは、EWS 呼び出しの認証には機能しません。 アドインでマニフェストにアクセス許可が指定されていない限り、トークンは現在のアイテムとその添付ファイルへの読み取り専用アクセスに制限され `ReadWriteMailbox` ます。 アクセス許可が指定されている場合は、結果トークンは、メールを送信する機能など、メール、カレンダー、連絡先への読み取り/書き込みアクセスを付与します。

      アドインでは、`restUrl`プロパティを使用して、REST API 呼び出しを行うときに使用する正しい URL を決定する必要があります。

      この API は、次のスコープで動作します。

      - `Mail.ReadWrite`

      - `Mail.Send`

      - `Calendars.ReadWrite`

      - `Contacts.ReadWrite`

      *EWS トークン*

      EWS トークンが要求された場合 (`options.isRest` = `false`<!-- -->)、生成されたトークンは REST API 呼び出しの認証には機能しません。 トークンの範囲は、現在のアイテムへのアクセスに制限されます。

      アドインでは、`ewsUrl` プロパティを使用して、EWS 呼び出しを行うときに使用する正しい URL を決定する必要があります。

      トークンと、添付ファイル識別子またはアイテム識別子の両方をサードパーティ システムに渡すことができます。 サードパーティ システムは、トークンをベアラー承認トークンとして使用し、Exchange Web サービス (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) 操作または [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) 操作を呼び出して、添付ファイルまたはアイテムを返します。 たとえば、[選択されたアイテムから添付ファイルを取得](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)するリモートサービスを作成できます。<!-- -->.

      **注**: 可能であれば、アドインでは Exchange Web サービスの代わりに REST api を使用することをお勧めします。

      \[[API set: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      **エラー**:

      - `HTTPRequestFailure`<!-- -->: 要求が失敗しました。 HTTP エラーコードの diagnostics オブジェクトを参照してください。

      - `InternalServerError`<!-- -->: Exchange サーバーがエラーを返しました。 詳細については、diagnostics オブジェクトを参照してください。

      - `NetworkError`<!-- -->: ユーザーはネットワークに接続されていません。 ネットワーク接続を確認し、やり直してください。

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml
      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {
          var ewsId = Office.context.mailbox.item.itemId;
          var token = result.value;
          var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
          var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                  
          var xhr = new XMLHttpRequest();
          xhr.open('GET', getMessageUrl);
          xhr.setRequestHeader("Authorization", "Bearer " + token);
          xhr.onload = function (e) {
              console.log(this.response);
          }
          xhr.send();
      });
      ```
    name: 'getCallbackTokenAsync(options, callback)'
    fullName: 'getCallbackTokenAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `isRest`<!-- -->: 指定されたトークンが Outlook REST Api または Exchange Web サービスで使用されるかどうかを決定します。 既定値は`false`<!-- -->. `asyncContext`<!-- -->: 非同期メソッドに渡される状態データ。'
          type:
            - 'outlook!Office.Mailbox#getCallbackTokenAsync~0:complex'
        - id: callback
          description: メソッドが完了すると、callback パラメーターで渡された関数が、1つのパラメーター型 (type) によって呼び出されます。`Office.AsyncResult`<!-- -->. トークンは、プロパティの文字列として返され `asyncResult.value` ます。 エラーが発生した場合、 `asyncResult.error` および `asyncResult.diagnostics` のプロパティで追加情報が提供される場合があります。
          type:
            - 'outlook!Office.Mailbox#getCallbackTokenAsync~1:complex'
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync:member(2)'
    summary: |-
      Exchange Server から添付ファイルやアイテムを取得するために使うトークンを含む文字列を取得します。

      `getCallbackTokenAsync` メソッドは、ユーザーのメールボックスをホストする Exchange Server から不透明なトークンを取得する非同期の呼び出しを行います。コールバック トークンの有効期間は 5 分です。

      トークンは、プロパティの文字列として返され `asyncResult.value` ます。

      トークンと、添付ファイル識別子またはアイテム識別子の両方をサードパーティ システムに渡すことができます。 サードパーティ システムは、トークンをベアラー承認トークンとして使用し、Exchange Web サービス (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) または [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) 操作を呼び出して、添付ファイルまたはアイテムを返します。 たとえば、[選択されたアイテムから添付ファイルを取得](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)するリモートサービスを作成できます。<!-- -->.

      `getCallbackTokenAsync`読み取りモードでメソッドを呼び出すには、最小のアクセス許可レベルが必要です。`ReadItem`<!-- -->.

      `getCallbackTokenAsync`新規作成モードでメソッドを呼び出すには、アイテムを保存しておく必要があります。 このメソッドには、 `saveAsync` 最小のアクセス許可レベルが必要です。`ReadWriteItem`<!-- -->.

      **重要**: 委任または共有のシナリオのガイダンスについては、「[代理人アクセス](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)」の記事を参照してください。

      \[[API set: すべて読み取りモードをサポートします。メールボックス1.3 新規作成モードのサポートが導入](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)されました\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      **エラー**:

      - `HTTPRequestFailure`<!-- -->: 要求が失敗しました。 HTTP エラーコードの diagnostics オブジェクトを参照してください。

      - `InternalServerError`<!-- -->: Exchange サーバーがエラーを返しました。 詳細については、diagnostics オブジェクトを参照してください。

      - `NetworkError`<!-- -->: ユーザーはネットワークに接続されていません。 ネットワーク接続を確認し、やり直してください。

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml
      Office.context.mailbox.getCallbackTokenAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`Token retrieval failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });
      ```
    name: 'getCallbackTokenAsync(callback, userContext)'
    fullName: 'getCallbackTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: メソッドが完了すると、callback パラメーターで渡された関数が、1つのパラメーター型 (type) によって呼び出されます。`Office.AsyncResult`<!-- -->. トークンは、プロパティの文字列として返され `asyncResult.value` ます。 エラーが発生した場合、 `asyncResult.error` および `asyncResult.diagnostics` のプロパティで追加情報が提供される場合があります。
          type:
            - 'outlook!Office.Mailbox#getCallbackTokenAsync~2:complex'
        - id: userContext
          description: 省略可能です。 非同期メソッドに渡される状態データです。
          type:
            - any
  - uid: 'outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)'
    summary: |-
      ユーザーと Office アドインを識別するトークンを取得します。

      トークンは、プロパティの文字列として返され `asyncResult.value` ます。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      この `getUserIdentityTokenAsync` メソッドは、[アドインとユーザーをサードパーティのシステムで](https://docs.microsoft.com/office/dev/add-ins/outlook/authentication)識別して認証するために使用できるトークンを返します。<!-- -->.

      **エラー**:

      - `HTTPRequestFailure`<!-- -->: 要求が失敗しました。 HTTP エラーコードの diagnostics オブジェクトを参照してください。

      - `InternalServerError`<!-- -->: Exchange サーバーがエラーを返しました。 詳細については、diagnostics オブジェクトを参照してください。

      - `NetworkError`<!-- -->: ユーザーはネットワークに接続されていません。 ネットワーク接続を確認し、やり直してください。

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml
      Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`Token retrieval failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });
      ```
    name: 'getUserIdentityTokenAsync(callback, userContext)'
    fullName: 'getUserIdentityTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: メソッドが完了すると、callback パラメーターで渡された関数が、1つのパラメーター型 (type) によって呼び出されます。`Office.AsyncResult`<!-- -->. トークンは、プロパティの文字列として返され `asyncResult.value` ます。 エラーが発生した場合、 `asyncResult.error` および `asyncResult.diagnostics` のプロパティで追加情報が提供される場合があります。
          type:
            - 'outlook!Office.Mailbox#getUserIdentityTokenAsync~0:complex'
        - id: userContext
          description: 省略可能です。 非同期メソッドに渡される状態データです。
          type:
            - any
  - uid: 'outlook!Office.Mailbox#item:member'
    summary: |-
      メールボックスアイテム。 アドインが開かれたコンテキストによっては、アイテムの種類が異なる場合があります。 特定の種類またはモードの場合にのみ IntelliSense を表示するには、この項目を次のいずれかにキャストします。

      [MessageCompose](xref:outlook!Office.MessageCompose:interface)<!-- -->、 [Messageread.html](xref:outlook!Office.MessageRead:interface)<!-- -->、 [AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)<!-- -->、 [AppointmentRead](xref:outlook!Office.AppointmentRead:interface)
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead;'
      return:
        type:
          - 'outlook!Office.Mailbox#item~0:complex'
  - uid: 'outlook!Office.Mailbox#makeEwsRequestAsync:member(1)'
    summary: |-
      ユーザーのメールボックスをホストしている Exchange サーバー上の Exchange Web サービス (EWS) サービスに対して非同期の要求を行います。

      これらの場合、アドインではユーザーのメールボックスにアクセスするために、代わりに REST API を使用する必要があります。

      `makeEwsRequestAsync` メソッドは、アドインの代わりに Exchange に EWS 要求を送信します。

      `makeEwsRequestAsync` メソッドでは、フォルダー関連アイテムを要求できません。

      XML 要求では、UTF-8 エンコードを指定する必要があります。`\<?xml version="1.0" encoding="utf-8"?\>`<!-- -->.

      アドインには、 `ReadWriteMailbox` メソッドを使用するためのアクセス許可が必要 `makeEwsRequestAsync` です。 メソッドを使用して `ReadWriteMailbox` 呼び出すことができるアクセス許可と EWS 操作の使用方法について `makeEwsRequestAsync` は、「[ユーザーのメールボックスへのメールアドインアクセスのアクセス許可を指定](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)する」を参照してください。<!-- -->.

      The XML result of the EWS call is provided as a string in the `asyncResult.value` property. If the result exceeds 1 MB in size, an error message is returned instead.

      **注**: このメソッドは、次のシナリオではサポートされていません。

      - Outlook on iOS または Android。

      - アドインが Gmail メールボックスに読み込まれている場合。

      **注**: サーバー管理者は、 `OAuthAuthentication` `true` クライアントアクセスサーバーの ews ディレクトリに設定して、 `makeEwsRequestAsync` メソッドで ews 要求を行うことができるようにする必要があります。

      *バージョンの相違点*

      `makeEwsRequestAsync`バージョン15.0.4535.1004 より前のバージョンの Outlook で実行しているメールアプリでメソッドを使用する場合は、エンコード値を ISO-8859-1 に設定する必要があります。

      `<?xml version="1.0" encoding="iso-8859-1"?>`

      Outlook on the web でメール アプリを実行している場合は、エンコード値を設定する必要はありません。 プロパティを使用して、メールアプリが Outlook または outlook on the web で実行されているかどうかを判断でき `mailbox.diagnostics.hostName` ます。 実行している Outlook のバージョンは、プロパティを使用して確認でき `mailbox.diagnostics.hostVersion` ます。
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadWriteMailbox`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      function getSubjectRequest(id) {
          // Return a GetItem operation request for the subject of the specified item.
          var request =
              '<?xml version="1.0" encoding="utf-8"?>' +
              '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
              '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
              '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
              '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
              '  <soap:Header>' +
              '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
              '  </soap:Header>' +
              '  <soap:Body>' +
              '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
              '      <ItemShape>' +
              '        <t:BaseShape>IdOnly</t:BaseShape>' +
              '        <t:AdditionalProperties>' +
              '            <t:FieldURI FieldURI="item:Subject"/>' +
              '        </t:AdditionalProperties>' +
              '      </ItemShape>' +
              '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
              '    </GetItem>' +
              '  </soap:Body>' +
              '</soap:Envelope>';

          return request;
      }

      function sendRequest() {
          // Create a local variable that contains the mailbox.
          Office.context.mailbox.makeEwsRequestAsync(
              getSubjectRequest(mailbox.item.itemId), callback);
      }

      function callback(asyncResult)  {
          var result = asyncResult.value;
          var context = asyncResult.asyncContext;

          // Process the returned response here.
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/make-ews-request-async.yaml
      var ewsId = Office.context.mailbox.item.itemId;
      var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
          '  <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>' +
          '  <soap:Body>' +
          '    <m:GetItem>' +
          '      <m:ItemShape>' +
          '        <t:BaseShape>IdOnly</t:BaseShape>' +
          '      </m:ItemShape >' +
          '      <m:ItemIds>' +
          '        <t:ItemId Id="' + ewsId + '" />' +
          '      </m:ItemIds>' +
          '    </m:GetItem>' +
          '  </soap:Body>' +
          '</soap:Envelope>';

      Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
          console.log(result);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml
      var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
          '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
          '  <soap:Body>'+
          '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
          '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
          '      <m:Items>'+
          '        <t:Message>'+
          '          <t:Subject>Hello, Outlook!</t:Subject>'+
          '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
          '          <t:ToRecipients>'+
          '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
          '          </t:ToRecipients>'+
          '        </t:Message>'+
          '      </m:Items>'+
          '    </m:CreateItem>'+
          '  </soap:Body>'+
          '</soap:Envelope>';

      Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
          console.log(result);
      });
      ```
    name: 'makeEwsRequestAsync(data, callback, userContext)'
    fullName: 'makeEwsRequestAsync(data, callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: EWS 要求です。
          type:
            - any
        - id: callback
          description: メソッドが完了すると、callback パラメーターで渡された関数が、1つのパラメーター型 (type) によって呼び出されます。`Office.AsyncResult`<!-- -->. `value`結果のプロパティは、文字列として提供された EWS 要求の XML です。 結果のサイズが 1 MB を超える場合、代わりにエラー メッセージが返されます。
          type:
            - 'outlook!Office.Mailbox#makeEwsRequestAsync~0:complex'
        - id: userContext
          description: 省略可能です。 非同期メソッドに渡される状態データです。
          type:
            - any
  - uid: 'outlook!Office.Mailbox#masterCategories:member'
    summary: |-
      メールボックスに関連付けられたカテゴリマスターリストを管理するためのメソッドを提供するオブジェクトを取得します。

      \[[API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadWriteMailbox`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml
      Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories && categories.length > 0) {
            console.log("Master categories:");
            console.log(JSON.stringify(categories));
          } else {
            console.log("There are no categories in the master list.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml
      var masterCategoriesToAdd = [
        {
          displayName: "TestCategory",
          color: Office.MailboxEnums.CategoryColor.Preset0
        }
      ];

      Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully added categories to master list");
        } else {
          console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-master-categories.yaml
      var masterCategoriesToRemove = ["TestCategory"];

      Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully removed categories from master list");
        } else {
          console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
        }
      });
      ```
    name: masterCategories
    fullName: masterCategories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'masterCategories: MasterCategories;'
      return:
        type:
          - 'outlook!Office.MasterCategories:interface'
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync:member(1)'
    summary: |-
      サポートされているイベントの種類のイベント ハンドラーを削除します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Mailbox object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox#events)を参照してください。

      \[[API set: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを取り消すイベント。
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~0:complex'
        - id: options
          description: 省略可能です。 コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が、型の1つのパラメーターで呼び出されます。`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync:member(2)'
    summary: |-
      サポートされているイベントの種類のイベント ハンドラーを削除します。 **注**: イベントは作業ウィンドウでのみ使用できます。

      サポートされているイベントについては、「Mailbox object model [events」セクション](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox#events)を参照してください。

      \[[API set: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: ハンドラーを取り消すイベント。
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~2:complex'
        - id: callback
          description: 省略可能です。 メソッドが完了すると、パラメーターに渡された関数 `callback` が、型の1つのパラメーターで呼び出されます。`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.Mailbox#restUrl:member'
    summary: |-
      この電子メール アカウントの REST エンドポイントの URL を取得します。

      アプリは、 `ReadItem` 読み取りモードでメンバーを呼び出すために、マニフェストで指定されたアクセス許可を持っている必要があり `restUrl` ます。

      In compose mode you must call the `saveAsync` method before you can use the `restUrl` member. アプリは `ReadWriteItem` 、メソッドを呼び出すためのアクセス許可を持っている必要があり `saveAsync` ます。

      ただし、デリゲートまたは共有のシナリオでは、代わりに `targetRestUrl` [sharedproperties](xref:outlook!Office.SharedProperties:interface)オブジェクトのプロパティを使用する必要があります (要件セット1.8 で導入されています)。 詳細については、「[代理人アクセス](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)」の記事を参照してください。

      \[[API set: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: 新規作成または読み取り

      `restUrl` 値は、ユーザーのメールボックスに [REST API](https://docs.microsoft.com/outlook/rest/) 呼び出しを行うために使用できます。

      #### <a name="examples"></a>例

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml
      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {
          var ewsId = Office.context.mailbox.item.itemId;
          var token = result.value;
          var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
          var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                  
          var xhr = new XMLHttpRequest();
          xhr.open('GET', getMessageUrl);
          xhr.setRequestHeader("Authorization", "Bearer " + token);
          xhr.onload = function (e) {
              console.log(this.response);
          }
          xhr.send();
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml
      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);
      var ewsId = Office.context.mailbox.item.itemId;
      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);

      console.log("REST URL: " + Office.context.mailbox.restUrl);
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("REST item ID: " + restId);

      var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("EWS ID (from REST ID): " + ewsId2);
      ```
    name: restUrl
    fullName: restUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'restUrl: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.Mailbox#userProfile:member'
    summary: |-
      メールボックスに関連付けられたユーザーに関する情報。 これには、アカウントの種類、表示名、電子メールアドレス、タイムゾーンが含まれます。

      詳細については、「Office UserProfile」を参照[してください。](xref:outlook!Office.UserProfile:interface)
    name: userProfile
    fullName: userProfile
    langs:
      - typeScript
    type: property
    syntax:
      content: 'userProfile: UserProfile;'
      return:
        type:
          - 'outlook!Office.UserProfile:interface'
references:
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~1:complex'
    name: '(type: Office.EventType) => void'
    fullName: '(type: Office.EventType) => void'
    spec.typeScript:
      - name: '(type: '
        fullName: '(type: '
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ) => void
        fullName: ) => void
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~3:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~4:complex'
    name: '(type: Office.EventType) => void'
    fullName: '(type: Office.EventType) => void'
    spec.typeScript:
      - name: '(type: '
        fullName: '(type: '
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ) => void
        fullName: ) => void
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~5:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#convertToEwsId~0:complex'
    name: MailboxEnums.RestVersion | string
    fullName: Office.MailboxEnums.RestVersion | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.RestVersion:enum'
        name: MailboxEnums.RestVersion
        fullName: Office.MailboxEnums.RestVersion
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.LocalClientTime:interface'
    name: LocalClientTime
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.Mailbox#convertToRestId~0:complex'
    name: MailboxEnums.RestVersion | string
    fullName: Office.MailboxEnums.RestVersion | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.RestVersion:enum'
        name: MailboxEnums.RestVersion
        fullName: Office.MailboxEnums.RestVersion
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Diagnostics:interface'
    name: Diagnostics
  - uid: 'outlook!Office.Mailbox#displayAppointmentFormAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#displayMessageFormAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentForm:interface'
    name: AppointmentForm
  - uid: 'outlook!Office.Mailbox#displayNewAppointmentFormAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#displayNewMessageFormAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isRest?: boolean }'
    fullName: 'Office.AsyncContextOptions & { isRest?: boolean }'
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isRest?: boolean }'
        fullName: ' & { isRest?: boolean }'
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#getUserIdentityTokenAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#item~0:complex'
    name: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead
    fullName: Office.Item & Office.ItemCompose & Office.ItemRead & Office.Message & Office.MessageCompose & Office.MessageRead & Office.Appointment & Office.AppointmentCompose & Office.AppointmentRead
    spec.typeScript:
      - uid: 'outlook!Office.Item:interface'
        name: Item
        fullName: Office.Item
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.ItemCompose:interface'
        name: ItemCompose
        fullName: Office.ItemCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.ItemRead:interface'
        name: ItemRead
        fullName: Office.ItemRead
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.Message:interface'
        name: Message
        fullName: Office.Message
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.MessageCompose:interface'
        name: MessageCompose
        fullName: Office.MessageCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.MessageRead:interface'
        name: MessageRead
        fullName: Office.MessageRead
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.Appointment:interface'
        name: Appointment
        fullName: Office.Appointment
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.AppointmentCompose:interface'
        name: AppointmentCompose
        fullName: Office.AppointmentCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.AppointmentRead:interface'
        name: AppointmentRead
        fullName: Office.AppointmentRead
  - uid: 'outlook!Office.Mailbox#makeEwsRequestAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MasterCategories:interface'
    name: MasterCategories
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.UserProfile:interface'
    name: UserProfile