### YamlMime:TSType
name: Office.AttachmentContent
uid: outlook!Office.AttachmentContent:interface
package: outlook!
fullName: Office.AttachmentContent
summary: >-
  メッセージアイテムまたは予定アイテムの添付ファイルのコンテンツを表します。


  \[[API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[最低限必要なアクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


  **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 新規作成または読み取り
isPreview: false
isDeprecated: false
type: interface
properties:
- name: content
  uid: outlook!Office.AttachmentContent#content:member
  package: outlook!
  fullName: content
  summary: 文字列としての添付ファイルの内容。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'content: string;'
    return:
      type: string
- name: format
  uid: outlook!Office.AttachmentContent#format:member
  package: outlook!
  fullName: format
  summary: >-
    添付ファイルのコンテンツに使用する文字列形式。


    添付ファイルの場合、書式設定は base64 でエンコードされた文字列です。


    メッセージを表し、ドラッグアンドドロップまたは "アイテムの添付" によって添付されたアイテムの添付ファイルの場合、書式設定は .eml 形式のファイルを表す文字列になります。 **重要**: メッセージアイテムが Outlook on the web のドラッグアンドドロップによって接続された場合、 `getAttachmentContentAsync` エラーがスローされます。


    アイテムの添付ファイルが予定表アイテムを表し、ドラッグアンドドロップまたは "アイテムの添付" によって接続されていた場合、書式設定は icalendar ファイルを表す文字列になります。 **重要**: 予定表アイテムが Outlook on the web のドラッグアンドドロップによって接続されていた場合は、 `getAttachmentContentAsync` エラーがスローされます。


    クラウド添付ファイルの場合、書式設定は URL 文字列です。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'format: MailboxEnums.AttachmentContentFormat | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.AttachmentContentFormat:enum" /> | string
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nvar item = Office.context.mailbox.item;\nvar options = {asyncContext: {currentItem: item}};\nitem.getAttachmentsAsync(options, callback);\n\nfunction callback(result) {\n    if (result.value.length > 0) {\n        for (i = 0 ; i < result.value.length ; i++) {\n            result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);\n        }\n    }\n}\n\nfunction handleAttachmentsCallback(result) {\n    // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.\n    switch (result.value.format) {\n        case Office.MailboxEnums.AttachmentContentFormat.Base64:\n            // Handle file attachment.\n            break;\n        case Office.MailboxEnums.AttachmentContentFormat.Eml:\n            // Handle email item attachment.\n            break;\n        case Office.MailboxEnums.AttachmentContentFormat.ICalendar:\n            // Handle .icalender attachment.\n            break;\n        case Office.MailboxEnums.AttachmentContentFormat.Url:\n            // Handle cloud attachment.\n            break;\n        default:\n            // Handle attachment formats that are not supported.\n    }\n}\n```"
metadata:
  ms.openlocfilehash: 832984f1ec4064f0e63ad81ebc8faf7b17c2fe17
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49301033"
