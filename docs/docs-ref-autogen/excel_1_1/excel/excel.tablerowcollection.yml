### YamlMime:TSType
name: Excel.TableRowCollection
uid: excel!Excel.TableRowCollection:class
package: excel!
fullName: Excel.TableRowCollection
summary: >-
  表の一部であるすべての行のコレクションを表します。


  範囲や列とは異なり、新しい行または列が追加される場合は調整されますが、オブジェクトはテーブル行の物理的な場所を表しますが、データは `TableRow` 表しません。 つまり、データを並べ替えた場合、または新しい行が追加された場合、テーブル行は作成されたインデックスを引き続きポイントします。


  \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.TableRowCollection#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これにより、アドインのプロセスがホスト アプリケーションのプロセスOfficeに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: count
  uid: excel!Excel.TableRowCollection#count:member
  package: excel!
  fullName: count
  summary: >-
    テーブルの行数を返します。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: excel!Excel.TableRowCollection#items:member
  package: excel!
  fullName: items
  summary: このコレクション内に読み込まれた子アイテムを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.TableRow[];'
    return:
      type: <xref uid="excel!Excel.TableRow:class" />[]
methods:
- name: add(index, values)
  uid: excel!Excel.TableRowCollection#add:member(1)
  package: excel!
  fullName: add(index, values)
  summary: >-
    テーブルに 1 つ以上の行を追加します。 戻りオブジェクトは新しく追加された行の先頭になります。


    範囲や列とは異なり、新しい行または列が追加される場合は調整されますが、オブジェクトはテーブル行の物理的な場所を表しますが、データは `TableRow` 表しません。 つまり、データを並べ替えた場合、または新しい行が追加された場合、テーブル行は作成されたインデックスを引き続きポイントします。


    \[[API セット: 1 行を追加する ExcelApi 1.1、1.4 では複数の行を追加できます。](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number): Excel.TableRow;'
    parameters:
    - id: index
      description: 省略可能。新しい行の相対位置を指定します。null または -1 の場合、最後に追加が行われます。挿入した行の下のすべての行が下方向にシフトします。0 を起点とする番号になります。
      type: number
    - id: values
      description: 省略可能。 テーブル行の書式設定されていない値の 2D 配列。
      type: Array&lt;Array&lt;boolean | string | number&gt;&gt; | boolean | string | number
    return:
      type: <xref uid="excel!Excel.TableRow:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var values = [[\"Sample\", \"Values\", \"For\", \"New\", \"Row\"]];\n    var row = tables.getItem(\"Table1\").rows.add(null, values);\n    row.load('index');\n    return ctx.sync().then(function() {\n        console.log(row.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemAt(index)
  uid: excel!Excel.TableRowCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    コレクション内の位置を基に行を取得します。


    範囲や列とは異なり、新しい行または列が追加される場合は調整されますが、オブジェクトはテーブル行の物理的な場所を表しますが、データは `TableRow` 表しません。 つまり、データを並べ替えた場合、または新しい行が追加された場合、テーブル行は作成されたインデックスを引き続きポイントします。


    \[[API セット: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.TableRow;'
    parameters:
    - id: index
      description: 取得するオブジェクトのインデックス値。 0 を起点とする番号になります。
      type: number
    return:
      type: <xref uid="excel!Excel.TableRow:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var tablerow = ctx.workbook.tables.getItem('Table1').rows.getItemAt(0);\n    tablerow.load('name');\n    return ctx.sync().then(function() {\n            console.log(tablerow.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.TableRowCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.TableRowCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableRowCollection;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティのオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.TableRowCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.TableRowCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.TableRowCollection;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定するコンマ区切り文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var tablerows = ctx.workbook.tables.getItem('Table1').rows;\n    tablerows.load('items');\n    return ctx.sync().then(function() {\n        console.log(\"tablerows Count: \" + tablerows.count);\n        for (var i = 0; i < tablerows.items.length; i++) {\n            console.log(tablerows.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// In the example, we'll select the top 100 rows of the table.\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItem(\"Table1\");\n    var tableRows = table.rows.load({\"select\" : \"index, values\",\"top\": 100, \"skip\": 0 })\n    return ctx.sync().then(function() {\n        for (var i = 0; i < tableRows.items.length; i++) {\n            console.log(tableRows.items[i].index);\n            console.log(tableRows.items[i].values);\n        }\n    });\n}).catch(function(error) {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n            console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.TableRowCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableRowCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマ区切りの文字列で、読み込むナビゲーション プロパティを指定するコンマ区切 `propertyNamesAndPaths.expand` りの文字列です。'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.TableRowCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: API オブジェクトを渡す際に、より有用な出力を提供するために `toJSON()` JavaScript メソッドをオーバーライドします。 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->、順番に、渡 `toJSON` されるオブジェクトのメソッドを呼び出します。元のオブジェクトが API オブジェクトであるのに対し、メソッドはプレーンな JavaScript オブジェクト (次のように入力) `Excel.TableRowCollection` `toJSON` を返します。 `Excel.Interfaces.TableRowCollectionData`<!-- -->) コレクションのアイテムから読み込まれたプロパティのコピーが浅い "items" 配列を含む。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableRowCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.TableRowCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 8ac01d349ae1fea4583e30997f8659be10a751b8
  ms.sourcegitcommit: ce09743deb2fc2a879cd63f96c8ff11ec84a42b2
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 04/02/2021
  ms.locfileid: "51555714"
