### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Application
    summary: |-
      <span data-ttu-id="b2a25-101">ブックを管理する Excel アプリケーションを表します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-101">Represents the Excel application that manages the workbook.</span></span>

      <span data-ttu-id="b2a25-102">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b2a25-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Application
    fullName: Excel.Application
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Application.calculate
      - excel.Excel.Application.calculate_1
      - excel.Excel.Application.calculationMode
      - excel.Excel.Application.context
      - excel.Excel.Application.load
      - excel.Excel.Application.load_1
      - excel.Excel.Application.load_2
      - excel.Excel.Application.set
      - excel.Excel.Application.set_1
      - excel.Excel.Application.toJSON
  - uid: excel.Excel.Application.calculate
    summary: |-
      <span data-ttu-id="b2a25-103">Excel で現在開いているすべてのブックを再計算します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-103">Recalculate all currently opened workbooks in Excel.</span></span>

      <span data-ttu-id="b2a25-104">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b2a25-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(calculationType)
    fullName: calculate(calculationType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationType: Excel.CalculationType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: calculationType
          description: <span data-ttu-id="b2a25-105">使用する計算の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-105">Specifies the calculation type to use.</span></span> <span data-ttu-id="b2a25-106">詳細については、「Excel の種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2a25-106">See Excel.CalculationType for details.</span></span>
          type:
            - excel.Excel.CalculationType
  - uid: excel.Excel.Application.calculate_1
    summary: |-
      <span data-ttu-id="b2a25-107">Excel で現在開いているすべてのブックを再計算します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-107">Recalculate all currently opened workbooks in Excel.</span></span>

      <span data-ttu-id="b2a25-108">\[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b2a25-108">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(calculationTypeString)
    fullName: calculate(calculationTypeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationTypeString: "Recalculate" | "Full" | "FullRebuild"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b2a25-109">例</span><span class="sxs-lookup"><span data-stu-id="b2a25-109">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              ctx.workbook.application.calculate('Full');
              return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: calculationTypeString
          description: <span data-ttu-id="b2a25-110">使用する計算の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-110">Specifies the calculation type to use.</span></span> <span data-ttu-id="b2a25-111">詳細については、「Excel の種類」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2a25-111">See Excel.CalculationType for details.</span></span>
          type:
            - '"Recalculate" | "Full" | "FullRebuild"'
  - uid: excel.Excel.Application.calculationMode
    summary: |-
      <span data-ttu-id="b2a25-112">CalculationMode の定数によって定義されている、ブックで使用されている計算モードを返します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-112">Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode.</span></span> <span data-ttu-id="b2a25-113">可能な値は次のとおりです。`Automatic`</span><span class="sxs-lookup"><span data-stu-id="b2a25-113">Possible values are: `Automatic`</span></span><!-- --><span data-ttu-id="b2a25-114">、Excel は再計算を制御します。`AutomaticExceptTables`</span><span class="sxs-lookup"><span data-stu-id="b2a25-114">, where Excel controls recalculation; `AutomaticExceptTables`</span></span><!-- --><span data-ttu-id="b2a25-115">、Excel は再計算を制御しますが、テーブル内の変更は無視します。`Manual`</span><span class="sxs-lookup"><span data-stu-id="b2a25-115">, where Excel controls recalculation but ignores changes in tables; `Manual`</span></span><!-- --><span data-ttu-id="b2a25-116">、ユーザーが要求すると、計算が行われます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-116">, where calculation is done when the user requests it.</span></span>

      <span data-ttu-id="b2a25-117">\[[API set: ExcelApi 1.1 for get、set の 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b2a25-117">\[ [API set: ExcelApi 1.1 for get, 1.8 for set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculationMode
    fullName: calculationMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
      return:
        type:
          - Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
  - uid: excel.Excel.Application.context
    summary: <span data-ttu-id="b2a25-118">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="b2a25-118">The request context associated with the object.</span></span> <span data-ttu-id="b2a25-119">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-119">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Application.load
    summary: <span data-ttu-id="b2a25-120">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-120">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b2a25-121">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b2a25-121">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="b2a25-122">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="b2a25-122">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="b2a25-123">`load(option?: string | string[]): Excel.Application`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="b2a25-123">`load(option?: string | string[]): Excel.Application` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="b2a25-124">`load(option?: { select?: string; expand?: string; }): Excel.Application`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="b2a25-124">`load(option?: { select?: string; expand?: string; }): Excel.Application` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="b2a25-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application` - Only available on collection types.</span></span> <span data-ttu-id="b2a25-126">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="b2a25-126">It is similar to the preceding signature.</span></span> <span data-ttu-id="b2a25-127">Top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-127">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="b2a25-128">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-128">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="b2a25-129">Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-129">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ApplicationLoadOptions): Excel.Application;'
      return:
        type:
          - excel.Excel.Application
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.ApplicationLoadOptions
  - uid: excel.Excel.Application.load_1
    summary: <span data-ttu-id="b2a25-130">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-130">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b2a25-131">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b2a25-131">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Application;'
      return:
        type:
          - excel.Excel.Application
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b2a25-132">例</span><span class="sxs-lookup"><span data-stu-id="b2a25-132">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var application = ctx.workbook.application;
              application.load('calculationMode');
              return ctx.sync().then(function() {
                  console.log(application.calculationMode);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="b2a25-133">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="b2a25-133">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.Application.load_2
    summary: <span data-ttu-id="b2a25-134">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-134">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b2a25-135">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b2a25-135">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Application;'
      return:
        type:
          - excel.Excel.Application
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="b2a25-136">ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="b2a25-136">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Application.set
    summary: '<span data-ttu-id="b2a25-137">一度に1つのオブジェクトの複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-137">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="b2a25-138">適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="b2a25-138">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="b2a25-139">このメソッドには、次の追加のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="b2a25-139">This method has the following additional signature:</span></span>

      `set(properties: Excel.Application): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="b2a25-140">メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b2a25-140">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.ApplicationUpdateData
        - id: options
          description: <span data-ttu-id="b2a25-141">プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-141">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Application.set_1
    summary: '<span data-ttu-id="b2a25-142">既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-142">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Application): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Application
  - uid: excel.Excel.Application.toJSON
    summary: '<span data-ttu-id="b2a25-143">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="b2a25-143">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="b2a25-144">.</span><span class="sxs-lookup"><span data-stu-id="b2a25-144"></span></span> <span data-ttu-id="b2a25-145">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="b2a25-145"></span></span><!-- --><span data-ttu-id="b2a25-146">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の Excel オブジェクトは API オブジェクトですが、このメソッドは`toJSON` 、プレーンな JavaScript オブジェクト (として型指定されます) を返します。`Excel.Interfaces.ApplicationData`</span><span class="sxs-lookup"><span data-stu-id="b2a25-146">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ApplicationData`</span></span><!-- --><span data-ttu-id="b2a25-147">) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。</span><span class="sxs-lookup"><span data-stu-id="b2a25-147">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ApplicationData;'
      return:
        type:
          - excel.Excel.Interfaces.ApplicationData
        description: ''