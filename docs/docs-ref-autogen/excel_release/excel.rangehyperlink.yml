### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.RangeHyperlink
    summary: |-
      <span data-ttu-id="ed5f4-101">ハイパーリンク (xhl) オブジェクトを取得/設定するために必要な文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="ed5f4-101">Represents the necessary strings to get/set a hyperlink (XHL) object.</span></span>

      <span data-ttu-id="ed5f4-102">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ed5f4-102">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.RangeHyperlink
    fullName: Excel.RangeHyperlink
    langs:
      - typeScript
    type: interface
    package: excel_release
    children:
      - excel_release.Excel.RangeHyperlink.address
      - excel_release.Excel.RangeHyperlink.documentReference
      - excel_release.Excel.RangeHyperlink.screenTip
      - excel_release.Excel.RangeHyperlink.textToDisplay
  - uid: excel_release.Excel.RangeHyperlink.address
    summary: |-
      <span data-ttu-id="ed5f4-103">ハイパーリンクの URL ターゲットを表します。</span><span class="sxs-lookup"><span data-stu-id="ed5f4-103">Represents the url target for the hyperlink.</span></span>

      <span data-ttu-id="ed5f4-104">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ed5f4-104">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'address?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ed5f4-105">例</span><span class="sxs-lookup"><span data-stu-id="ed5f4-105">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.RangeHyperlink.documentReference
    summary: |-
      <span data-ttu-id="ed5f4-106">ハイパーリンクのドキュメント参照先を表します。</span><span class="sxs-lookup"><span data-stu-id="ed5f4-106">Represents the document reference target for the hyperlink.</span></span>

      <span data-ttu-id="ed5f4-107">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ed5f4-107">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: documentReference
    fullName: documentReference
    langs:
      - typeScript
    type: property
    syntax:
      content: 'documentReference?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ed5f4-108">例</span><span class="sxs-lookup"><span data-stu-id="ed5f4-108">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A9:A11");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a location within the workbook
              // for each product name in the second table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Navigate to the '" + cellText + "' worksheet",
                      documentReference: cellText + "!A1"
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.RangeHyperlink.screenTip
    summary: |-
      <span data-ttu-id="ed5f4-109">ハイパーリンクの上にカーソルを合わせると表示される文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="ed5f4-109">Represents the string displayed when hovering over the hyperlink.</span></span>

      <span data-ttu-id="ed5f4-110">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ed5f4-110">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: screenTip
    fullName: screenTip
    langs:
      - typeScript
    type: property
    syntax:
      content: 'screenTip?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ed5f4-111">例</span><span class="sxs-lookup"><span data-stu-id="ed5f4-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.RangeHyperlink.textToDisplay
    summary: |-
      <span data-ttu-id="ed5f4-112">該当する範囲内の左上端のセルに表示される文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="ed5f4-112">Represents the string that is displayed in the top left most cell in the range.</span></span>

      <span data-ttu-id="ed5f4-113">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ed5f4-113">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textToDisplay
    fullName: textToDisplay
    langs:
      - typeScript
    type: property
    syntax:
      content: 'textToDisplay?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ed5f4-114">例</span><span class="sxs-lookup"><span data-stu-id="ed5f4-114">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```