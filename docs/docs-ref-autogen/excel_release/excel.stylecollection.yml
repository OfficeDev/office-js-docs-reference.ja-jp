### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.StyleCollection
    summary: |-
      <span data-ttu-id="625db-101">すべてのスタイルのコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="625db-101">Represents a collection of all the styles.</span></span>

      <span data-ttu-id="625db-102">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="625db-102">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.StyleCollection
    fullName: Excel.StyleCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.StyleCollection.add
      - excel_release.Excel.StyleCollection.context
      - excel_release.Excel.StyleCollection.getItem
      - excel_release.Excel.StyleCollection.items
      - excel_release.Excel.StyleCollection.load
      - excel_release.Excel.StyleCollection.load_1
      - excel_release.Excel.StyleCollection.load_2
      - excel_release.Excel.StyleCollection.toJSON
  - uid: excel_release.Excel.StyleCollection.add
    summary: |-
      <span data-ttu-id="625db-103">コレクションに新しいスタイルを追加します。</span><span class="sxs-lookup"><span data-stu-id="625db-103">Adds a new style to the collection.</span></span>

      <span data-ttu-id="625db-104">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="625db-104">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="625db-105">例</span><span class="sxs-lookup"><span data-stu-id="625db-105">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          });
          ```
      parameters:
        - id: name
          description: <span data-ttu-id="625db-106">追加するスタイルの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="625db-106">Name of the style to be added.</span></span>
          type:
            - string
  - uid: excel_release.Excel.StyleCollection.context
    summary: <span data-ttu-id="625db-107">オブジェクトに関連付けられている要求コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="625db-107">The request context associated with the object.</span></span> <span data-ttu-id="625db-108">これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。</span><span class="sxs-lookup"><span data-stu-id="625db-108">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.StyleCollection.getItem
    summary: |-
      <span data-ttu-id="625db-109">名前に基づいてスタイルを取得します。</span><span class="sxs-lookup"><span data-stu-id="625db-109">Gets a style by name.</span></span>

      <span data-ttu-id="625db-110">\[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="625db-110">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(name)
    fullName: getItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): Excel.Style;'
      return:
        type:
          - excel.Excel.Style
        description: |-


          #### <a name="examples"></a><span data-ttu-id="625db-111">例</span><span class="sxs-lookup"><span data-stu-id="625db-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          });
          ```
      parameters:
        - id: name
          description: <span data-ttu-id="625db-112">取得するスタイルの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="625db-112">Name of the style to be retrieved.</span></span>
          type:
            - string
  - uid: excel_release.Excel.StyleCollection.items
    summary: <span data-ttu-id="625db-113">このコレクション内に読み込まれた子アイテムを取得します。</span><span class="sxs-lookup"><span data-stu-id="625db-113">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Style[];'
      return:
        type:
          - 'Excel.Style[]'
  - uid: excel_release.Excel.StyleCollection.load
    summary: <span data-ttu-id="625db-114">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="625db-114">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="625db-115">プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="625db-115">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="625db-116">このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="625db-116">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="625db-117">`load(option?: string | string[]): Excel.StyleCollection`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。</span><span class="sxs-lookup"><span data-stu-id="625db-117">`load(option?: string | string[]): Excel.StyleCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="625db-118">`load(option?: { select?: string; expand?: string; }): Excel.StyleCollection`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。</span><span class="sxs-lookup"><span data-stu-id="625db-118">`load(option?: { select?: string; expand?: string; }): Excel.StyleCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="625db-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.StyleCollection`-コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="625db-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.StyleCollection` - Only available on collection types.</span></span> <span data-ttu-id="625db-120">これは、前述の署名に似ています。</span><span class="sxs-lookup"><span data-stu-id="625db-120">It is similar to the preceding signature.</span></span> <span data-ttu-id="625db-121">top は、結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="625db-121">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="625db-122">省略すると、スキップされ、結果に含まれないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="625db-122">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="625db-123">option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="625db-123">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.StyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.StyleCollection;'
      return:
        type:
          - excel.Excel.StyleCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.StyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel_release.Excel.StyleCollection.load_1
    summary: <span data-ttu-id="625db-124">オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。</span><span class="sxs-lookup"><span data-stu-id="625db-124">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="625db-125">プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="625db-125">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.StyleCollection;'
      return:
        type:
          - excel.Excel.StyleCollection
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="625db-126">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="625db-126">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.StyleCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.StyleCollection;'
      return:
        type:
          - excel.Excel.StyleCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel_release.Excel.StyleCollection.toJSON
    summary: '<span data-ttu-id="625db-127">API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="625db-127">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="625db-128">.</span><span class="sxs-lookup"><span data-stu-id="625db-128"></span></span> <span data-ttu-id="625db-129">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="625db-129"></span></span><!-- --><span data-ttu-id="625db-130">その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元`Excel.StyleCollection`のオブジェクトは API オブジェクトであるのに`toJSON`対し、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.StyleCollectionData`</span><span class="sxs-lookup"><span data-stu-id="625db-130">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.StyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.StyleCollectionData`</span></span><!-- --><span data-ttu-id="625db-131">) を使用して、コレクションのアイテムから読み込まれたプロパティの浅いコピーを持つ "items" 配列を含みます。</span><span class="sxs-lookup"><span data-stu-id="625db-131">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.StyleCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.StyleCollectionData
        description: ''