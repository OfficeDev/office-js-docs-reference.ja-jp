### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.ConditionalFormat
    summary: |-
      条件付き書式の範囲、形式、ルール、およびその他のプロパティをカプセル化するオブジェクト。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.ConditionalFormat.cellValue
      - excel_release.Excel.ConditionalFormat.cellValueOrNullObject
      - excel_release.Excel.ConditionalFormat.colorScale
      - excel_release.Excel.ConditionalFormat.colorScaleOrNullObject
      - excel_release.Excel.ConditionalFormat.context
      - excel_release.Excel.ConditionalFormat.custom
      - excel_release.Excel.ConditionalFormat.customOrNullObject
      - excel_release.Excel.ConditionalFormat.dataBar
      - excel_release.Excel.ConditionalFormat.dataBarOrNullObject
      - excel_release.Excel.ConditionalFormat.delete
      - excel_release.Excel.ConditionalFormat.getRange
      - excel_release.Excel.ConditionalFormat.getRangeOrNullObject
      - excel_release.Excel.ConditionalFormat.iconSet
      - excel_release.Excel.ConditionalFormat.iconSetOrNullObject
      - excel_release.Excel.ConditionalFormat.id
      - excel_release.Excel.ConditionalFormat.load
      - excel_release.Excel.ConditionalFormat.load_1
      - excel_release.Excel.ConditionalFormat.load_2
      - excel_release.Excel.ConditionalFormat.preset
      - excel_release.Excel.ConditionalFormat.presetOrNullObject
      - excel_release.Excel.ConditionalFormat.priority
      - excel_release.Excel.ConditionalFormat.set
      - excel_release.Excel.ConditionalFormat.set_1
      - excel_release.Excel.ConditionalFormat.stopIfTrue
      - excel_release.Excel.ConditionalFormat.textComparison
      - excel_release.Excel.ConditionalFormat.textComparisonOrNullObject
      - excel_release.Excel.ConditionalFormat.toJSON
      - excel_release.Excel.ConditionalFormat.topBottom
      - excel_release.Excel.ConditionalFormat.topBottomOrNullObject
      - excel_release.Excel.ConditionalFormat.type
  - uid: excel_release.Excel.ConditionalFormat.cellValue
    summary: |-
      現在の条件付き書式が cellvalue 型の場合は、セル値の条件付き書式プロパティを返します。 たとえば、5 ~ 10 の範囲のすべてのセルの書式を設定します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.cellValueOrNullObject
    summary: |-
      現在の条件付き書式が cellvalue 型の場合は、セル値の条件付き書式プロパティを返します。 たとえば、5 ~ 10 の範囲のすべてのセルの書式を設定します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.colorScale
    summary: |-
      現在の条件付き書式が ColorScale 型の場合は、ColorScale 条件付き書式プロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.colorScaleOrNullObject
    summary: |-
      現在の条件付き書式が ColorScale 型の場合は、ColorScale 条件付き書式プロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.context
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.ConditionalFormat.custom
    summary: |-
      現在の条件付き書式がカスタム型の場合は、カスタムの条件付き書式プロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.customOrNullObject
    summary: |-
      現在の条件付き書式がカスタム型の場合は、カスタムの条件付き書式プロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.dataBar
    summary: |-
      現在の条件付き書式がデータバーの場合、データバーのプロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.dataBarOrNullObject
    summary: |-
      現在の条件付き書式がデータバーの場合、データバーのプロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.delete
    summary: |-
      この条件付き書式を削除します。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.ConditionalFormat.getRange
    summary: |-
      条件付き書式が適用された範囲を返す。 複数の範囲に条件付き書式を適用すると、エラーがスローされます。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.getRangeOrNullObject
    summary: |-
      conditonal 書式が適用される範囲を返します。または、複数の範囲に条件付き書式が適用されている場合は、null オブジェクトを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel_release.Excel.ConditionalFormat.iconSet
    summary: |-
      現在の条件付き書式が IconSet 型の場合は、IconSet 条件付き書式プロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.iconSetOrNullObject
    summary: |-
      現在の条件付き書式が IconSet 型の場合は、IconSet 条件付き書式プロパティを返します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.id
    summary: |-
      現在の ConditionalFormatCollection 内での条件付き書式の優先順位。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.ConditionalFormat.load
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。
    remarks: |-
      このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。

      `load(option?: string | string[]): Excel.ConditionalFormat`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。

      `load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.ConditionalFormatLoadOptions
  - uid: excel_release.Excel.ConditionalFormat.load_1
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.ConditionalFormat.load_2
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.ConditionalFormat.preset
    summary: |-
      事前設定の条件の条件付き書式を返します。 詳細については、「PresetCriteriaConditionalFormat」を参照してください。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.presetOrNullObject
    summary: |-
      事前設定の条件の条件付き書式を返します。 詳細については、「PresetCriteriaConditionalFormat」を参照してください。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.priority
    summary: |-
      この条件付き書式が現在存在している条件付き書式コレクション内の優先度 (またはインデックス)。 これを変更すると、他の条件付き書式の優先度も変更され、連続した優先順位を使用できるようになります。 最背面から開始するには、負の優先順位を使用します。 範囲よりも大きい優先度が取得され、最大値 (負の場合は負の値) に設定されます。 また、優先度を変更する場合は、変更を加える必要がある場合は、新しい優先度の場所でオブジェクトの新しいコピーを取得し直す必要があることにも注意してください。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.ConditionalFormat.set
    summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
    remarks: |-
      このメソッドには、次の追加のシグネチャがあります。

      `set(properties: Excel.ConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
          type:
            - Interfaces.ConditionalFormatUpdateData
        - id: options
          description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.ConditionalFormat.set_1
    summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.ConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.stopIfTrue
    summary: |-
      この条件付き書式の条件が満たされた場合、優先順位の低い書式はそのセルに影響を及ぼしません。 このような stop iftrue の概念が存在しないため、(a) を使用する場合は、(a)

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.ConditionalFormat.textComparison
    summary: |-
      現在の条件付き書式がテキスト型の場合、特定のテキスト条件付き書式プロパティを返します。 たとえば、"Text" という単語に一致するセルの書式を設定します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalFormat.textComparisonOrNullObject
    summary: |-
      現在の条件付き書式がテキスト型の場合、特定のテキスト条件付き書式プロパティを返します。 たとえば、"Text" という単語に一致するセルの書式を設定します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.toJSON
    summary: API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の conditionalformat オブジェクトは API オブジェクトであるのに対し、 `toJSON`メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.ConditionalFormatData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type:
          - excel.Excel.Interfaces.ConditionalFormatData
        description: ''
  - uid: excel_release.Excel.ConditionalFormat.topBottom
    summary: |-
      現在の条件付き書式が topbottom 型の場合、上位/下位条件付き書式プロパティを返します。 たとえば、上位 10% または下位10個のアイテムを書式設定します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.topBottomOrNullObject
    summary: |-
      現在の条件付き書式が topbottom 型の場合、上位/下位条件付き書式プロパティを返します。 たとえば、上位 10% または下位10個のアイテムを書式設定します。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel_release.Excel.ConditionalFormat.type
    summary: |-
      条件付き書式の種類を指定します。 一度に設定できるのは1つだけです。 読み取り専用です。

      \[[API セット: excelapi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```