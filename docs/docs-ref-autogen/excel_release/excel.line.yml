### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.Line
    summary: |-
      ワークシート内の行を表します。 対応する Shape オブジェクトを取得するには、`Line.shape`<!-- -->.

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.Line
    fullName: Excel.Line
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.Line.beginArrowheadLength
      - excel_release.Excel.Line.beginArrowheadStyle
      - excel_release.Excel.Line.beginArrowheadWidth
      - excel_release.Excel.Line.beginConnectedShape
      - excel_release.Excel.Line.beginConnectedSite
      - excel_release.Excel.Line.connectBeginShape
      - excel_release.Excel.Line.connectEndShape
      - excel_release.Excel.Line.connectorType
      - excel_release.Excel.Line.context
      - excel_release.Excel.Line.disconnectBeginShape
      - excel_release.Excel.Line.disconnectEndShape
      - excel_release.Excel.Line.endArrowheadLength
      - excel_release.Excel.Line.endArrowheadStyle
      - excel_release.Excel.Line.endArrowheadWidth
      - excel_release.Excel.Line.endConnectedShape
      - excel_release.Excel.Line.endConnectedSite
      - excel_release.Excel.Line.id
      - excel_release.Excel.Line.isBeginConnected
      - excel_release.Excel.Line.isEndConnected
      - excel_release.Excel.Line.load
      - excel_release.Excel.Line.load_1
      - excel_release.Excel.Line.load_2
      - excel_release.Excel.Line.set
      - excel_release.Excel.Line.set_1
      - excel_release.Excel.Line.shape
      - excel_release.Excel.Line.toJSON
  - uid: excel_release.Excel.Line.beginArrowheadLength
    summary: |-
      指定された線の始点の矢印の長さを表します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: beginArrowheadLength
    fullName: beginArrowheadLength
    langs:
      - typeScript
    type: property
    syntax:
      content: 'beginArrowheadLength: Excel.ArrowheadLength | "Short" | "Medium" | "Long";'
      return:
        type:
          - Excel.ArrowheadLength | "Short" | "Medium" | "Long"
  - uid: excel_release.Excel.Line.beginArrowheadStyle
    summary: |-
      指定された線の始点の矢印のスタイルを表します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: beginArrowheadStyle
    fullName: beginArrowheadStyle
    langs:
      - typeScript
    type: property
    syntax:
      content: 'beginArrowheadStyle: Excel.ArrowheadStyle | "None" | "Triangle" | "Stealth" | "Diamond" | "Oval" | "Open";'
      return:
        type:
          - Excel.ArrowheadStyle | "None" | "Triangle" | "Stealth" | "Diamond" | "Oval" | "Open"
  - uid: excel_release.Excel.Line.beginArrowheadWidth
    summary: |-
      指定された線の始点の矢印の幅を表します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: beginArrowheadWidth
    fullName: beginArrowheadWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'beginArrowheadWidth: Excel.ArrowheadWidth | "Narrow" | "Medium" | "Wide";'
      return:
        type:
          - Excel.ArrowheadWidth | "Narrow" | "Medium" | "Wide"
  - uid: excel_release.Excel.Line.beginConnectedShape
    summary: |-
      指定された線の始点が接続されている図形を表します。 読み取り専用です。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: beginConnectedShape
    fullName: beginConnectedShape
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly beginConnectedShape: Excel.Shape;'
      return:
        type:
          - excel.Excel.Shape
  - uid: excel_release.Excel.Line.beginConnectedSite
    summary: |-
      コネクタの始点が接続されている結合点を表します。 読み取り専用です。 線の始点がどの図形にも接続されていない場合は、null を返します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: beginConnectedSite
    fullName: beginConnectedSite
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly beginConnectedSite: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Line.connectBeginShape
    summary: |-
      指定されたコネクタの始点を指定された図形に接続します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'connectBeginShape(shape, connectionSite)'
    fullName: 'connectBeginShape(shape, connectionSite)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'connectBeginShape(shape: Excel.Shape, connectionSite: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              const line = shapes.getItem("StraightLine").line;
              line.connectBeginShape(shapes.getItem("Left"), 2);
              line.connectEndShape(shapes.getItem("Right"), 0);
              await context.sync();
          });
          ```
      parameters:
        - id: shape
          description: 接続する図形を示します。
          type:
            - excel.Excel.Shape
        - id: connectionSite
          description: コネクタの始点が接続される図形の接続サイトです。 指定した図形の 0 (両端を含む) と、指定した図形の接続サイト数 (排他) の間の整数である必要があります。
          type:
            - number
  - uid: excel_release.Excel.Line.connectEndShape
    summary: |-
      指定されたコネクタの終点を指定された図形に接続します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'connectEndShape(shape, connectionSite)'
    fullName: 'connectEndShape(shape, connectionSite)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'connectEndShape(shape: Excel.Shape, connectionSite: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              const line = shapes.getItem("StraightLine").line;
              line.connectBeginShape(shapes.getItem("Left"), 2);
              line.connectEndShape(shapes.getItem("Right"), 0);
              await context.sync();
          });
          ```
      parameters:
        - id: shape
          description: 接続する図形を示します。
          type:
            - excel.Excel.Shape
        - id: connectionSite
          description: コネクタの終点が接続されている図形の接続サイトを指定します。 指定した図形の 0 (両端を含む) と、指定した図形の接続サイト数 (排他) の間の整数である必要があります。
          type:
            - number
  - uid: excel_release.Excel.Line.connectorType
    summary: |-
      線のコネクタの種類を表します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: connectorType
    fullName: connectorType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'connectorType: Excel.ConnectorType | "Straight" | "Elbow" | "Curve";'
      return:
        type:
          - Excel.ConnectorType | "Straight" | "Elbow" | "Curve"
  - uid: excel_release.Excel.Line.context
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.Line.disconnectBeginShape
    summary: |-
      指定されたコネクタの始点を図形から切り離します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: disconnectBeginShape()
    fullName: disconnectBeginShape()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'disconnectBeginShape(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              const line = shapes.getItem("StraightLine").line;
              line.disconnectBeginShape();
              line.disconnectEndShape();
              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Line.disconnectEndShape
    summary: |-
      指定されたコネクタの終点を図形から切り離します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: disconnectEndShape()
    fullName: disconnectEndShape()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'disconnectEndShape(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```typescript
          await Excel.run(async (context) => {
              const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              const line = shapes.getItem("StraightLine").line;
              line.disconnectBeginShape();
              line.disconnectEndShape();
              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Line.endArrowheadLength
    summary: |-
      指定された線の終点の矢印の長さを表します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: endArrowheadLength
    fullName: endArrowheadLength
    langs:
      - typeScript
    type: property
    syntax:
      content: 'endArrowheadLength: Excel.ArrowheadLength | "Short" | "Medium" | "Long";'
      return:
        type:
          - Excel.ArrowheadLength | "Short" | "Medium" | "Long"
  - uid: excel_release.Excel.Line.endArrowheadStyle
    summary: |-
      指定された線の終点の矢印のスタイルを表します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: endArrowheadStyle
    fullName: endArrowheadStyle
    langs:
      - typeScript
    type: property
    syntax:
      content: 'endArrowheadStyle: Excel.ArrowheadStyle | "None" | "Triangle" | "Stealth" | "Diamond" | "Oval" | "Open";'
      return:
        type:
          - Excel.ArrowheadStyle | "None" | "Triangle" | "Stealth" | "Diamond" | "Oval" | "Open"
  - uid: excel_release.Excel.Line.endArrowheadWidth
    summary: |-
      指定された線の終点の矢印の幅を表します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: endArrowheadWidth
    fullName: endArrowheadWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'endArrowheadWidth: Excel.ArrowheadWidth | "Narrow" | "Medium" | "Wide";'
      return:
        type:
          - Excel.ArrowheadWidth | "Narrow" | "Medium" | "Wide"
  - uid: excel_release.Excel.Line.endConnectedShape
    summary: |-
      指定された線の終点が接続されている図形を表します。 読み取り専用です。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: endConnectedShape
    fullName: endConnectedShape
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly endConnectedShape: Excel.Shape;'
      return:
        type:
          - excel.Excel.Shape
  - uid: excel_release.Excel.Line.endConnectedSite
    summary: |-
      コネクタの終点が接続されている結合点を表します。 読み取り専用です。 線の終点がどの図形にも接続されていない場合は、null を返します。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: endConnectedSite
    fullName: endConnectedSite
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly endConnectedSite: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Line.id
    summary: |-
      図形 ID を表します。 読み取り専用です。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.Line.isBeginConnected
    summary: |-
      指定された線の始点が図形に接続されているかどうかを指定します。 読み取り専用です。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: isBeginConnected
    fullName: isBeginConnected
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isBeginConnected: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Line.isEndConnected
    summary: |-
      指定された線の終点が図形に接続されているかどうかを指定します。 読み取り専用です。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: isEndConnected
    fullName: isEndConnected
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEndConnected: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Line.load
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。
    remarks: |-
      このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。

      `load(option?: string | string[]): Excel.Line`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。

      `load(option?: { select?: string; expand?: string; }): Excel.Line`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Line`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 Top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.LineLoadOptions): Excel.Line;'
      return:
        type:
          - excel.Excel.Line
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.LineLoadOptions
  - uid: excel_release.Excel.Line.load_1
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Line;'
      return:
        type:
          - excel.Excel.Line
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.Line.load_2
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Line;'
      return:
        type:
          - excel.Excel.Line
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.Line.set
    summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
    remarks: |-
      このメソッドには、次の追加のシグネチャがあります。

      `set(properties: Excel.Line): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.LineUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
          type:
            - Interfaces.LineUpdateData
        - id: options
          description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.Line.set_1
    summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Line): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Line
  - uid: excel_release.Excel.Line.shape
    summary: |-
      線に関連付けられた Shape オブジェクトを返します。 読み取り専用です。

      \[[API セット: excelapi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: shape
    fullName: shape
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shape: Excel.Shape;'
      return:
        type:
          - excel.Excel.Shape
  - uid: excel_release.Excel.Line.toJSON
    summary: API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の Excel の Line オブジェクトは API オブジェクトであるのに`toJSON`対して、メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Excel.Interfaces.LineData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.LineData;'
      return:
        type:
          - excel.Excel.Interfaces.LineData
        description: ''