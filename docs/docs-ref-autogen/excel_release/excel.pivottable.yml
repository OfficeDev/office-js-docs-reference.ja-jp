### YamlMime:UniversalReference
ms.openlocfilehash: bc724ea7fc6e5a67dd34313d83f94878fd6f9895
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/20/2019
ms.locfileid: "30105497"
items:
- uid: excel_release.Excel.PivotTable
  summary: >-
    Excel のピボットテーブルを表します。


    \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.PivotTable
  fullName: Excel.PivotTable
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.PivotTable.columnHierarchies
  - excel_release.Excel.PivotTable.context
  - excel_release.Excel.PivotTable.dataHierarchies
  - excel_release.Excel.PivotTable.delete
  - excel_release.Excel.PivotTable.filterHierarchies
  - excel_release.Excel.PivotTable.hierarchies
  - excel_release.Excel.PivotTable.id
  - excel_release.Excel.PivotTable.layout
  - excel_release.Excel.PivotTable.load
  - excel_release.Excel.PivotTable.load_1
  - excel_release.Excel.PivotTable.load_2
  - excel_release.Excel.PivotTable.name
  - excel_release.Excel.PivotTable.refresh
  - excel_release.Excel.PivotTable.rowHierarchies
  - excel_release.Excel.PivotTable.set
  - excel_release.Excel.PivotTable.set_1
  - excel_release.Excel.PivotTable.toJSON
  - excel_release.Excel.PivotTable.worksheet
- uid: excel_release.Excel.PivotTable.columnHierarchies
  summary: >-
    ピボットテーブルの列ピボット階層。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: columnHierarchies
  fullName: columnHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnHierarchies: Excel.RowColumnPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.RowColumnPivotHierarchyCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");       \n\n    // check if the PivotTable already has a column\n    const column = pivotTable.columnHierarchies.getItemOrNullObject(\"Farm\");\n    column.load(\"id\");\n    await context.sync();\n\n    if (column.isNullObject) {\n        // ading the farm column to the column hierarchy automatically removes it from the row hierarchy\n        pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n    } else {\n        pivotTable.columnHierarchies.remove(column);\n    }\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.PivotTable.context
  summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.PivotTable.dataHierarchies
  summary: >-
    ピボットテーブルのデータ ピボット階層。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: dataHierarchies
  fullName: dataHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataHierarchies: Excel.DataPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.DataPivotHierarchyCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold at Farm\"));\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold Wholesale\"));\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.PivotTable.delete
  summary: >-
    ピボットテーブルを削除します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    context.workbook.worksheets.getItem(\"Pivot\").pivotTables.getItem(\"Farm Sales\").delete();\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.PivotTable.filterHierarchies
  summary: >-
    ピボットテーブルのフィルター ピボット階層。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: filterHierarchies
  fullName: filterHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly filterHierarchies: Excel.FilterPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.FilterPivotHierarchyCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nasync function filter(functionType: Excel.AggregationFunction) {\n    await Excel.run(async (context) => {\n        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n        const filters = pivotTable.filterHierarchies;\n        const filter = filters.getItemOrNullObject(\"Classification\");\n        filter.load();\n        await context.sync();\n\n        // add the Classification hierarchy to the filter, if it's not already there\n        if (filter.isNullObject) {\n            filters.add(pivotTable.hierarchies.getItem(\"Classification\"));\n            await context.sync();\n        }\n    });\n}\n```"
- uid: excel_release.Excel.PivotTable.hierarchies
  summary: >-
    ピボットテーブルのピボット階層。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: hierarchies
  fullName: hierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly hierarchies: Excel.PivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.PivotHierarchyCollection
- uid: excel_release.Excel.PivotTable.id
  summary: >-
    ピボットテーブルの ID。読み取り専用です。


    \[[API セット: excelapi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel_release.Excel.PivotTable.layout
  summary: >-
    ピボットテーブルのレイアウトとビジュアル構造を記述する PivotLayout。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: layout
  fullName: layout
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly layout: Excel.PivotLayout;'
    return:
      type:
      - excel.Excel.PivotLayout
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.layout.load(\"layoutType\");\n    await context.sync();\n\n    // cycle between the three layout types\n    if (pivotTable.layout.layoutType === \"Compact\") {\n        pivotTable.layout.layoutType = \"Outline\";\n    } else if (pivotTable.layout.layoutType === \"Outline\") {\n        pivotTable.layout.layoutType = \"Tabular\";\n    } else {\n        pivotTable.layout.layoutType = \"Compact\";\n    }\n    await context.sync();\n    console.log(\"Pivot layout is now \" + pivotTable.layout.layoutType);\n});\n```"
- uid: excel_release.Excel.PivotTable.load
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る前に、"context. sync ()" を呼び出す必要があります。
  remarks: >-
    このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。


    `load(option?: string | string[]): Excel.PivotTable`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。


    `load(option?: { select?: string; expand?: string; }): Excel.PivotTable`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotTable`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.PivotTableLoadOptions): Excel.PivotTable;'
    return:
      type:
      - excel.Excel.PivotTable
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.PivotTableLoadOptions
- uid: excel_release.Excel.PivotTable.load_1
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.PivotTable;'
    return:
      type:
      - excel.Excel.PivotTable
      description: ''
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type:
      - string | string[]
- uid: excel_release.Excel.PivotTable.load_2
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.PivotTable;'
    return:
      type:
      - excel.Excel.PivotTable
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel_release.Excel.PivotTable.name
  summary: >-
    ピボットテーブルの名前。


    \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel_release.Excel.PivotTable.refresh
  summary: >-
    ピボットテーブルを更新します。


    \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: refresh()
  fullName: refresh()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'refresh(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel_release.Excel.PivotTable.rowHierarchies
  summary: >-
    ピボットテーブルの行ピボット階層。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rowHierarchies
  fullName: rowHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowHierarchies: Excel.RowColumnPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.RowColumnPivotHierarchyCollection
- uid: excel_release.Excel.PivotTable.set
  summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
  remarks: >-
    このメソッドには、次の追加のシグネチャがあります。


    `set(properties: Excel.PivotTable): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.PivotTableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
      type:
      - Interfaces.PivotTableUpdateData
    - id: options
      description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel_release.Excel.PivotTable.set_1
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.PivotTable): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.PivotTable
- uid: excel_release.Excel.PivotTable.toJSON
  summary: API オブジェクトが`toJSON()`渡さ`JSON.stringify()` <!-- -->れるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。 (`JSON.stringify`<!-- -->つまり、によって渡さ`toJSON`れたオブジェクトのメソッドが呼び出されます)。元の PivotTable オブジェクトは API オブジェクトであるのに対し、 `toJSON`メソッドは、元のオブジェクトから読み込まれ`Excel.Interfaces.PivotTableData` <!-- -->た子プロパティの浅いコピーを含む、プレーンな JavaScript オブジェクト (として型指定) を返します。
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.PivotTableData;'
    return:
      type:
      - excel.Excel.Interfaces.PivotTableData
      description: ''
- uid: excel_release.Excel.PivotTable.worksheet
  summary: >-
    現在のピボットテーブルを含むワークシートです。


    \[[API セット: excelapi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: worksheet
  fullName: worksheet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
