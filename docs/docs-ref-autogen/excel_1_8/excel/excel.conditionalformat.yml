### YamlMime:TSType
name: Excel.ConditionalFormat
uid: excel!Excel.ConditionalFormat:class
package: excel!
fullName: Excel.ConditionalFormat
summary: >-
  条件付き書式の範囲、形式、ルール、その他のプロパティをカプセル化するオブジェクト。 条件付き書式オブジェクト モデルの詳細については、「条件付き書式を [Excel の範囲に適用する」を参照してください。](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!-- -->.


  \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: cellValue
  uid: excel!Excel.ConditionalFormat#cellValue:member
  package: excel!
  fullName: cellValue
  summary: >-
    現在の条件付き書式が型の場合、セル値の条件付き書式プロパティを返 `CellValue` します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CellValueConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- name: cellValueOrNullObject
  uid: excel!Excel.ConditionalFormat#cellValueOrNullObject:member
  package: excel!
  fullName: cellValueOrNullObject
  summary: >-
    現在の条件付き書式が型の場合、セル値の条件付き書式プロパティを返 `CellValue` します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CellValueConditionalFormat:class" />
- name: colorScale
  uid: excel!Excel.ConditionalFormat#colorScale:member
  package: excel!
  fullName: colorScale
  summary: >-
    現在の条件付き書式が型の場合は、色スケールの条件付き書式プロパティを返 `ColorScale` します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.ColorScaleConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
- name: colorScaleOrNullObject
  uid: excel!Excel.ConditionalFormat#colorScaleOrNullObject:member
  package: excel!
  fullName: colorScaleOrNullObject
  summary: >-
    現在の条件付き書式が型の場合は、色スケールの条件付き書式プロパティを返 `ColorScale` します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.ColorScaleConditionalFormat:class" />
- name: context
  uid: excel!Excel.ConditionalFormat#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これにより、アドインのプロセスがホスト アプリケーションのプロセスOfficeに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: custom
  uid: excel!Excel.ConditionalFormat#custom:member
  package: excel!
  fullName: custom
  summary: >-
    現在の条件付き書式がカスタム型の場合は、カスタムの条件付き書式プロパティを返します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly custom: Excel.CustomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CustomConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- name: customOrNullObject
  uid: excel!Excel.ConditionalFormat#customOrNullObject:member
  package: excel!
  fullName: customOrNullObject
  summary: >-
    現在の条件付き書式がカスタム型の場合は、カスタムの条件付き書式プロパティを返します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CustomConditionalFormat:class" />
- name: dataBar
  uid: excel!Excel.ConditionalFormat#dataBar:member
  package: excel!
  fullName: dataBar
  summary: >-
    現在の条件付き書式がデータ バーの場合は、データ バーのプロパティを返します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.DataBarConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.dataBar);\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n\n    await context.sync();\n});\n```"
- name: dataBarOrNullObject
  uid: excel!Excel.ConditionalFormat#dataBarOrNullObject:member
  package: excel!
  fullName: dataBarOrNullObject
  summary: >-
    現在の条件付き書式がデータ バーの場合は、データ バーのプロパティを返します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.DataBarConditionalFormat:class" />
- name: iconSet
  uid: excel!Excel.ConditionalFormat#iconSet:member
  package: excel!
  fullName: iconSet
  summary: >-
    現在の条件付き書式が型の場合は、アイコン セットの条件付き書式プロパティを返 `IconSet` します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.IconSetConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- name: iconSetOrNullObject
  uid: excel!Excel.ConditionalFormat#iconSetOrNullObject:member
  package: excel!
  fullName: iconSetOrNullObject
  summary: >-
    現在の条件付き書式が型の場合は、アイコン セットの条件付き書式プロパティを返 `IconSet` します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.IconSetConditionalFormat:class" />
- name: id
  uid: excel!Excel.ConditionalFormat#id:member
  package: excel!
  fullName: id
  summary: >-
    現在の条件付き書式の優先度 `ConditionalFormatCollection`<!-- -->.


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: preset
  uid: excel!Excel.ConditionalFormat#preset:member
  package: excel!
  fullName: preset
  summary: >-
    事前設定された条件の条件付き書式を返します。 詳細は、「`Excel.PresetCriteriaConditionalFormat`」をご覧ください。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.PresetCriteriaConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };\n\n    await context.sync();\n});\n```"
- name: presetOrNullObject
  uid: excel!Excel.ConditionalFormat#presetOrNullObject:member
  package: excel!
  fullName: presetOrNullObject
  summary: >-
    事前設定された条件の条件付き書式を返します。 詳細は、「`Excel.PresetCriteriaConditionalFormat`」をご覧ください。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.PresetCriteriaConditionalFormat:class" />
- name: priority
  uid: excel!Excel.ConditionalFormat#priority:member
  package: excel!
  fullName: priority
  summary: >-
    この条件付き書式が現在存在する条件付き書式コレクション内の優先度 (またはインデックス)。 これを変更すると、他の条件付き書式の優先度も変更されます。これにより、連続する優先度の順序が可能になります。 背面から開始するには、負の優先度を使用します。 境界より大きい優先度は、最大値 (または負の場合は最小) の優先度に設定されます。 また、優先度を変更する場合は、そのオブジェクトにさらに変更を加える場合は、その新しい優先度の場所でオブジェクトの新しいコピーを再フェッチする必要があります。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'priority: number;'
    return:
      type: number
- name: stopIfTrue
  uid: excel!Excel.ConditionalFormat#stopIfTrue:member
  package: excel!
  fullName: stopIfTrue
  summary: >-
    この条件付き書式の条件が満たされた場合、優先順位の低い書式はそのセルに影響を及ぼしません。 値は、データ バー、アイコン セット、およびカラー スケールに関する概念を `null` `StopIfTrue` 示す値ではありません。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'stopIfTrue: boolean;'
    return:
      type: boolean
- name: textComparison
  uid: excel!Excel.ConditionalFormat#textComparison:member
  package: excel!
  fullName: textComparison
  summary: >-
    現在の条件付き書式がテキスト型の場合は、特定のテキスト条件付き書式プロパティを返します。 たとえば、"Text" という単語に一致するセルを書式設定します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly textComparison: Excel.TextConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TextConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- name: textComparisonOrNullObject
  uid: excel!Excel.ConditionalFormat#textComparisonOrNullObject:member
  package: excel!
  fullName: textComparisonOrNullObject
  summary: >-
    現在の条件付き書式がテキスト型の場合は、特定のテキスト条件付き書式プロパティを返します。 たとえば、"Text" という単語に一致するセルを書式設定します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TextConditionalFormat:class" />
- name: topBottom
  uid: excel!Excel.ConditionalFormat#topBottom:member
  package: excel!
  fullName: topBottom
  summary: >-
    現在の条件付き書式が型の場合は、上/下の条件付き書式プロパティを返 `TopBottom` します。 たとえば、上位 10% または下位 10 アイテムの書式を設定します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TopBottomConditionalFormat:class" />
- name: topBottomOrNullObject
  uid: excel!Excel.ConditionalFormat#topBottomOrNullObject:member
  package: excel!
  fullName: topBottomOrNullObject
  summary: >-
    現在の条件付き書式が型の場合は、上/下の条件付き書式プロパティを返 `TopBottom` します。 たとえば、上位 10% または下位 10 アイテムの書式を設定します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TopBottomConditionalFormat:class" />
- name: type
  uid: excel!Excel.ConditionalFormat#type:member
  package: excel!
  fullName: type
  summary: >-
    条件付き書式の種類。 一度に設定できる設定は 1 つのみです。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
    return:
      type: <xref uid="excel!Excel.ConditionalFormatType:enum" /> | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
methods:
- name: delete()
  uid: excel!Excel.ConditionalFormat#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    この条件付き書式を削除します。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: getRange()
  uid: excel!Excel.ConditionalFormat#getRange:member(1)
  package: excel!
  fullName: getRange()
  summary: >-
    条件付き書式が適用された範囲を返す。 条件付き書式が複数の範囲に適用されている場合、エラーをスローします。


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
- name: getRangeOrNullObject()
  uid: excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)
  package: excel!
  fullName: getRangeOrNullObject()
  summary: >-
    conditonal 形式が適用される範囲を返します。 条件付き書式が複数の範囲に適用されている場合、この関数はプロパティを次に設定した `isNullObject` オブジェクトを返します。 `true`<!-- -->. 詳細については [、「*OrNullObject メソッドとプロパティ」を参照してください。](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API セット: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeOrNullObject(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.ConditionalFormat#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティのオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ConditionalFormat#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定するコンマ区切り文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.ConditionalFormat#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.ConditionalFormat;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマ区切りの文字列で、読み込むナビゲーション プロパティを指定するコンマ区切 `propertyNamesAndPaths.expand` りの文字列です。'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.ConditionalFormat#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: オブジェクトの複数のプロパティを同時に設定します。 適切なプロパティを持つプレーン オブジェクト、または同じ種類の別の API オブジェクトを渡します。
  remarks: >-
    このメソッドには、次の追加の署名があります。


    `set(properties: Excel.ConditionalFormat): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティと同型的に構造化されたプロパティを持つ JavaScript オブジェクト。
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatUpdateData:interface" />
    - id: options
      description: properties オブジェクトが読み取り専用プロパティを設定しようとすると、エラーを抑制するオプションを提供します。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.ConditionalFormat#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクト上の複数のプロパティを同時に設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.ConditionalFormat): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.ConditionalFormat#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: API オブジェクトを渡す際に、より有用な出力を提供するために `toJSON()` JavaScript メソッドをオーバーライドします。 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->、順番に、渡 `toJSON` されるオブジェクトのメソッドを呼び出します。元の Excel.ConditionalFormat オブジェクトが API オブジェクトであるのに対し、メソッドはプレーンな JavaScript オブジェクト (次のように入力) `toJSON` を返します。 `Excel.Interfaces.ConditionalFormatData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを含む。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 27a1d16b47079c8f29ab34f88d138bc3fbd43fce
  ms.sourcegitcommit: ce09743deb2fc2a879cd63f96c8ff11ec84a42b2
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 04/02/2021
  ms.locfileid: "51514777"
