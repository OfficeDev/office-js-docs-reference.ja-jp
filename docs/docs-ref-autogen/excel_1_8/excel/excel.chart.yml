### YamlMime:TSType
name: Excel.Chart
uid: excel!Excel.Chart:class
package: excel!
fullName: Excel.Chart
summary: >-
  ブック内のグラフ オブジェクトを表します。 グラフオブジェクトモデルの詳細については、「 [Excel JAVASCRIPT API を使用してグラフを操作](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-charts)する」を参照してください。<!-- -->.


  \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: axes
  uid: excel!Excel.Chart#axes:member
  package: excel!
  fullName: axes
  summary: >-
    グラフの軸を表します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly axes: Excel.ChartAxes;'
    return:
      type: <xref uid="excel!Excel.ChartAxes:class" />
- name: categoryLabelLevel
  uid: excel!Excel.Chart#categoryLabelLevel:member
  package: excel!
  fullName: categoryLabelLevel
  summary: >-
    項目ラベルがソースとするレベルを参照する Chartcategory Labellevel 列挙定数を指定します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categoryLabelLevel: number;'
    return:
      type: number
- name: chartType
  uid: excel!Excel.Chart#chartType:member
  package: excel!
  fullName: chartType
  summary: >-
    グラフの種類を指定します。 詳細については、「ChartType」を参照してください。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'chartType: Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel";'
    return:
      type: <xref uid="excel!Excel.ChartType:enum" /> | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel"
- name: context
  uid: excel!Excel.Chart#context:member
  package: excel!
  fullName: context
  summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: dataLabels
  uid: excel!Excel.Chart#dataLabels:member
  package: excel!
  fullName: dataLabels
  summary: >-
    グラフのデータラベルを表します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataLabels: Excel.ChartDataLabels;'
    return:
      type: <xref uid="excel!Excel.ChartDataLabels:class" />
- name: displayBlanksAs
  uid: excel!Excel.Chart#displayBlanksAs:member
  package: excel!
  fullName: displayBlanksAs
  summary: >-
    空白セルをグラフにプロットする方法を指定します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayBlanksAs: Excel.ChartDisplayBlanksAs | "NotPlotted" | "Zero" | "Interplotted";'
    return:
      type: <xref uid="excel!Excel.ChartDisplayBlanksAs:enum" /> | "NotPlotted" | "Zero" | "Interplotted"
- name: format
  uid: excel!Excel.Chart#format:member
  package: excel!
  fullName: format
  summary: >-
    グラフ領域の書式設定プロパティをカプセル化します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: Excel.ChartAreaFormat;'
    return:
      type: <xref uid="excel!Excel.ChartAreaFormat:class" />
- name: height
  uid: excel!Excel.Chart#height:member
  package: excel!
  fullName: height
  summary: >-
    グラフオブジェクトの高さをポイント単位で指定します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'height: number;'
    return:
      type: number
- name: id
  uid: excel!Excel.Chart#id:member
  package: excel!
  fullName: id
  summary: >-
    グラフの一意の ID。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: left
  uid: excel!Excel.Chart#left:member
  package: excel!
  fullName: left
  summary: >-
    グラフの左側からワークシートの原点までの距離 (ポイント単位)。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'left: number;'
    return:
      type: number
- name: legend
  uid: excel!Excel.Chart#legend:member
  package: excel!
  fullName: legend
  summary: >-
    グラフの凡例を表します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly legend: Excel.ChartLegend;'
    return:
      type: <xref uid="excel!Excel.ChartLegend:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Set to show legend of Chart1 and make it on top of the chart.\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.legend.visible = true;\n    chart.legend.position = \"top\"; \n    chart.legend.overlay = false; \n    return ctx.sync().then(function() {\n            console.log(\"Legend Shown \");\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: name
  uid: excel!Excel.Chart#name:member
  package: excel!
  fullName: name
  summary: >-
    グラフオブジェクトの名前を指定します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Rename the chart to new name, resize the chart to 200 points in both height and weight. \n// Move Chart1 to 100 points to the top and left. \nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.name = \"New Name\";\n    chart.top = 100;\n    chart.left = 100;\n    chart.height = 200;\n    chart.width = 200;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: onActivated
  uid: excel!Excel.Chart#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    グラフがアクティブになったときに発生します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (context){\n    var pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem(\"Pie\");\n    pieChart.onActivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The pie chart is the active chart. ID: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onDeactivated
  uid: excel!Excel.Chart#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    グラフが非アクティブになったときに発生します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (context){\n    var pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem(\"Pie\");\n    pieChart.onDeactivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The pie chart is NOT active.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: plotArea
  uid: excel!Excel.Chart#plotArea:member
  package: excel!
  fullName: plotArea
  summary: >-
    グラフのプロット エリアを表します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly plotArea: Excel.ChartPlotArea;'
    return:
      type: <xref uid="excel!Excel.ChartPlotArea:class" />
- name: plotBy
  uid: excel!Excel.Chart#plotBy:member
  package: excel!
  fullName: plotBy
  summary: >-
    列や行がグラフのデータ系列として使用される方法を指定します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'plotBy: Excel.ChartPlotBy | "Rows" | "Columns";'
    return:
      type: <xref uid="excel!Excel.ChartPlotBy:enum" /> | "Rows" | "Columns"
- name: plotVisibleOnly
  uid: excel!Excel.Chart#plotVisibleOnly:member
  package: excel!
  fullName: plotVisibleOnly
  summary: >-
    true の場合、可視セルだけがプロットされます。 false の場合、可視セルと非表示セルの両方がプロットされます。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'plotVisibleOnly: boolean;'
    return:
      type: boolean
- name: series
  uid: excel!Excel.Chart#series:member
  package: excel!
  fullName: series
  summary: >-
    グラフの 1 つのデータ系列またはデータ系列のコレクションを表します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly series: Excel.ChartSeriesCollection;'
    return:
      type: <xref uid="excel!Excel.ChartSeriesCollection:class" />
- name: seriesNameLevel
  uid: excel!Excel.Chart#seriesNameLevel:member
  package: excel!
  fullName: seriesNameLevel
  summary: >-
    ChartSeriesNameLevel 列挙定数を指定します。この列挙定数は、系列名のソースを指定するレベルを参照します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesNameLevel: number;'
    return:
      type: number
- name: showAllFieldButtons
  uid: excel!Excel.Chart#showAllFieldButtons:member
  package: excel!
  fullName: showAllFieldButtons
  summary: >-
    ピボットグラフのすべてのフィールドボタンを表示するかどうかを指定します。


    \[[API セット: excelapi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showAllFieldButtons: boolean;'
    return:
      type: boolean
- name: showDataLabelsOverMaximum
  uid: excel!Excel.Chart#showDataLabelsOverMaximum:member
  package: excel!
  fullName: showDataLabelsOverMaximum
  summary: >-
    値が数値軸の最大値より大きい場合にデータラベルを表示するかどうかを指定します。 数値軸がデータ要素のサイズよりも小さくなった場合は、このプロパティを使用してデータラベルを表示するかどうかを設定できます。 このプロパティは、2-D グラフにのみ使用できます。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showDataLabelsOverMaximum: boolean;'
    return:
      type: boolean
- name: style
  uid: excel!Excel.Chart#style:member
  package: excel!
  fullName: style
  summary: >-
    グラフのグラフのスタイルを指定します。


    \[[API セット: excelapi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: number;'
    return:
      type: number
- name: title
  uid: excel!Excel.Chart#title:member
  package: excel!
  fullName: title
  summary: >-
    指定したグラフのタイトルのテキスト、可視性、位置、書式などを指定します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly title: Excel.ChartTitle;'
    return:
      type: <xref uid="excel!Excel.ChartTitle:class" />
- name: top
  uid: excel!Excel.Chart#top:member
  package: excel!
  fullName: top
  summary: >-
    オブジェクトの上端から (ワークシートの) 行1の上端またはグラフエリアの上端までの距離をポイント単位で指定します (グラフの場合)。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'top: number;'
    return:
      type: number
- name: width
  uid: excel!Excel.Chart#width:member
  package: excel!
  fullName: width
  summary: >-
    グラフオブジェクトの幅をポイント単位で指定します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'width: number;'
    return:
      type: number
- name: worksheet
  uid: excel!Excel.Chart#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    現在のグラフを含んでいるワークシート。


    \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: delete()
  uid: excel!Excel.Chart#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    グラフ オブジェクトを削除します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getImage(width, height, fittingMode)
  uid: excel!Excel.Chart#getImage:member(1)
  package: excel!
  fullName: getImage(width, height, fittingMode)
  summary: >-
    指定したサイズに合わせてグラフを拡大、縮小することで、グラフを Base64 でエンコードされた画像としてレンダリングします。 縦横比は、サイズ変更の一部として保持されます。


    \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(width?: number, height?: number, fittingMode?: Excel.ImageFittingMode): OfficeExtension.ClientResult<string>;'
    parameters:
    - id: width
      description: (省略可能) 結果の画像の希望する幅。
      type: number
    - id: height
      description: (省略可能) 結果の画像の希望する高さ。
      type: number
    - id: fittingMode
      description: オプション指定した寸法 (高さと幅の両方が設定されている場合) にグラフを拡大または縮小するために使用する方法を指定します。
      type: <xref uid="excel!Excel.ImageFittingMode:enum" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    var image = chart.getImage();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getImage(width, height, fittingModeString)
  uid: excel!Excel.Chart#getImage:member(2)
  package: excel!
  fullName: getImage(width, height, fittingModeString)
  summary: >-
    指定したサイズに合わせてグラフを拡大、縮小することで、グラフを Base64 でエンコードされた画像としてレンダリングします。 縦横比は、サイズ変更の一部として保持されます。


    \[[API セット: excelapi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(width?: number, height?: number, fittingModeString?: "Fit" | "FitAndCenter" | "Fill"): OfficeExtension.ClientResult<string>;'
    parameters:
    - id: width
      description: (省略可能) 結果の画像の希望する幅。
      type: number
    - id: height
      description: (省略可能) 結果の画像の希望する高さ。
      type: number
    - id: fittingModeString
      description: オプション指定した寸法 (高さと幅の両方が設定されている場合) にグラフを拡大または縮小するために使用する方法を指定します。
      type: "\"Fit\" | \"FitAndCenter\" | \"Fill\""
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: ''
- name: load(options)
  uid: excel!Excel.Chart#load:member(1)
  package: excel!
  fullName: load(options)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ChartLoadOptions): Excel.Chart;'
    parameters:
    - id: options
      description: 読み込むオブジェクトのプロパティを指定するオプションを提供します。
      type: <xref uid="excel!Excel.Interfaces.ChartLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Chart#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Chart;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Get a chart named \"Chart1\"\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.load('name');\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Chart#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Chart;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` は、読み込むプロパティを指定するコンマで区切られた文字列で、 `propertyNamesAndPaths.expand` 読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Chart#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
  remarks: >-
    このメソッドには、次の追加のシグネチャがあります。


    `set(properties: Excel.Chart): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ChartUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
      type: <xref uid="excel!Excel.Interfaces.ChartUpdateData:interface" />
    - id: options
      description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Chart#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Chart): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Chart:class" />
    return:
      type: void
      description: ''
- name: setData(sourceData, seriesBy)
  uid: excel!Excel.Chart#setData:member(1)
  package: excel!
  fullName: setData(sourceData, seriesBy)
  summary: >-
    グラフの元データをリセットします。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setData(sourceData: Range, seriesBy?: Excel.ChartSeriesBy): void;'
    parameters:
    - id: sourceData
      description: ソースデータに対応する range オブジェクトを指定します。
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesBy
      description: 列や行がグラフのデータ系列として使用される方法を指定します。 Auto (既定)、行、列のいずれかをすることができます。 詳細については、「Excel Chart系列」を参照してください。
      type: <xref uid="excel!Excel.ChartSeriesBy:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Set the sourceData to be \"A1:B4\" and seriesBy to be \"Columns\"\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    var sourceData = \"A1:B4\";\n    chart.setData(sourceData, \"Columns\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: setData(sourceData, seriesByString)
  uid: excel!Excel.Chart#setData:member(2)
  package: excel!
  fullName: setData(sourceData, seriesByString)
  summary: >-
    グラフの元データをリセットします。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setData(sourceData: Range, seriesByString?: "Auto" | "Columns" | "Rows"): void;'
    parameters:
    - id: sourceData
      description: ソースデータに対応する range オブジェクトを指定します。
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesByString
      description: 列や行がグラフのデータ系列として使用される方法を指定します。 Auto (既定)、行、列のいずれかをすることができます。 詳細については、「Excel Chart系列」を参照してください。
      type: "\"Auto\" | \"Columns\" | \"Rows\""
    return:
      type: void
      description: ''
- name: setPosition(startCell, endCell)
  uid: excel!Excel.Chart#setPosition:member(1)
  package: excel!
  fullName: setPosition(startCell, endCell)
  summary: >-
    ワークシート上のセルを基準にしてグラフを配置します。


    \[[API セット: excelapi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPosition(startCell: Range | string, endCell?: Range | string): void;'
    parameters:
    - id: startCell
      description: 開始セル。これは、グラフの移動先です。開始セルは、ユーザーの右から左への表示の設定に応じて、左上のセルか、右上のセルとなります。
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: endCell
      description: (省略可能) 最後のセル。 指定されている場合、グラフの幅と高さは、このセルまたは範囲を完全にカバーするように設定されます。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Charts\";\n    var rangeSelection = \"A1:B4\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeSelection);\n    var sourceData = sheetName + \"!\" + \"A1:B4\";\n    var chart = ctx.workbook.worksheets.getItem(sheetName).charts.add(\"pie\", range, \"auto\");\n    chart.width = 500;\n    chart.height = 300;\n    chart.setPosition(\"C2\", null);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: toJSON()
  uid: excel!Excel.Chart#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: '`toJSON()`API オブジェクトが渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->`toJSON`その後、渡されたオブジェクトのメソッドを呼び出します。元の Excel の Chart オブジェクトは API オブジェクトであるのに対し、 `toJSON` メソッドはプレーンな JavaScript オブジェクト (として型指定されます) を返します。`Excel.Interfaces.ChartData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ChartData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: aac9b7d174b544d0d9211f7485220c75d2a3078d
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49146411"
