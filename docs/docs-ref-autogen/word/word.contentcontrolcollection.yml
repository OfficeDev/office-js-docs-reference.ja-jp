### YamlMime:UniversalReference
ms.openlocfilehash: 28902f757ec2534ffb391233d808dddc580a0dd3
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 09/28/2018
ms.locfileid: "24048272"
items:
- uid: word.Word.ContentControlCollection
  summary: >-
    [Word.ContentControl](xref:word.Word.ContentControl)オブジェクトのコレクションが含まれています。 コンテンツ コントロールは、境界があり、ラベルが付いている場合もある文書内の領域で、特定の種類のコンテンツのコンテナーとして機能します。 個々 のコンテンツ コントロールには、画像、表、段落の書式設定されたテキストなどの内容が含まれている可能性があります。 現時点では、リッチ テキスト コンテンツ コントロールだけがサポートされています。


    \[[API セット: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: Word.ContentControlCollection
  fullName: word.Word.ContentControlCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.ContentControlCollection.getById
  - word.Word.ContentControlCollection.getByIdOrNullObject
  - word.Word.ContentControlCollection.getByTag
  - word.Word.ContentControlCollection.getByTitle
  - word.Word.ContentControlCollection.getByTypes
  - word.Word.ContentControlCollection.getFirst
  - word.Word.ContentControlCollection.getFirstOrNullObject
  - word.Word.ContentControlCollection.getItem
  - word.Word.ContentControlCollection.items
  - word.Word.ContentControlCollection.load
  - word.Word.ContentControlCollection.toJSON
  - word.Word.ContentControlCollection.track
  - word.Word.ContentControlCollection.untrack
- uid: word.Word.ContentControlCollection.getById
  summary: >-
    コンテンツ コントロールの識別子によってコンテンツ コントロールを取得します。このコレクション内の識別子を持つコンテンツ コントロールがない場合にスローします。


    \[[API セット: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getById(id)
  fullName: word.Word.ContentControlCollection.getById
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getById(id: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getById(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The content control with that Id has been found in this document.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There is no content control with that ID.')\n        } else {\n            console.log('The content control with that ID has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: 必須。コンテンツ コントロールの識別子。
      type:
      - number
- uid: word.Word.ContentControlCollection.getByIdOrNullObject
  summary: >-
    コンテンツ コントロールの識別子によってコンテンツ コントロールを取得します。このコレクション内の識別子を持つコンテンツ コントロールがない場合は、null オブジェクトを返します。


    \[[API セット: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByIdOrNullObject(id)
  fullName: word.Word.ContentControlCollection.getByIdOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByIdOrNullObject(id: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There is no content control with that ID.')\n        } else {\n            console.log('The content control with that ID has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: 必須。コンテンツ コントロールの識別子。
      type:
      - number
- uid: word.Word.ContentControlCollection.getByTag
  summary: >-
    指定されたタグを含むコンテンツ コントロールを取得します。


    \[[API セット: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByTag(tag)
  fullName: word.Word.ContentControlCollection.getByTag
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTag(tag: string): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection that contains a specific tag.\n    var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');\n\n    // Queue a command to load the text property for all of content controls with a specific tag.\n    context.load(contentControlsWithTag, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTag.items.length === 0) {\n            console.log(\"There isn't a content control with a tag of Customer-Address in this document.\");\n        } else {\n            console.log(\n                'The first content control with the tag of Customer-Address has this text: ' + \n                contentControlsWithTag.items[0].text);\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Word-Add-in-DocumentAssembly sample has another example of using the getByTag method.\n// https://github.com/OfficeDev/Word-Add-in-DocumentAssembly\n```\n```typescript\nawait Word.run(async (context) => {\n    let contentControls = context.document.contentControls.getByTag(\"customer\");\n    contentControls.load(\"text\");\n\n    await context.sync();\n\n    for (let i = 0; i < contentControls.items.length; i++) {\n        contentControls.items[i].insertText(\"Fabrikam\", \"Replace\");\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: tag
      description: 必須。コンテンツ コントロールに設定するタグ。
      type:
      - string
- uid: word.Word.ContentControlCollection.getByTitle
  summary: >-
    指定されたタイトルを含むコンテンツ コントロールを取得します。


    \[[API セット: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByTitle(title)
  fullName: word.Word.ContentControlCollection.getByTitle
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTitle(title: string): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection that contains a specific title.\n    var contentControlsWithTitle = context.document.contentControls.getByTitle('Enter Customer Address Here');\n\n    // Queue a command to load the text property for all of content controls with a specific title.\n    context.load(contentControlsWithTitle, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTitle.items.length === 0) {\n            console.log(\n                \"There isn't a content control with a title of 'Enter Customer Address Here' in this document.\");\n        } else {\n            console.log(\n                \"The first content control with the title of 'Enter Customer Address Here' has this text: \" + \n                contentControlsWithTitle.items[0].text);\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Word-Add-in-DocumentAssembly sample has another example of using the getByTitle method.\n// https://github.com/OfficeDev/Word-Add-in-DocumentAssembly\n```"
    parameters:
    - id: title
      description: 必須。コンテンツ コントロールのタイトル。
      type:
      - string
- uid: word.Word.ContentControlCollection.getByTypes
  summary: >-
    指定した型またはサブタイプを持つコンテンツ コントロールを取得します。


    \[[API セット: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByTypes(types)
  fullName: word.Word.ContentControlCollection.getByTypes
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTypes(types: Word.ContentControlType[]): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
    parameters:
    - id: types
      description: 必須です。コンテンツ コントロールの種類とサブタイプ、またはそのいずれかの配列。
      type:
      - Word.ContentControlType[]
- uid: word.Word.ContentControlCollection.getFirst
  summary: >-
    このコレクション内の最初のコンテンツ コントロールを取得します。このコレクションが空の場合にスローします。


    \[[API セット: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getFirst()
  fullName: word.Word.ContentControlCollection.getFirst
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the first content control in the document.\n    var contentControl = context.document.contentControls.getFirstOrNullObject();\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There are no content controls in this document.')\n        } else {\n            console.log('The first content control has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControlCollection.getFirstOrNullObject
  summary: >-
    このコレクション内の最初のコンテンツ コントロールを取得します。このコレクションが空の場合は、null オブジェクトを返します。


    \[[API セット: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getFirstOrNullObject()
  fullName: word.Word.ContentControlCollection.getFirstOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirstOrNullObject(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
- uid: word.Word.ContentControlCollection.getItem
  summary: >-
    コレクション内のインデックスによってコンテンツ コントロールを取得します。


    \[[API セット: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getItem(index)
  fullName: word.Word.ContentControlCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
    parameters:
    - id: index
      description: インデックス。
      type:
      - number
- uid: word.Word.ContentControlCollection.items
  summary: このコレクションに読み込まれている子項目を取得します。
  name: items
  fullName: word.Word.ContentControlCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Word.ContentControl[];'
    return:
      type:
      - Word.ContentControl[]
- uid: word.Word.ContentControlCollection.load
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 "Context.sync()"は、プロパティを読み取る前に呼び出す必要があります。
  remarks: >-
    だけでなく、この署名は、このメソッドは、次の署名をします。


    `load(option?: { select?: string; expand?: string; }): Word.ContentControlCollection`-どこで読み込むには、プロパティを指定するコンマ区切りの文字列は、option.select、options.expand を読み込むナビゲーション プロパティを指定するコンマ区切りの文字列。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControlCollection`でコレクション型のみ使用できます。 前の署名に似ていますが。 Option.top は、結果に含めることができるコレクション アイテムの最大数を指定します。 Option.skip はスキップされ、その結果に含まれていない項目の数を指定します。 Option.top が指定されている場合、結果セットが指定数のアイテムをスキップした後開始されます。

    #### <a name="examples"></a>例


    ```javascript

    // Run a batch operation against the Word object model.

    Word.run(function (context) {

        // Create a proxy object for the content controls collection.
        var contentControls = context.document.contentControls;

        // Queue a command to load the id property for all of the content controls.
        context.load(contentControls, 'id');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            if (contentControls.items.length === 0) {
                console.log('No content control found.');
            }
            else {
                // Queue a command to load the properties on the first content control.
                contentControls.items[0].load(  'appearance,' +
                                                'cannotDelete,' +
                                                'cannotEdit,' +
                                                'id,' +
                                                'placeHolderText,' +
                                                'removeWhenEdited,' +
                                                'title,' +
                                                'text,' +
                                                'type,' +
                                                'style,' +
                                                'tag,' +
                                                'font/size,' +
                                                'font/name,' +
                                                'font/color');

                // Synchronize the document state by executing the queued commands,
                // and return a promise to indicate task completion.
                return context.sync()
                    .then(function () {
                        console.log('Property values of the first content control:' +
                            '   ----- appearance: ' + contentControls.items[0].appearance +
                            '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +
                            '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +
                            '   ----- color: ' + contentControls.items[0].color +
                            '   ----- id: ' + contentControls.items[0].id +
                            '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +
                            '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +
                            '   ----- title: ' + contentControls.items[0].title +
                            '   ----- text: ' + contentControls.items[0].text +
                            '   ----- type: ' + contentControls.items[0].type +
                            '   ----- style: ' + contentControls.items[0].style +
                            '   ----- tag: ' + contentControls.items[0].tag +
                            '   ----- font size: ' + contentControls.items[0].font.size +
                            '   ----- font name: ' + contentControls.items[0].font.name +
                            '   ----- font color: ' + contentControls.items[0].font.color);
                });
            }
        });
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });


    // The Silly stories add-in sample shows how the load method is used

    // to load the content control collection with the tag and title properties.

    // https://aka.ms/sillystorywordaddin

    ```
  name: load(option)
  fullName: word.Word.ContentControlCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
    parameters:
    - id: option
      description: コンマで区切られた文字列またはロードするにはプロパティを指定する文字列の配列。
      type:
      - string | string[]
- uid: word.Word.ContentControlCollection.toJSON
  name: toJSON()
  fullName: word.Word.ContentControlCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.ContentControlCollectionData;'
    return:
      type:
      - word.Word.Interfaces.ContentControlCollectionData
      description: ''
- uid: word.Word.ContentControlCollection.track
  summary: 周囲の文書内の変更に基づいて自動的に調整するオブジェクトを追跡します。 この呼び出しは、context.trackedObjects.add(thisObject) の短縮です。 プロパティを設定するときは、このオブジェクト".sync"の呼び出しで、".run"のバッチ、および get"InvalidObjectPath"エラーの連続実行範囲の外側を使用しているまたは追跡対象のオブジェクトにオブジェクトを追加するのには必要なオブジェクトのメソッドを呼び出して、コレクションのオブジェクトが最初に作成したときです。
  name: track()
  fullName: word.Word.ContentControlCollection.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
- uid: word.Word.ContentControlCollection.untrack
  summary: リリース履歴管理されていた場合に、このオブジェクトに関連付けられているメモリです。 この呼び出しは、context.trackedObjects.remove(thisObject) の省略形です。 追跡の多くのオブジェクトを持つ速度が遅くなりますホスト アプリケーションでは、そのためできたら、追加するすべてのオブジェクトを解放するために注意してくださいそれらを使用します。 メモリの解放を有効にするには、"context.sync()"を呼び出す必要があります。
  name: untrack()
  fullName: word.Word.ContentControlCollection.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
