### YamlMime:UniversalReference
ms.openlocfilehash: 727a591e17277935ac9a01c8f11b1a7e3c9c7c0e
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/20/2019
ms.locfileid: "30094436"
items:
- uid: word.Word.Range
  summary: >-
    文書内の連続した領域を表します。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.Range
  fullName: Word.Range
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.Range.clear
  - word.Word.Range.compareLocationWith
  - word.Word.Range.contentControls
  - word.Word.Range.context
  - word.Word.Range.delete
  - word.Word.Range.expandTo
  - word.Word.Range.expandToOrNullObject
  - word.Word.Range.font
  - word.Word.Range.getHtml
  - word.Word.Range.getHyperlinkRanges
  - word.Word.Range.getNextTextRange
  - word.Word.Range.getNextTextRangeOrNullObject
  - word.Word.Range.getOoxml
  - word.Word.Range.getRange
  - word.Word.Range.getRange_1
  - word.Word.Range.getTextRanges
  - word.Word.Range.hyperlink
  - word.Word.Range.inlinePictures
  - word.Word.Range.insertBreak
  - word.Word.Range.insertBreak_1
  - word.Word.Range.insertContentControl
  - word.Word.Range.insertFileFromBase64
  - word.Word.Range.insertFileFromBase64_1
  - word.Word.Range.insertHtml
  - word.Word.Range.insertHtml_1
  - word.Word.Range.insertInlinePictureFromBase64
  - word.Word.Range.insertInlinePictureFromBase64_1
  - word.Word.Range.insertOoxml
  - word.Word.Range.insertOoxml_1
  - word.Word.Range.insertParagraph
  - word.Word.Range.insertParagraph_1
  - word.Word.Range.insertTable
  - word.Word.Range.insertTable_1
  - word.Word.Range.insertText
  - word.Word.Range.insertText_1
  - word.Word.Range.intersectWith
  - word.Word.Range.intersectWithOrNullObject
  - word.Word.Range.isEmpty
  - word.Word.Range.lists
  - word.Word.Range.load
  - word.Word.Range.load_1
  - word.Word.Range.load_2
  - word.Word.Range.paragraphs
  - word.Word.Range.parentBody
  - word.Word.Range.parentContentControl
  - word.Word.Range.parentContentControlOrNullObject
  - word.Word.Range.parentTable
  - word.Word.Range.parentTableCell
  - word.Word.Range.parentTableCellOrNullObject
  - word.Word.Range.parentTableOrNullObject
  - word.Word.Range.search
  - word.Word.Range.select
  - word.Word.Range.select_1
  - word.Word.Range.set
  - word.Word.Range.set_1
  - word.Word.Range.split
  - word.Word.Range.style
  - word.Word.Range.styleBuiltIn
  - word.Word.Range.tables
  - word.Word.Range.text
  - word.Word.Range.toJSON
  - word.Word.Range.track
  - word.Word.Range.untrack
- uid: word.Word.Range.clear
  summary: >-
    範囲オブジェクトの内容をクリアします。ユーザーは、クリアしたコンテンツを元に戻す操作を実行できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: clear()
  fullName: clear()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to clear the contents of the proxy range object.\n    range.clear();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Cleared the selection (range object)');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.compareLocationWith
  summary: >-
    この範囲の場所を別の範囲の場所と比較します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: compareLocationWith(range)
  fullName: compareLocationWith(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'compareLocationWith(range: Word.Range): OfficeExtension.ClientResult<Word.LocationRelation>;'
    return:
      type:
      - OfficeExtension.ClientResult<Word.LocationRelation>
      description: ''
    parameters:
    - id: range
      description: 必須。この範囲と比較する範囲です。
      type:
      - Word.Range
- uid: word.Word.Range.contentControls
  summary: >-
    範囲に含まれるコンテンツ コントロール オブジェクトのコレクションを取得します。読み取り専用。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: contentControls
  fullName: contentControls
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
- uid: word.Word.Range.context
  summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: word.Word.Range.delete
  summary: >-
    文書から範囲と、その範囲の内容を削除します。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to delete the range object.\n    range.delete();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Deleted the selection (range object)');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.expandTo
  summary: >-
    別の範囲を対象にするために、いずれかの方向でこの範囲から拡張する新しい範囲を返します。この範囲は変更されません。2 つの範囲に和集合がない場合にスローします。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: expandTo(range)
  fullName: expandTo(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'expandTo(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: 必須。別の範囲です。
      type:
      - Word.Range
- uid: word.Word.Range.expandToOrNullObject
  summary: >-
    別の範囲を対象にするために、いずれかの方向でこの範囲から拡張する新しい範囲を返します。この範囲は変更されません。2 つの範囲に和集合がない場合は、null オブジェクトを返します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: expandToOrNullObject(range)
  fullName: expandToOrNullObject(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'expandToOrNullObject(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: 必須。別の範囲です。
      type:
      - Word.Range
- uid: word.Word.Range.font
  summary: >-
    範囲のテキスト形式を取得します。これを使用して、フォント名、サイズ、色、およびその他のプロパティを取得および設定します。読み取り専用です。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: font
  fullName: font
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly font: Word.Font;'
    return:
      type:
      - word.Word.Font
- uid: word.Word.Range.getHtml
  summary: >-
    range オブジェクトの HTML 表記を取得します。 web ページまたは HTML ビューアーでレンダリングされる場合、書式設定は、ドキュメントの書式設定と完全に一致しますが、完全に一致するとは限りません。 このメソッドは、異なるプラットフォーム (Windows、Mac、Word Online など) にある同じドキュメントに対して、まったく同じ HTML を返しません。 厳密な忠実性、または複数のプラットフォーム間で`Range.getOoxml()`の一貫性が必要な場合は、を使用して、返された XML を HTML に変換します。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getHtml()
  fullName: getHtml()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHtml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to get the HTML of the current selection.\n    var html = range.getHtml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The HTML read from the document was: ' + html.value);\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.getHyperlinkRanges
  summary: >-
    範囲内のハイパーリンクの子の範囲を取得します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getHyperlinkRanges()
  fullName: getHyperlinkRanges()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHyperlinkRanges(): Word.RangeCollection;'
    return:
      type:
      - Word.RangeCollection
      description: ''
- uid: word.Word.Range.getNextTextRange
  summary: >-
    句読点やその他の終了記号を使用して、次のテキスト範囲を取得します。 このテキスト範囲が最後のものである場合は、例外をスローします。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getNextTextRange(endingMarks, trimSpacing)
  fullName: getNextTextRange(endingMarks, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextTextRange(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: endingMarks
      description: 必須。文字列配列としての句読点と他の終了記号、またはそのいずれか。
      type:
      - string[]
    - id: trimSpacing
      description: 省略可能。 返される範囲の先頭または末尾から、スペース文字 (スペース、タブ、段区切り、および段落終了マーク) をトリミングするかどうかを指定します。 既定値は false で、範囲の開始位置と終了位置にスペース文字が含まれていることを示します。
      type:
      - boolean
- uid: word.Word.Range.getNextTextRangeOrNullObject
  summary: >-
    句読点やその他の終了記号を使用して、次のテキスト範囲を取得します。 このテキスト範囲が最後のものである場合は、null オブジェクトを返します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getNextTextRangeOrNullObject(endingMarks, trimSpacing)
  fullName: getNextTextRangeOrNullObject(endingMarks, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextTextRangeOrNullObject(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: endingMarks
      description: 必須。文字列配列としての句読点と他の終了記号、またはそのいずれか。
      type:
      - string[]
    - id: trimSpacing
      description: 省略可能。 返される範囲の先頭または末尾から、スペース文字 (スペース、タブ、段区切り、および段落終了マーク) をトリミングするかどうかを指定します。 既定値は false で、範囲の開始位置と終了位置にスペース文字が含まれていることを示します。
      type:
      - boolean
- uid: word.Word.Range.getOoxml
  summary: >-
    Range オブジェクトの OOXML 表記を取得します。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getOoxml()
  fullName: getOoxml()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to get the OOXML of the current selection.\n    var ooxml = range.getOoxml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The OOXML read from the document was:  ' + ooxml.value);\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.getRange
  summary: >-
    範囲の複製を作成するか、新しい範囲として開始点または終了点を取得します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getRange(rangeLocation)
  fullName: getRange(rangeLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: rangeLocation
      description: 省略可能。 範囲の場所には、' 全体 '、' Start '、' End '、' After '、' Content ' を指定できます。
      type:
      - word.Word.RangeLocation
- uid: word.Word.Range.getRange_1
  summary: >-
    範囲の複製を作成するか、新しい範囲として開始点または終了点を取得します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getRange(rangeLocationString)
  fullName: getRange(rangeLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: rangeLocationString
      description: 省略可能。 範囲の場所には、' 全体 '、' Start '、' End '、' After '、' Content ' を指定できます。
      type:
      - "\"Whole\" | \"Start\" | \"End\" | \"Before\" | \"After\" | \"Content\""
- uid: word.Word.Range.getTextRanges
  summary: >-
    句読点やその他の終了記号を使用して、範囲内のテキストの子の範囲を取得します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getTextRanges(endingMarks, trimSpacing)
  fullName: getTextRanges(endingMarks, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - Word.RangeCollection
      description: "\n#### <a name=\"examples\"></a>例\n\n```typescript\nawait Word.run(async (context) => {\n    // Gets the complete sentence (as range) associated with the insertion point.\n    let sentences = context.document.getSelection().getTextRanges(\n        [\".\"] /* Using the \".\" as delimiter */,\n        false /*means without trimming spaces*/);\n    sentences.load(\"$none\");\n    await context.sync();\n\n    // Expands the range to the end of the paragraph to get all the complete sentences.\n    let sentencesToTheEndOfParagraph = sentences.items[0].getRange().expandTo(\n        context.document.getSelection().paragraphs.getFirst().getRange(\"End\")).getTextRanges(\n            [\".\"],\n             false /* Don't trim spaces*/);\n    sentencesToTheEndOfParagraph.load(\"text\");\n    await context.sync();\n    \n    for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {\n        console.log(sentencesToTheEndOfParagraph.items[i].text);\n    }\n});\n```"
    parameters:
    - id: endingMarks
      description: 必須。文字列配列としての句読点と他の終了記号、またはそのいずれか。
      type:
      - string[]
    - id: trimSpacing
      description: 省略可能。 range コレクションで返される範囲の先頭または末尾から、スペース文字 (スペース、タブ、列区切り、および段落終了マーク) をトリミングするかどうかを示します。 既定値は false で、範囲の先頭と末尾のスペースが範囲コレクションに含まれることを示します。
      type:
      - boolean
- uid: word.Word.Range.hyperlink
  summary: >-
    範囲内の最初のハイパーリンクを取得するか、または範囲にハイパーリンクを設定します。 範囲に新しいハイパーリンクを設定すると、範囲内のすべてのハイパーリンクが削除されます。 省略可能な\#location パーツから address パーツを区切るには、' ' を使用します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: hyperlink
  fullName: hyperlink
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hyperlink: string;'
    return:
      type:
      - string
- uid: word.Word.Range.inlinePictures
  summary: >-
    範囲に含まれるインライン画像オブジェクトのコレクションを取得します。読み取り専用。


    \[[api set: wordapi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: inlinePictures
  fullName: inlinePictures
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly inlinePictures: Word.InlinePictureCollection;'
    return:
      type:
      - word.Word.InlinePictureCollection
- uid: word.Word.Range.insertBreak
  summary: >-
    メイン文書の指定した位置に、区切りを挿入します。insertLocation の値には、'Before' または 'After' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertBreak(breakType, insertLocation)
  fullName: insertBreak(breakType, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: breakType
      description: 必須です。 追加する区切りの種類を示します。
      type:
      - word.Word.BreakType
    - id: insertLocation
      description: 必須。有効な値は、'Before' または 'After' です。
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertBreak_1
  summary: >-
    メイン文書の指定した位置に、区切りを挿入します。insertLocation の値には、'Before' または 'After' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertBreak(breakTypeString, insertLocation)
  fullName: insertBreak(breakTypeString, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert a page break after the selected text.\n    range.insertBreak('page', 'After');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Inserted a page break after the selected text.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: breakTypeString
      description: 必須です。 追加する区切りの種類を示します。
      type:
      - "\"Page\" | \"Next\" | \"SectionNext\" | \"SectionContinuous\" | \"SectionEven\" | \"SectionOdd\" | \"Line\""
    - id: insertLocation
      description: 必須。有効な値は、'Before' または 'After' です。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertContentControl
  summary: >-
    範囲オブジェクトを、リッチ テキストのコンテンツ コントロールでラップします。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertContentControl()
  fullName: insertContentControl()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertContentControl(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert a content control around the selected text,\n    // and create a proxy content control object. We'll update the properties\n    // on the content control.\n    var myContentControl = range.insertContentControl();\n    myContentControl.tag = \"Customer-Address\";\n    myContentControl.title = \"Enter Customer Address Here:\";\n    myContentControl.style = \"Normal\";\n    myContentControl.insertText(\"One Microsoft Way, Redmond, WA 98052\", 'replace');\n    myContentControl.cannotEdit = true;\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Wrapped a content control around the selected text.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Word.run(async (context) => {\n    let results = context.document.body.search(\"Contractor\");\n    results.load(\"font/bold\");\n\n    // check to make sure we haven't added these content controls yet\n    let customerContentControls = context.document.contentControls.getByTag(\"customer\");\n    customerContentControls.load(\"text\");\n    await context.sync();\n\n  if (customerContentControls.items.length === 0) {\n    for (var i = 0; i < results.items.length; i++) { \n        results.items[i].font.bold = true;\n        var cc = results.items[i].insertContentControl();\n        cc.tag = \"customer\";  // This value is used in the next step of this sample.\n        cc.title = \"Customer Name \" + i;\n    }\n  }\n    await context.sync();\n});\n```"
- uid: word.Word.Range.insertFileFromBase64
  summary: >-
    指定した位置に文書を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertFileFromBase64(base64File, insertLocation)
  fullName: insertFileFromBase64(base64File, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert base64 encoded .docx at the beginning of the range.\n    // You'll need to implement getBase64() to make this work.\n    range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Added base64 encoded text to the beginning of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: base64File
      description: 必須。.docx ファイルの base64 でエンコードされたコンテンツ。
      type:
      - string
    - id: insertLocation
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertFileFromBase64_1
  summary: >-
    指定した位置に文書を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertFileFromBase64(base64File, insertLocationString)
  fullName: insertFileFromBase64(base64File, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: base64File
      description: 必須。.docx ファイルの base64 でエンコードされたコンテンツ。
      type:
      - string
    - id: insertLocationString
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertHtml
  summary: >-
    指定した位置に HTML を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertHtml(html, insertLocation)
  fullName: insertHtml(html, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert HTML in to the beginning of the range.\n    range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('HTML added to the beginning of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: html
      description: 必須。挿入する HTML。
      type:
      - string
    - id: insertLocation
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertHtml_1
  summary: >-
    指定した位置に HTML を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertHtml(html, insertLocationString)
  fullName: insertHtml(html, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: html
      description: 必須。挿入する HTML。
      type:
      - string
    - id: insertLocationString
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertInlinePictureFromBase64
  summary: >-
    指定した位置に画像を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
    return:
      type:
      - word.Word.InlinePicture
      description: ''
    parameters:
    - id: base64EncodedImage
      description: 必須。挿入される base64 でエンコードされた画像。
      type:
      - string
    - id: insertLocation
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertInlinePictureFromBase64_1
  summary: >-
    指定した位置に画像を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
    return:
      type:
      - word.Word.InlinePicture
      description: ''
    parameters:
    - id: base64EncodedImage
      description: 必須。挿入される base64 でエンコードされた画像。
      type:
      - string
    - id: insertLocationString
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertOoxml
  summary: >-
    指定した位置に OOXML を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertOoxml(ooxml, insertLocation)
  fullName: insertOoxml(ooxml, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert OOXML in to the beginning of the range.\n    range.insertOoxml(\"<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>\", Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('OOXML added to the beginning of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// Read \"Create better add-ins for Word with Office Open XML\" for guidance on working with OOXML.\n// https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml\n```"
    parameters:
    - id: ooxml
      description: 必須。挿入する OOXML を指定します。
      type:
      - string
    - id: insertLocation
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertOoxml_1
  summary: >-
    指定した位置に OOXML を挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertOoxml(ooxml, insertLocationString)
  fullName: insertOoxml(ooxml, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: ooxml
      description: 必須。挿入する OOXML を指定します。
      type:
      - string
    - id: insertLocationString
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertParagraph
  summary: >-
    指定した位置に、段落を挿入します。有効な insertLocation の値は、'Before' または 'After' です。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertParagraph(paragraphText, insertLocation)
  fullName: insertParagraph(paragraphText, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert the paragraph after the range.\n    range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Paragraph added to the end of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: paragraphText
      description: 必須。挿入する段落テキスト。
      type:
      - string
    - id: insertLocation
      description: 必須。有効な値は、'Before' または 'After' です。
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertParagraph_1
  summary: >-
    指定した位置に、段落を挿入します。有効な insertLocation の値は、'Before' または 'After' です。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertParagraph(paragraphText, insertLocationString)
  fullName: insertParagraph(paragraphText, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
    parameters:
    - id: paragraphText
      description: 必須。挿入する段落テキスト。
      type:
      - string
    - id: insertLocationString
      description: 必須。有効な値は、'Before' または 'After' です。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertTable
  summary: >-
    指定した数の行と列を含むテーブルを挿入します。insertLocation の値には、'Before' または 'After' を指定できます。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertTable(rowCount, columnCount, insertLocation, values)
  fullName: insertTable(rowCount, columnCount, insertLocation, values)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
    return:
      type:
      - Word.Table
      description: ''
    parameters:
    - id: rowCount
      description: 必須。表の行数。
      type:
      - number
    - id: columnCount
      description: 必須。表の列数。
      type:
      - number
    - id: insertLocation
      description: 必須。有効な値は、'Before' または 'After' です。
      type:
      - Word.InsertLocation
    - id: values
      description: 省略可能な 2 次元配列。 対応する文字列が配列で指定されている場合、セルに設定されます。
      type:
      - string[][]
- uid: word.Word.Range.insertTable_1
  summary: >-
    指定した数の行と列を含むテーブルを挿入します。insertLocation の値には、'Before' または 'After' を指定できます。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertTable(rowCount, columnCount, insertLocationString, values)
  fullName: insertTable(rowCount, columnCount, insertLocationString, values)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
    return:
      type:
      - Word.Table
      description: ''
    parameters:
    - id: rowCount
      description: 必須。表の行数。
      type:
      - number
    - id: columnCount
      description: 必須。表の列数。
      type:
      - number
    - id: insertLocationString
      description: 必須。有効な値は、'Before' または 'After' です。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    - id: values
      description: 省略可能な 2 次元配列。 対応する文字列が配列で指定されている場合、セルに設定されます。
      type:
      - string[][]
- uid: word.Word.Range.insertText
  summary: >-
    指定した位置にテキストを挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertText(text, insertLocation)
  fullName: insertText(text, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert the paragraph at the end of the range.\n    range.insertText('New text inserted into the range.', Word.InsertLocation.end);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Text added to the end of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: text
      description: 必須。挿入するテキスト。
      type:
      - string
    - id: insertLocation
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertText_1
  summary: >-
    指定した位置にテキストを挿入します。 insertlocation の値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertText(text, insertLocationString)
  fullName: insertText(text, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: text
      description: 必須。挿入するテキスト。
      type:
      - string
    - id: insertLocationString
      description: 必須です。 値には、' Replace '、' Start '、' End '、' Before '、または ' After ' を指定できます。
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.intersectWith
  summary: >-
    別の範囲とこの範囲の交差部分として、新しい範囲を返します。この範囲は変更されません。2 つの範囲が重複も隣接もしていない場合に、スローします。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: intersectWith(range)
  fullName: intersectWith(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'intersectWith(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: 必須。別の範囲です。
      type:
      - Word.Range
- uid: word.Word.Range.intersectWithOrNullObject
  summary: >-
    別の範囲とこの範囲の交差部分として、新しい範囲を返します。この範囲は変更されません。2 つの範囲が重複も隣接もしていない場合は、null オブジェクトを返します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: intersectWithOrNullObject(range)
  fullName: intersectWithOrNullObject(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'intersectWithOrNullObject(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: 必須。別の範囲です。
      type:
      - Word.Range
- uid: word.Word.Range.isEmpty
  summary: >-
    範囲の長さが 0 であるかどうかを確認します。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: isEmpty
  fullName: isEmpty
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEmpty: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.Range.lists
  summary: >-
    範囲内のリスト オブジェクトのコレクションを取得します。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: lists
  fullName: lists
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly lists: Word.ListCollection;'
    return:
      type:
      - word.Word.ListCollection
- uid: word.Word.Range.load
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る前に、"context. sync ()" を呼び出す必要があります。
  remarks: >-
    このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。


    `load(option?: string | string[]): Word.Range`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。


    `load(option?: { select?: string; expand?: string; }): Word.Range`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Range`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Word.Interfaces.RangeLoadOptions): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Word.Interfaces.RangeLoadOptions
- uid: word.Word.Range.load_1
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
      type:
      - string | string[]
- uid: word.Word.Range.load_2
  summary: オブジェクトの指定されたプロパティを読み込むためのコマンドをキューに入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
      type:
      - '{ select?: string; expand?: string; }'
- uid: word.Word.Range.paragraphs
  summary: >-
    範囲に含まれるパラグラフ オブジェクトのコレクションを取得します。読み取り専用。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: paragraphs
  fullName: paragraphs
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraphs: Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
- uid: word.Word.Range.parentBody
  summary: >-
    範囲の親の本文を取得します。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentBody
  fullName: parentBody
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentBody: Word.Body;'
    return:
      type:
      - Word.Body
- uid: word.Word.Range.parentContentControl
  summary: >-
    範囲を含むコンテンツ コントロールを取得します。親コンテンツ コントロールがない場合、スローします。読み取り専用。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControl
  fullName: parentContentControl
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControl: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.Range.parentContentControlOrNullObject
  summary: >-
    範囲を含むコンテンツ コントロールを取得します。親コンテンツ コントロールがない場合は、null オブジェクトを返します。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControlOrNullObject
  fullName: parentContentControlOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.Range.parentTable
  summary: >-
    範囲を含むテーブルを取得します。テーブルに含まれていない場合、スローします。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTable
  fullName: parentTable
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTable: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.Range.parentTableCell
  summary: >-
    範囲を含むテーブル セルを取得します。テーブル セルに含まれていない場合、スローします。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCell
  fullName: parentTableCell
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCell: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.Range.parentTableCellOrNullObject
  summary: >-
    範囲を含むテーブルのセルを取得します。テーブル セルに含まれていない場合は、null オブジェクトを返します。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCellOrNullObject
  fullName: parentTableCellOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.Range.parentTableOrNullObject
  summary: >-
    範囲を含むテーブルを取得します。テーブルに含まれていない場合は、null オブジェクトを返します。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableOrNullObject
  fullName: parentTableOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableOrNullObject: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.Range.search
  summary: >-
    range オブジェクトの範囲に対して、指定した SearchOptions を使用して検索を実行します。 検索結果は、range オブジェクトのコレクションです。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: search(searchText, searchOptions)
  fullName: search(searchText, searchOptions)
  langs:
  - typeScript
  type: method
  syntax:
    content: >-
      search(searchText: string, searchOptions?: Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }): Word.RangeCollection;
    return:
      type:
      - Word.RangeCollection
      description: ''
    parameters:
    - id: searchText
      description: 必須。検索テキスト。
      type:
      - string
    - id: searchOptions
      description: 省略可能。検索のオプション。
      type:
      - >-
        Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }
- uid: word.Word.Range.select
  summary: >-
    範囲を選択して、その範囲に Word の UI を移動します。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: select(selectionMode)
  fullName: select(selectionMode)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(selectionMode?: Word.SelectionMode): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert HTML in to the beginning of the range.\n    range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);\n\n    // Queue a command to select the HTML that was inserted.\n    range.select();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Selected the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: selectionMode
      description: 省略可能。 選択モードは、'Select'、'Start'、'End' のいずれかになります。'Select' が既定値です。
      type:
      - Word.SelectionMode
- uid: word.Word.Range.select_1
  summary: >-
    範囲を選択して、その範囲に Word の UI を移動します。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: select(selectionModeString)
  fullName: select(selectionModeString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: selectionModeString
      description: 省略可能。 選択モードは、'Select'、'Start'、'End' のいずれかになります。'Select' が既定値です。
      type:
      - "\"Select\" | \"Start\" | \"End\""
- uid: word.Word.Range.set
  summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
  remarks: >-
    このメソッドには、次の追加のシグネチャがあります。


    `set(properties: Word.Range): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
      type:
      - Interfaces.RangeUpdateData
    - id: options
      description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
      type:
      - office.OfficeExtension.UpdateOptions
- uid: word.Word.Range.set_1
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Word.Range): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - Word.Range
- uid: word.Word.Range.split
  summary: >-
    区切り記号を使用して、範囲を子の範囲に分割します。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  fullName: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - Word.RangeCollection
      description: ''
    parameters:
    - id: delimiters
      description: 必須。文字列配列としての区切り記号。
      type:
      - string[]
    - id: multiParagraphs
      description: 省略可能。 返された子の範囲に複数の段落を含めることができるかどうかを示します。 既定値は false で、段落の境界線も区切り文字として使用されることを示します。
      type:
      - boolean
    - id: trimDelimiters
      description: 省略可能。 範囲のコレクション内の範囲から区切り記号をトリミングするかどうかを示します。 既定値は false で、範囲コレクションで返される範囲に区切り文字が含まれていることを示します。
      type:
      - boolean
    - id: trimSpacing
      description: 省略可能。 range コレクションで返される範囲の先頭または末尾から、スペース文字 (スペース、タブ、列区切り、および段落終了マーク) をトリミングするかどうかを示します。 既定値は false で、範囲の先頭と末尾のスペースが範囲コレクションに含まれることを示します。
      type:
      - boolean
- uid: word.Word.Range.style
  summary: >-
    範囲のスタイル名を取得または設定します。カスタム スタイルとローカライズされたスタイルの名前には、このプロパティを使用します。ロケール間で移植可能な組み込みスタイルを使用するには、"styleBuiltIn" プロパティを参照してください。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
- uid: word.Word.Range.styleBuiltIn
  summary: >-
    範囲の組み込みスタイル名を取得または設定します。ロケール間で移植可能な組み込みスタイルの場合は、このプロパティを使用します。カスタム スタイルまたはローカライズされたスタイルの名前を使用するには、"style" プロパティを参照してください。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: styleBuiltIn
  fullName: styleBuiltIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
    return:
      type:
      - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
- uid: word.Word.Range.tables
  summary: >-
    範囲内のテーブル オブジェクトのコレクションを取得します。読み取り専用。


    \[[api set: wordapi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Word.TableCollection;'
    return:
      type:
      - Word.TableCollection
- uid: word.Word.Range.text
  summary: >-
    範囲のテキストを取得します。読み取り専用です。


    \[[api set: wordapi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: text
  fullName: text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string;'
    return:
      type:
      - string
- uid: word.Word.Range.toJSON
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.RangeData;'
    return:
      type:
      - Word.Interfaces.RangeData
      description: ''
- uid: word.Word.Range.track
  summary: ドキュメント内の周囲の変更に基づいて自動調整するオブジェクトを追跡します。 この呼び出しは、コンテキストの省略形です。追加 (thisObject)。 このオブジェクトを "sync" という呼び出しの間で使用していて、プロパティを設定するとき、またはオブジェクトでメソッドを呼び出したときに "InvalidObjectPath" エラーが発生する場合は、オブジェクトを追跡対象オブジェクトに追加する必要があります。オブジェクトが最初に作成されたときのコレクションです。
  name: track()
  fullName: track()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
- uid: word.Word.Range.untrack
  summary: このオブジェクトが以前に追跡されている場合は、このオブジェクトに関連付けられているメモリを解放します。 この呼び出しは、コンテキストの短縮形です。 remove (thisObject)。 追跡対象のオブジェクトの数が多いとホストアプリケーションの処理速度が低下するので、追加したオブジェクトはすべて使用した後で解放してください。 メモリリリースを有効にするには、「context. sync ()」を呼び出す必要があります。
  name: untrack()
  fullName: untrack()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
