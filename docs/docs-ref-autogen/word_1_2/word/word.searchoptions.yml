### YamlMime:UniversalReference
items:
  - uid: 'word!Word.SearchOptions:class'
    summary: |-
      検索操作に含めるオプションを指定します。

      Word JavaScript Api で検索オプションを使用する方法の詳細については、「 [word アドインでテキストを検索するには検索オプションを使用する](https://docs.microsoft.com/office/dev/add-ins/word/search-option-guidance)」を参照してください。<!-- -->.

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.SearchOptions
    fullName: Word.SearchOptions
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.SearchOptions#context:member'
      - 'word!Word.SearchOptions#ignorePunct:member'
      - 'word!Word.SearchOptions#ignoreSpace:member'
      - 'word!Word.SearchOptions#load:member(1)'
      - 'word!Word.SearchOptions#load:member(2)'
      - 'word!Word.SearchOptions#load:member(3)'
      - 'word!Word.SearchOptions#matchCase:member'
      - 'word!Word.SearchOptions#matchPrefix:member'
      - 'word!Word.SearchOptions#matchSuffix:member'
      - 'word!Word.SearchOptions#matchWholeWord:member'
      - 'word!Word.SearchOptions#matchWildcards:member'
      - 'word!Word.SearchOptions.newObject:member(1)'
      - 'word!Word.SearchOptions#set:member(1)'
      - 'word!Word.SearchOptions#set:member(2)'
      - 'word!Word.SearchOptions#toJSON:member(1)'
  - uid: 'word!Word.SearchOptions#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.SearchOptions#ignorePunct:member'
    summary: |-
      Gets or sets a value that indicates whether to ignore all punctuation characters between words. Corresponds to the Ignore punctuation check box in the Find and Replace dialog box.

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: ignorePunct
    fullName: ignorePunct
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignorePunct: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#ignoreSpace:member'
    summary: |-
      単語間のすべての空白文字を無視するかどうかを示す値を取得または設定します。 [検索と置換] ダイアログボックスの [空白文字を無視する] チェックボックスに対応します。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: ignoreSpace
    fullName: ignoreSpace
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreSpace: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Word.Interfaces.SearchOptionsLoadOptions): Word.SearchOptions;'
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // Ignore punctuation search
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Queue a command to search the document and ignore punctuation.
              var searchResults = context.document.body.search('video you', {ignorePunct: true});

              // Queue a command to load the search results and get the font property values.
              context.load(searchResults, 'font');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Found count: ' + searchResults.items.length);

                  // Queue a set of commands to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                      searchResults.items[i].font.color = 'purple';
                      searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow
                      searchResults.items[i].font.bold = true;
                  }
                  
                  // Synchronize the document state by executing the queued commands, 
                  // and return a promise to indicate task completion.
                  return context.sync();
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Search based on a prefix
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Queue a command to search the document based on a prefix.
              var searchResults = context.document.body.search('vid', {matchPrefix: true});

              // Queue a command to load the search results and get the font property values.
              context.load(searchResults, 'font');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Found count: ' + searchResults.items.length);

                  // Queue a set of commands to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                      searchResults.items[i].font.color = 'purple';
                      searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow
                      searchResults.items[i].font.bold = true;
                  }
                  
                  // Synchronize the document state by executing the queued commands, 
                  // and return a promise to indicate task completion.
                  return context.sync();
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Search based on a suffix
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to search the document for any string of characters after 'ly'.
              var searchResults = context.document.body.search('ly', {matchSuffix: true});

              // Queue a command to load the search results and get the font property values.
              context.load(searchResults, 'font');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Found count: ' + searchResults.items.length);

                  // Queue a set of commands to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                      searchResults.items[i].font.color = 'orange';
                      searchResults.items[i].font.highlightColor = 'black';
                      searchResults.items[i].font.bold = true;
                  }
                  
                  // Synchronize the document state by executing the queued commands, 
                  // and return a promise to indicate task completion.
                  return context.sync();
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Search using a wildcard
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Queue a command to search the document with a wildcard
              // for any string of characters that starts with 'to' and ends with 'n'.
              var searchResults = context.document.body.search('to*n', {matchWildCards: true});

              // Queue a command to load the search results and get the font property values.
              context.load(searchResults, 'font');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Found count: ' + searchResults.items.length);

                  // Queue a set of commands to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                      searchResults.items[i].font.color = 'purple';
                      searchResults.items[i].font.highlightColor = 'pink';
                      searchResults.items[i].font.bold = true;
                  }
                  
                  // Synchronize the document state by executing the queued commands, 
                  // and return a promise to indicate task completion.
                  return context.sync();
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: options
          description: 読み込むオブジェクトのプロパティを指定するオプションを提供します。
          type:
            - 'word!Word.Interfaces.SearchOptionsLoadOptions:interface'
  - uid: 'word!Word.SearchOptions#load:member(2)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.SearchOptions;'
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'word!Word.SearchOptions#load:member(3)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、を呼び出す必要があり `context.sync()` ます。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.SearchOptions;
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`は、読み込むプロパティを指定するコンマで区切られた文字列で、 `propertyNamesAndPaths.expand` 読み込むナビゲーションプロパティを指定するコンマで区切られた文字列です。'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'word!Word.SearchOptions#matchCase:member'
    summary: |-
      大文字と小文字を区別する検索を実行するかどうかを示す値を取得または設定します。 [検索と置換] ダイアログボックスの [大文字と小文字を区別する] チェックボックスに対応します。

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchCase
    fullName: matchCase
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchCase: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchPrefix:member'
    summary: |-
      Gets or sets a value that indicates whether to match words that begin with the search string. Corresponds to the Match prefix check box in the Find and Replace dialog box.

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchPrefix
    fullName: matchPrefix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchPrefix: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchSuffix:member'
    summary: |-
      Gets or sets a value that indicates whether to match words that end with the search string. Corresponds to the Match suffix check box in the Find and Replace dialog box.

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchSuffix
    fullName: matchSuffix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchSuffix: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchWholeWord:member'
    summary: |-
      Gets or sets a value that indicates whether to find operation only entire words, not text that is part of a larger word. Corresponds to the Find whole words only check box in the Find and Replace dialog box.

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchWholeWord
    fullName: matchWholeWord
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchWholeWord: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchWildcards:member'
    summary: |-
      Gets or sets a value that indicates whether the search will be performed using special search operators. Corresponds to the Use wildcards check box in the Find and Replace dialog box.

      \[[Api set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchWildcards
    fullName: matchWildcards
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchWildcards: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions.newObject:member(1)'
    summary: Word SearchOptions オブジェクトの新しいインスタンスを作成する
    name: newObject(context)
    fullName: newObject(context)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static newObject(context: OfficeExtension.ClientRequestContext): Word.SearchOptions;'
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: ''
      parameters:
        - id: context
          description: ''
          type:
            - 'office!OfficeExtension.ClientRequestContext:class'
  - uid: 'word!Word.SearchOptions#set:member(1)'
    summary: 一度に1つのオブジェクトの複数のプロパティを設定します。 適切なプロパティを持つプレーンオブジェクト、または同じ種類の別の API オブジェクトのいずれかを渡すことができます。
    remarks: |-
      このメソッドには、次の追加のシグネチャがあります。

      `set(properties: Word.SearchOptions): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.SearchOptionsUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: メソッドが呼び出されるオブジェクトのプロパティに構造化 isomorphically されているプロパティを持つ JavaScript オブジェクト。
          type:
            - 'word!Word.Interfaces.SearchOptionsUpdateData:interface'
        - id: options
          description: プロパティオブジェクトが読み取り専用プロパティを設定しようとした場合にエラーを抑制するオプションを提供します。
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.SearchOptions#set:member(2)'
    summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクトに複数のプロパティを設定します。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.SearchOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.SearchOptions:class'
  - uid: 'word!Word.SearchOptions#toJSON:member(1)'
    summary: '`toJSON()`API オブジェクトが渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->`toJSON`その後、渡されたオブジェクトのメソッドを呼び出します。元の単語の SearchOptions オブジェクトは API オブジェクトであるのに対し、 `toJSON` メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`Word.Interfaces.SearchOptionsData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.SearchOptionsData;'
      return:
        type:
          - 'word!Word.Interfaces.SearchOptionsData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.SearchOptions:class'
    name: Word.SearchOptions
  - uid: 'word!Word.Interfaces.SearchOptionsLoadOptions:interface'
    name: Word.Interfaces.SearchOptionsLoadOptions
  - uid: 'office!OfficeExtension.ClientRequestContext:class'
    name: OfficeExtension.ClientRequestContext
  - uid: 'word!Word.Interfaces.SearchOptionsUpdateData:interface'
    name: Interfaces.SearchOptionsUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.SearchOptionsData:interface'
    name: Word.Interfaces.SearchOptionsData