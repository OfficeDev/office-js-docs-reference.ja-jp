### YamlMime:TSType
name: Office.TableBinding
uid: office!Office.TableBinding:interface
package: office!
fullName: Office.TableBinding
summary: バインドを行と列の 2 次元で、必要に応じてヘッダーと共に表します。
remarks: >-
  TableBinding オブジェクトは、 `id` プロパティ、 `type` プロパティ、メソッド、 `getDataAsync` およびメソッドを Office の `setDataAsync` [Binding](xref:office!Office.Binding:interface) オブジェクトから継承します。


  Excel の場合は、テーブルバインドを確立した後、ユーザーがテーブルに追加する新しい各行ごとに、自動的にバインドに追加され、行数が増加することに注意してください。
isPreview: false
isDeprecated: false
type: interface
properties:
- name: columnCount
  uid: office!Office.TableBinding#columnCount:member
  package: office!
  fullName: columnCount
  summary: TableBinding 内の列数を表す整数値を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'columnCount: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showBindingColumnCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Column: \" + asyncResult.value.columnCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: hasHeaders
  uid: office!Office.TableBinding#hasHeaders:member
  package: office!
  fullName: hasHeaders
  summary: テーブルにヘッダーがある場合は True。それ以外の場合は false。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hasHeaders: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showBindingHasHeaders() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Binding has headers: \" + asyncResult.value.hasHeaders);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: rowCount
  uid: office!Office.TableBinding#rowCount:member
  package: office!
  fullName: rowCount
  summary: TableBinding 内の行の数を表す整数値を取得します。
  remarks: "Excel 2013 と Excel on the web で1行を選択することによって空のテーブルを挿入すると ([挿入] タブの表を使用して)、両方の Office ホストアプリケーションは、ヘッダーの1行を作成し、その後に1行の空白行を作成します。 ただし、アドインのスクリプトによって、新しく挿入されたテーブルのバインドが作成される場合 (たとえば、 [Office.](xref:office!Office.Bindings:interface)<!-- -->. addFromSelectionAsync メソッド) を選択し、rowCount プロパティの値をチェックします。返される値は、スプレッドシートが Excel 2013 または Excel on the web で開いているかどうかによって異なります。\n\n- デスクトップ上の Excel では、rowCount は0を返します (ヘッダーに続く空の行は計算されません)。\n\n- Web 上の Excel では、rowCount は1を返します (ヘッダーに続く空の行はカウントされます)。\n\nスクリプトでこの違いを回避するには、rowCount == 1 かどうかを確認し、これが真の場合、行に含まれている文字列がすべて空であるかどうかを確認します。\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showBindingRowCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Rows: \" + asyncResult.value.rowCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rowCount: number;'
    return:
      type: number
methods:
- name: addColumnsAsync(tableData, options, callback)
  uid: office!Office.TableBinding#addColumnsAsync:member(1)
  package: office!
  fullName: addColumnsAsync(tableData, options, callback)
  summary: 指定されたデータを、追加の列としてテーブルに追加します。
  remarks: >-
    データおよびヘッダーの値を指定する1つ以上の列を追加するには、TableData オブジェクトを data パラメーターとして渡します。 データのみを指定する 1 つ以上の列を追加するには、配列の配列 ("matrix") を data パラメーターとして渡します。


    Addcolumns Async 操作の成功または失敗はアトミックです。 つまり、列を追加する操作はその全体が成功する必要があり、1 つでもエラーが発生すると、操作全体がロールバックされます (コールバックに返される AsyncResult.status プロパティもエラーを報告します)。


    - Data 引数として渡す配列の各行には、更新するテーブルと同じ行数を指定する必要があります。 そうでないと、操作全体が失敗します。


    - 配列内の各行とセルは、その行またはセルをテーブル内の新しく追加される列に正常に追加する必要があります。何らかの理由によって、行またはセルを設定できなかった場合は、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Web 上の Excel に関するその他のコメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドへの1回の呼び出しでは2万を超えることはできません。


    #### <a name="examples"></a>例


    ```javascript

    // The following example adds a single column with three rows to a bound table with the id "myTable"

    // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,

    // the table being updated must have three rows.


    // Add a column to a binding of type table by passing a TableData object.

    function addColumns() {
        var myTable = new Office.TableData();
        myTable.headers = [["Cities"]];
        myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }


    // The following example adds a single column with three rows to a bound table with the id myTable

    // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.

    // To succeed, the table being updated must have three rows.


    // Add a column to a binding of type table by passing an array of arrays.

    function addColumns() {
        var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableData
      description: テーブルに追加する1つ以上のデータ列を含む配列 ("matrix") または TableData オブジェクト。 必須です。
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addColumnsAsync(tableData, callback)
  uid: office!Office.TableBinding#addColumnsAsync:member(2)
  package: office!
  fullName: addColumnsAsync(tableData, callback)
  summary: 指定されたデータを、追加の列としてテーブルに追加します。
  remarks: >-
    データおよびヘッダーの値を指定する1つ以上の列を追加するには、TableData オブジェクトを data パラメーターとして渡します。 データのみを指定する 1 つ以上の列を追加するには、配列の配列 ("matrix") を data パラメーターとして渡します。


    Addcolumns Async 操作の成功または失敗はアトミックです。 つまり、列を追加する操作はその全体が成功する必要があり、1 つでもエラーが発生すると、操作全体がロールバックされます (コールバックに返される AsyncResult.status プロパティもエラーを報告します)。


    - Data 引数として渡す配列の各行には、更新するテーブルと同じ行数を指定する必要があります。 そうでないと、操作全体が失敗します。


    - 配列内の各行とセルは、その行またはセルをテーブル内の新しく追加される列に正常に追加する必要があります。何らかの理由によって、行またはセルを設定できなかった場合は、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Web 上の Excel に関するその他のコメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドへの1回の呼び出しでは2万を超えることはできません。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableData
      description: テーブルに追加する1つ以上のデータ列を含む配列 ("matrix") または TableData オブジェクト。 必須です。
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addRowsAsync(rows, options, callback)
  uid: office!Office.TableBinding#addRowsAsync:member(1)
  package: office!
  fullName: addRowsAsync(rows, options, callback)
  summary: 指定されたデータを、追加の行としてテーブルに追加します。
  remarks: >-
    Tablebinding.addrowsasync 操作の成功または失敗はアトミックです。 つまり、列を追加する操作はその全体が成功する必要があり、1 つでもエラーが発生すると、操作全体がロールバックされます (コールバックに返される AsyncResult.status プロパティもエラーを報告します)。


    - Data 引数として渡す配列の各行には、更新するテーブルと同じ列数を指定する必要があります。 そうでないと、操作全体が失敗します。


    - 配列内の各列とセルは、新しく追加された行のテーブルに、その列またはセルを正常に追加する必要があります。 何らかの理由で任意の列またはセルが設定されていない場合、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Web 上の Excel に関するその他のコメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドへの1回の呼び出しでは2万を超えることはできません。


    #### <a name="examples"></a>例


    ```javascript

    function addRowsToTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.addRowsAsync([["6", "k"], ["7", "j"]]);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: rows
      description: 配列の配列 ("matrix")、またはテーブルに追加する1つまたは複数の行を含む TableData オブジェクト。 必須です。
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addRowsAsync(rows, callback)
  uid: office!Office.TableBinding#addRowsAsync:member(2)
  package: office!
  fullName: addRowsAsync(rows, callback)
  summary: 指定されたデータを、追加の行としてテーブルに追加します。
  remarks: >-
    Tablebinding.addrowsasync 操作の成功または失敗はアトミックです。 つまり、列を追加する操作はその全体が成功する必要があり、1 つでもエラーが発生すると、操作全体がロールバックされます (コールバックに返される AsyncResult.status プロパティもエラーを報告します)。


    - Data 引数として渡す配列の各行には、更新するテーブルと同じ列数を指定する必要があります。 そうでないと、操作全体が失敗します。


    - 配列内の各列とセルは、新しく追加された行のテーブルに、その列またはセルを正常に追加する必要があります。 何らかの理由で任意の列またはセルが設定されていない場合、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Web 上の Excel に関するその他のコメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドへの1回の呼び出しでは2万を超えることはできません。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: rows
      description: 配列の配列 ("matrix")、またはテーブルに追加する1つまたは複数の行を含む TableData オブジェクト。 必須です。
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: clearFormatsAsync(options, callback)
  uid: office!Office.TableBinding#clearFormatsAsync:member(1)
  package: office!
  fullName: clearFormatsAsync(options, callback)
  summary: バインド テーブルの書式設定をクリアします。
  remarks: >-
    詳細については、「 [Excel 用アドインのテーブルの書式設定](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) 」を参照してください。


    #### <a name="examples"></a>例


    ```javascript

    // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":

    Office.select("bindings#myBinding").clearFormatsAsync();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: clearFormatsAsync(callback)
  uid: office!Office.TableBinding#clearFormatsAsync:member(2)
  package: office!
  fullName: clearFormatsAsync(callback)
  summary: バインド テーブルの書式設定をクリアします。
  remarks: 詳細については、「 [Excel 用アドインのテーブルの書式設定](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) 」を参照してください。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: deleteAllDataValuesAsync(options, callback)
  uid: office!Office.TableBinding#deleteAllDataValuesAsync:member(1)
  package: office!
  fullName: deleteAllDataValuesAsync(options, callback)
  summary: テーブル内のヘッダー行以外の行と値をすべて削除し、ホスト アプリケーションに応じて適切にシフトします。
  remarks: >-
    Excel では、テーブルにヘッダー行が含まれていない場合、このメソッドはテーブルそのものを削除します。


    #### <a name="examples"></a>例


    ```javascript

    function deleteAllRowsFromTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.deleteAllDataValuesAsync();
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: deleteAllDataValuesAsync(callback)
  uid: office!Office.TableBinding#deleteAllDataValuesAsync:member(2)
  package: office!
  fullName: deleteAllDataValuesAsync(callback)
  summary: テーブル内のヘッダー行以外の行と値をすべて削除し、ホスト アプリケーションに応じて適切にシフトします。
  remarks: Excel では、テーブルにヘッダー行が含まれていない場合、このメソッドはテーブルそのものを削除します。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFormatsAsync(cellReference, formats, options, callback)
  uid: office!Office.TableBinding#getFormatsAsync:member(1)
  package: office!
  fullName: getFormatsAsync(cellReference, formats, options, callback)
  summary: 表内の指定された項目の書式設定を取得します。
  remarks: >-
    **返される形式構造**


    戻り値の配列内の各 JavaScript オブジェクトの形式は次のとおりです。 `{cells:{ cell_range }, format:{ format_definition }}`


    この `cells:` プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。


    **cells プロパティでサポートされている範囲**


    <table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>I 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>


    この `format:` プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する値を指定します ([セルの書式設定] または [ホームの書式設定セル] を右クリックし &gt; &gt; &gt; ます)。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    parameters:
    - id: cellReference
      description: 書式設定を取得するセルの範囲を指定する名前と値のペアを含むオブジェクトリテラル。
      type: any
    - id: formats
      description: 取得する書式プロパティを指定する配列。
      type: any[]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->. `value`Result のプロパティは、対応するセルの書式設定を指定する1つまたは複数の JavaScript オブジェクトを含む配列です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt; ({ cells: any, format: any})[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFormatsAsync(cellReference, formats, callback)
  uid: office!Office.TableBinding#getFormatsAsync:member(2)
  package: office!
  fullName: getFormatsAsync(cellReference, formats, callback)
  summary: 表内の指定された項目の書式設定を取得します。
  remarks: >-
    **返される形式構造**


    戻り値の配列内の各 JavaScript オブジェクトの形式は次のとおりです。 `{cells:{ cell_range }, format:{ format_definition }}`


    この `cells:` プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。


    **cells プロパティでサポートされている範囲**


    <table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>I 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>


    この `format:` プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する値を指定します ([セルの書式設定] または [ホームの書式設定セル] を右クリックし &gt; &gt; &gt; ます)。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    parameters:
    - id: cellReference
      description: 書式設定を取得するセルの範囲を指定する名前と値のペアを含むオブジェクトリテラル。
      type: any
    - id: formats
      description: 取得する書式プロパティを指定する配列。
      type: any[]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->. `value`Result のプロパティは、対応するセルの書式設定を指定する1つまたは複数の JavaScript オブジェクトを含む配列です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt; ({ cells: any, format: any})[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setFormatsAsync(cellFormat, options, callback)
  uid: office!Office.TableBinding#setFormatsAsync:member(1)
  package: office!
  fullName: setFormatsAsync(cellFormat, options, callback)
  summary: 表内の指定されたアイテムおよびデータに書式を設定します。
  remarks: "**cellFormat パラメーターを指定する**\n\nセルの書式設定値 (幅、高さ、フォント、背景、配置など) を設定または変更するには、cellFormat パラメーターを使用します。 CellFormat パラメーターとして渡す値は、対象となるセルを指定する1つまたは複数の JavaScript オブジェクトのリストを含む配列です (`cells:`<!-- -->) と形式 (`format:`<!-- -->) を設定します。\n\nCellFormat 配列内の各 JavaScript オブジェクトには、次の形式があります。 `{cells:{ cell_range }, format:{ format_definition }}`\n\nこの `cells:` プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。\n\n**cells プロパティでサポートされている範囲**\n\n<table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>I 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>\n\nこの `format:` プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する値を指定します ([セルの書式設定] または [ホームの書式設定セル] を右クリックし &gt; &gt; &gt; ます)。\n\nプロパティの値は、 `format:` JavaScript オブジェクトリテラルの1つ以上のプロパティの名前と値のペアのリストとして指定します。 The property name specifies the name of the formatting property to set, and value specifies the property value. You can specify multiple values for a given format, such as both a font's color and size.\n\nHere's three `format:` property value examples:\n\n`//Set cells: font color to green and size to 15 points.`\n\n`format: {fontColor : \"green\", fontSize : 15}`\n\n`//Set cells: border to dotted blue.`\n\n`format: {borderStyle: \"dotted\", borderColor: \"blue\"}`\n\n`//Set cells: background to red and alignment to centered.`\n\n`format: {backgroundColor: \"red\", alignHorizontal: \"center\"}`\n\n数値の書式を指定するには、プロパティで \"code\" 文字列の表示形式を指定し `numberFormat:` ます。 この文字列に指定できる数値の形式は、Excel の [ セルの書式設定] ダイアログ ボックスの [ 表示形式] タブの [ ユーザー定義] 分類項目で設定できる形式に対応しています。 次の例は、数値を小数点以下 2 桁を含むパーセントとして表示する方法を示しています。\n\n`format: {numberFormat:\"0.00%\"}`\n\n詳細については、「[ユーザー設定の番号書式を作成](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)する方法」を参照してください。<!-- -->.\n\nデータを書き込むときにテーブルの書式設定を行うには、引数 tableOptions および cellFormat を使用し `Document.setSelectedDataAsync` ます。またはメソッドを使用 `TableBinding.setDataAsync` します。\n\nおよびメソッドのオプションのパラメーターを使用して書式設定 `Document.setSelectedDataAsync` `TableBinding.setDataAsync` を行うと、初めてデータを書き込むときにのみ書式設定が行われます。 データの書き込み後に書式設定を変更するには、次のメソッドを使用します。\n\n- フォントの色やスタイルなどのセルの書式を更新するには、 `TableBinding.setFormatsAsync` メソッド (このメソッド) を使用します。\n\n- 縞模様 (行) やフィルターボタンなどのテーブルオプションを更新するには、メソッドを使用し `TableBinding.setTableOptions` ます。\n\n- 書式設定をクリアするには、メソッドを使用し `TableBinding.clearFormats` ます。\n\n詳細および例については、「 [Excel 用アドインでテーブルの書式を設定する方法](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)」を参照してください。<!-- -->.\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Specifying a single target\n// The following example shows a cellFormat value that sets the font color of the header row to red.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: Office.Table.Headers, format: {fontColor: \"red\"}}], \n    function (asyncResult){});\n\n// Specifying multiple targets\n// The setFormatsAsync method can support formatting multiple targets within the bound table in a \n// single function call. To do that, you pass a list of objects in the cellFormat array \n// for each target that you want to format.\n// For example, the following line of code will set the font color of the first row yellow, \n// and the fourth cell in the third row to have a white border and bold text.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n\n// Additional remarks for Excel Online\n// The number of formatting groups passed to the cellFormat parameter can't exceed 100. \n// A single formatting group consists of a set of formatting applied to a specified range of cells. \n// For example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: cellFormat
      description: ターゲットとなるセルと、対象セルに適用する書式設定を指定した 1 つ以上の JavaScript オブジェクトが含まれる配列。
      type: any[]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setFormatsAsync(cellFormat, callback)
  uid: office!Office.TableBinding#setFormatsAsync:member(2)
  package: office!
  fullName: setFormatsAsync(cellFormat, callback)
  summary: 表内の指定されたアイテムおよびデータに書式を設定します。
  remarks: >-
    **cellFormat パラメーターを指定する**


    セルの書式設定値 (幅、高さ、フォント、背景、配置など) を設定または変更するには、cellFormat パラメーターを使用します。 CellFormat パラメーターとして渡す値は、対象となるセルを指定する1つまたは複数の JavaScript オブジェクトのリストを含む配列です (`cells:`<!-- -->) と形式 (`format:`<!-- -->) を設定します。


    CellFormat 配列内の各 JavaScript オブジェクトには、次の形式があります。 `{cells:{ cell_range }, format:{ format_definition }}`


    この `cells:` プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。


    **cells プロパティでサポートされている範囲**


    <table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>I 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>


    この `format:` プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する値を指定します ([セルの書式設定] または [ホームの書式設定セル] を右クリックし &gt; &gt; &gt; ます)。


    プロパティの値は、 `format:` JavaScript オブジェクトリテラルの1つ以上のプロパティの名前と値のペアのリストとして指定します。 The property name specifies the name of the formatting property to set, and value specifies the property value. You can specify multiple values for a given format, such as both a font's color and size.


    Here's three `format:` property value examples:


    `//Set cells: font color to green and size to 15 points.`


    `format: {fontColor : "green", fontSize : 15}`


    `//Set cells: border to dotted blue.`


    `format: {borderStyle: "dotted", borderColor: "blue"}`


    `//Set cells: background to red and alignment to centered.`


    `format: {backgroundColor: "red", alignHorizontal: "center"}`


    数値の書式を指定するには、プロパティで "code" 文字列の表示形式を指定し `numberFormat:` ます。 この文字列に指定できる数値の形式は、Excel の [ セルの書式設定] ダイアログ ボックスの [ 表示形式] タブの [ ユーザー定義] 分類項目で設定できる形式に対応しています。 次の例は、数値を小数点以下 2 桁を含むパーセントとして表示する方法を示しています。


    `format: {numberFormat:"0.00%"}`


    詳細については、「[ユーザー設定の番号書式を作成](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)する方法」を参照してください。<!-- -->.


    データを書き込むときにテーブルの書式設定を行うには、引数 tableOptions および cellFormat を使用し `Document.setSelectedDataAsync` ます。またはメソッドを使用 `TableBinding.setDataAsync` します。


    およびメソッドのオプションのパラメーターを使用して書式設定 `Document.setSelectedDataAsync` `TableBinding.setDataAsync` を行うと、初めてデータを書き込むときにのみ書式設定が行われます。 データの書き込み後に書式設定を変更するには、次のメソッドを使用します。


    - フォントの色やスタイルなどのセルの書式を更新するには、 `TableBinding.setFormatsAsync` メソッド (このメソッド) を使用します。


    - 縞模様 (行) やフィルターボタンなどのテーブルオプションを更新するには、メソッドを使用し `TableBinding.setTableOptions` ます。


    - 書式設定をクリアするには、メソッドを使用し `TableBinding.clearFormats` ます。


    詳細および例については、「 [Excel 用アドインでテーブルの書式を設定する方法](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)」を参照してください。<!-- -->.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: cellFormat
      description: ターゲットとなるセルと、対象セルに適用する書式設定を指定した 1 つ以上の JavaScript オブジェクトが含まれる配列。
      type: any[]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTableOptionsAsync(tableOptions, options, callback)
  uid: office!Office.TableBinding#setTableOptionsAsync:member(1)
  package: office!
  fullName: setTableOptionsAsync(tableOptions, options, callback)
  summary: バインド テーブルにおけるテーブル書式設定オプションを更新します。
  remarks: "**要件セット**: [セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)\n\ngoToByIdAsync メソッドに渡されるコールバック関数で、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。\n\n<table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>書式を設定するときに取得するデータまたはオブジェクトがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult. 状態</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example shows how to:\n// 1. Create an object literal that specifies the table formatting options to update on the bound table.\n// 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object\n//    with formatting setting as the tableOptions parameter.\nfunction updateTableFormatting(){\n    var tableOptions = {bandedRows: true, filterButton: false, style: \"TableStyleMedium3\"}; \n\n    Office.select(\"bindings#myBinding\").setTableOptionsAsync(tableOptions, function(asyncResult){});\n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableOptions
      description: オブジェクト リテラルは、適用するテーブル オプションを定義するプロパティ名と値のペアのリストです。
      type: any
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTableOptionsAsync(tableOptions, callback)
  uid: office!Office.TableBinding#setTableOptionsAsync:member(2)
  package: office!
  fullName: setTableOptionsAsync(tableOptions, callback)
  summary: バインド テーブルにおけるテーブル書式設定オプションを更新します。
  remarks: >-
    **要件セット**: [セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    goToByIdAsync メソッドに渡されるコールバック関数で、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。


    <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>書式を設定するときに取得するデータまたはオブジェクトがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult. 状態</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableOptions
      description: オブジェクト リテラルは、適用するテーブル オプションを定義するプロパティ名と値のペアのリストです。
      type: any
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="office!Office.Binding:interface" />
metadata:
  ms.openlocfilehash: 765e05bdfad630e48da061b7ceb80ad7135fe5ce
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49329454"
