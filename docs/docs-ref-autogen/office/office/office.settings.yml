### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Settings:interface'
    summary: ホスト ドキュメントに名前/値のペアとして格納される、作業ウィンドウ アドインまたはコンテンツ アドインのカスタム設定を表します。
    remarks: |-
      **ホスト**: Excel、PowerPoint、Word

      Settings オブジェクトのメソッドを使用して作成された設定は、アドインとドキュメントごとに保存されます。 つまり、これらの設定は、それを作成したアドインでのみ、かつ設定が保存されているドキュメントからのみ使用できます。

      設定の名前は string ですが、値には string、number、boolean、null、object、または array を指定できます。

      Settings オブジェクトは Document オブジェクトの一部として自動的に読み込まれ、アドインがアクティブ化されたときに、そのオブジェクトの settings プロパティを呼び出すことで使用できます。

      開発者は、設定を追加または削除した後に、saveAsync メソッドを呼び出して、設定をドキュメントに保存する責任があります。
    name: Office.Settings
    fullName: Office.Settings
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Settings#addHandlerAsync:member(1)'
      - 'office!Office.Settings#addHandlerAsync:member(2)'
      - 'office!Office.Settings#get:member(1)'
      - 'office!Office.Settings#refreshAsync:member(1)'
      - 'office!Office.Settings#remove:member(1)'
      - 'office!Office.Settings#removeHandlerAsync:member(1)'
      - 'office!Office.Settings#removeHandlerAsync:member(2)'
      - 'office!Office.Settings#saveAsync:member(1)'
      - 'office!Office.Settings#saveAsync:member(2)'
      - 'office!Office.Settings#set:member(1)'
  - uid: 'office!Office.Settings#addHandlerAsync:member(1)'
    summary: |-
      SettingsChanged イベントのイベントハンドラーを追加します。

      **重要**: アドインが excel クライアントで実行されている場合、アドインのコードでは、settingschanged イベントのハンドラーを登録できますが、web 上の excel で開かれたスプレッドシートを使用してアドインが読み込まれ、複数のユーザーがスプレッドシートを編集している場合にのみイベントが発生します。 そのため、効率的に settingsChanged イベントがサポートされるのは、共同編集シナリオの web 上の Excel に対してのみです。
    remarks: |-
      **要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      各イベントハンドラー関数の名前が一意である限り、指定された eventType に対して複数のイベントハンドラーを追加できます。
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 追加するイベントの種類を指定します。 必須です。
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '追加するイベントハンドラー関数。これは、唯一のパラメーターが SettingsChangedEventArgs 型であることを示し[ます。](xref:office!Office.SettingsChangedEventArgs:interface)<!-- -->. 必須。'
          type:
            - any
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: |-
            省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.

            <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>イベント ハンドラーを追加するとき、取得するデータまたはオブジェクトがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>
          type:
            - 'office!Office.Settings#addHandlerAsync~0:complex'
  - uid: 'office!Office.Settings#addHandlerAsync:member(2)'
    summary: |-
      SettingsChanged イベントのイベントハンドラーを追加します。

      **重要**: アドインが excel クライアントで実行されている場合、アドインのコードでは、settingschanged イベントのハンドラーを登録できますが、web 上の excel で開かれたスプレッドシートを使用してアドインが読み込まれ、複数のユーザーがスプレッドシートを編集している場合にのみイベントが発生します。 そのため、効率的に settingsChanged イベントがサポートされるのは、共同編集シナリオの web 上の Excel に対してのみです。
    remarks: |-
      **要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      各イベントハンドラー関数の名前が一意である限り、指定された eventType に対して複数のイベントハンドラーを追加できます。

      #### <a name="examples"></a>例

      ```javascript
      function addSelectionChangedEventHandler() {
          Office.context.document.settings.addHandlerAsync(Office.EventType.SettingsChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithSettings(eventArgs.settings);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 追加するイベントの種類を指定します。 必須です。
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '追加するイベントハンドラー関数。これは、唯一のパラメーターが SettingsChangedEventArgs 型であることを示し[ます。](xref:office!Office.SettingsChangedEventArgs:interface)<!-- -->. 必須。'
          type:
            - any
        - id: callback
          description: |-
            省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.

            <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>イベント ハンドラーを追加するとき、取得するデータまたはオブジェクトがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>
          type:
            - 'office!Office.Settings#addHandlerAsync~1:complex'
  - uid: 'office!Office.Settings#get:member(1)'
    summary: 指定された設定を取得します。
    remarks: |-
      **要件セット**:[設定](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      #### <a name="examples"></a>例

      ```javascript
      function displayMySetting() {
          write('Current value for mySetting: ' + Office.context.document.settings.get('mySetting'));
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: get(name)
    fullName: get(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'get(name: string): any;'
      return:
        type:
          - any
        description: プロパティ名が JSON シリアル化値にマップされたオブジェクト。
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'office!Office.Settings#refreshAsync:member(1)'
    summary: ドキュメントに保持されている設定をすべて読み取って、メモリ内に保持されているこれらの設定のコンテンツまたは作業ウィンドウ アドインのコピーを更新します。
    remarks: |-
      **要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      このメソッドは、同じアドインの複数のインスタンスが同じドキュメントに対して機能している場合に、Excel、Word、および PowerPoint の共同編集シナリオで役立ちます。 各アドインは、ユーザーがそれを開いたときにドキュメントから読み込まれた設定のメモリ内コピーに対して機能しているため、各ユーザーが使用する設定値が同期されないようにすることができます。これは、アドインのインスタンスが saveAsync メソッドを呼び出して、そのユーザーのすべての設定をドキュメントに永続化するたびに発生する可能性があります。 アドインの settingsChanged イベントのイベントハンドラーから refreshAsync メソッドを呼び出すと、すべてのユーザーの設定値が更新されます。

      refreshAsync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して次の情報を返すことができます。

      <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>更新された値を持つ Settings オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>

      #### <a name="examples"></a>例

      ```javascript
      function refreshSettings() {
          Office.context.document.settings.refreshAsync(function (asyncResult) {
              write('Settings refreshed with status: ' + asyncResult.status);
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: refreshAsync(callback)
    fullName: refreshAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAsync(callback?: (result: AsyncResult<Office.Settings>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->. `value`結果のプロパティは、更新された値を持つ、 [Office の Settings](xref:office!Office.Settings:interface)オブジェクトです。'
          type:
            - 'office!Office.Settings#refreshAsync~0:complex'
  - uid: 'office!Office.Settings#remove:member(1)'
    summary: |-
      指定された設定を削除します。

      **重要**: settings. remove メソッドは、設定プロパティバッグのメモリ内コピーにのみ影響することに注意してください。 To persist the removal of the specified setting in the document, at some point after calling the Settings.remove method and before the add-in is closed, you must call the Settings.saveAsync method.
    remarks: |-
      **要件セット**:[設定](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      null は設定として有効な値です。 したがって、 null を設定に割り当ててもその設定が設定プロパティ バッグから削除されるわけではありません。

      #### <a name="examples"></a>例

      ```javascript
      function removeMySetting() {
          Office.context.document.settings.remove('mySetting');
      }
      ```
    name: remove(name)
    fullName: remove(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'office!Office.Settings#removeHandlerAsync:member(1)'
    summary: SettingsChanged イベントのイベントハンドラーを削除します。
    remarks: |-
      **要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Removehandler Async メソッドを呼び出すときにオプションの handler パラメーターを省略すると、指定された eventType のすべてのイベントハンドラーが削除されます。

      Callback パラメーターに渡した関数が実行されると、AsyncResult オブジェクトを受け取ります。このオブジェクトには、コールバック関数の唯一のパラメーターからアクセスできます。

      Removeハンドラ Async メソッドに渡されたコールバック関数で、AsyncResult オブジェクトのプロパティを使用して次の情報を返すことができます。
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 削除するイベントの型を指定します。 必須。
          type:
            - 'office!Office.EventType:enum'
        - id: options
          description: 削除するイベントハンドラーを決めるためのオプションを提供します。
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: '省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.'
          type:
            - 'office!Office.Settings#removeHandlerAsync~0:complex'
  - uid: 'office!Office.Settings#removeHandlerAsync:member(2)'
    summary: SettingsChanged イベントのイベントハンドラーを削除します。
    remarks: |-
      **要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Removehandler Async メソッドを呼び出すときにオプションの handler パラメーターを省略すると、指定された eventType のすべてのイベントハンドラーが削除されます。

      Callback パラメーターに渡した関数が実行されると、AsyncResult オブジェクトを受け取ります。このオブジェクトには、コールバック関数の唯一のパラメーターからアクセスできます。

      Removeハンドラ Async メソッドに渡されたコールバック関数で、AsyncResult オブジェクトのプロパティを使用して次の情報を返すことができます。

      #### <a name="examples"></a>例

      ```javascript
      function removeSettingsChangedEventHandler() {
          Office.context.document.settings.removeHandlerAsync(Office.EventType.SettingsChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithSettings(eventArgs.settings);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 削除するイベントの型を指定します。 必須。
          type:
            - 'office!Office.EventType:enum'
        - id: callback
          description: '省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.'
          type:
            - 'office!Office.Settings#removeHandlerAsync~1:complex'
  - uid: 'office!Office.Settings#saveAsync:member(1)'
    summary: 設定プロパティ バッグのメモリ内コピーをドキュメントに保持します。
    remarks: |-
      **要件セット**:[設定](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      アドインによって以前に保存された設定は、初期化時に読み込まれるため、セッションの有効期間中は、設定プロパティバッグのメモリ内コピーを操作するために set メソッドと get メソッドを使用するだけでかまいません。 設定を保持して、次回アドインを使用するときに使用できるようにするには、saveAsync メソッドを使用します。

      **注**: saveAsync メソッドは、メモリ内設定プロパティバッグをドキュメントファイルに保持します。 ただし、ドキュメントファイル自体に加えられた変更は、ユーザー (または自動バックアップの設定) でファイルシステムにドキュメントが保存されるときにのみ保存されます。 RefreshAsync メソッドは、同じアドインの他のインスタンスが設定を変更し、それらの変更をすべてのインスタンスで使用できるようにする必要がある場合にのみ、共同編集シナリオで役立ちます。

      <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>取得するオブジェクトまたはデータがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options?: SaveSettingsOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 設定を保存するためのオプションを提供します。
          type:
            - 'office!Office.SaveSettingsOptions:interface'
        - id: callback
          description: '省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.'
          type:
            - 'office!Office.Settings#saveAsync~0:complex'
  - uid: 'office!Office.Settings#saveAsync:member(2)'
    summary: 設定プロパティ バッグのメモリ内コピーをドキュメントに保持します。
    remarks: |-
      **要件セット**:[設定](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      アドインによって以前に保存された設定は、初期化時に読み込まれるため、セッションの有効期間中は、設定プロパティバッグのメモリ内コピーを操作するために set メソッドと get メソッドを使用するだけでかまいません。 設定を保持して、次回アドインを使用するときに使用できるようにするには、saveAsync メソッドを使用します。

      **注**: saveAsync メソッドは、メモリ内設定プロパティバッグをドキュメントファイルに保持します。 ただし、ドキュメントファイル自体に加えられた変更は、ユーザー (または自動バックアップの設定) でファイルシステムにドキュメントが保存されるときにのみ保存されます。 RefreshAsync メソッドは、同じアドインの他のインスタンスが設定を変更し、それらの変更をすべてのインスタンスで使用できるようにする必要がある場合にのみ、共同編集シナリオで役立ちます。

      <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>取得するオブジェクトまたはデータがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>

      #### <a name="examples"></a>例

      ```javascript
      function persistSettings() {
          Office.context.document.settings.saveAsync(function (asyncResult) {
              write('Settings saved with status: ' + asyncResult.status);
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.'
          type:
            - 'office!Office.Settings#saveAsync~1:complex'
  - uid: 'office!Office.Settings#set:member(1)'
    summary: |-
      指定された設定を行うかまたは作成します。

      **重要**: settings メソッドは、設定プロパティバッグのメモリ内コピーにのみ影響することに注意してください。 To make sure that additions or changes to settings will be available to your add-in the next time the document is opened, at some point after calling the Settings.set method and before the add-in is closed, you must call the Settings.saveAsync method to persist settings in the document.
    remarks: |-
      **要件セット**:[設定](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      Set メソッドは、指定された名前が存在しない場合は新しい設定を作成し、設定プロパティバッグのメモリ内コピーに指定した名前の既存の設定を設定します。 Settings.saveAsync メソッドを呼び出した後で、その値はそのデータ型のシリアル化された JSON 表現としてドキュメントに格納されます。

      #### <a name="examples"></a>例

      ```javascript
      function setMySetting() {
          Office.context.document.settings.set('mySetting', 'mySetting value');
      }
      ```
    name: 'set(name, value)'
    fullName: 'set(name, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(name: string, value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: value
          description: Specifies the value to be stored.
          type:
            - any
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.Settings#addHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#addHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#refreshAsync~0:complex'
    name: '(result: AsyncResult<Office.Settings>) => void'
    fullName: '(result: Office.AsyncResult<Office.Settings>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.Settings:interface'
        name: Office.Settings
        fullName: Office.Settings
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.Settings#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.SaveSettingsOptions:interface'
    name: SaveSettingsOptions
  - uid: 'office!Office.Settings#saveAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#saveAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void