### YamlMime:TSType
name: Office.Document
uid: office!Office.Document:interface
package: office!
fullName: Office.Document
summary: アドインから対話操作するドキュメントを表す抽象クラス。
remarks: '**ホスト**: Excel、PowerPoint、Project、Word'
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bindings
  uid: office!Office.Document#bindings:member
  package: office!
  fullName: bindings
  summary: ドキュメントに定義されているバインドへのアクセスを提供するオブジェクトを取得します。
  remarks: "Document オブジェクトをスクリプトで直接インスタンス化することはありません。 To call members of the Document object to interact with the current document or worksheet, use `Office.context.document` in your script.\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction displayAllBindings() {\n    Office.context.document.bindings.getAllAsync(function (asyncResult) {\n        var bindingString = '';\n        for (var i in asyncResult.value) {\n            bindingString += asyncResult.value[i].id + '\\n';\n        }\n        write('Existing bindings: ' + bindingString);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bindings: Bindings;'
    return:
      type: <xref uid="office!Office.Bindings:interface" />
- name: customXmlParts
  uid: office!Office.Document#customXmlParts:member
  package: office!
  fullName: customXmlParts
  summary: ドキュメント内のカスタム XML パーツを表すオブジェクトを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'customXmlParts: CustomXmlParts;'
    return:
      type: <xref uid="office!Office.CustomXmlParts:interface" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction getCustomXmlParts(){\n    Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {\n        write('Retrieved ' + asyncResult.value.length + ' custom XML parts');\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: mode
  uid: office!Office.Document#mode:member
  package: office!
  fullName: mode
  summary: ドキュメントのモードを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'mode: DocumentMode;'
    return:
      type: <xref uid="office!Office.DocumentMode:enum" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction displayDocumentMode() {\n    write(Office.context.document.mode);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following example initializes the add-in and then gets properties of the\n// Document object that are available in the context of a Project document.\n// A Project document is the opened, active project. To access members of the\n// ProjectDocument object, use the Office.context.document object as shown in\n// the code examples for ProjectDocument methods and events.\n// The example assumes your add-in has a reference to the jQuery library and\n// that the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information about the document.\n            showDocumentProperties();\n        });\n    };\n\n    // Get the document mode and the URL of the active project.\n    function showDocumentProperties() {\n        var output = String.format(\n            'The document mode is {0}.<br/>The URL of the active project is {1}.',\n            Office.context.document.mode,\n            Office.context.document.url);\n        $('#message').html(output);\n    }\n})();\n```"
- name: settings
  uid: office!Office.Document#settings:member
  package: office!
  fullName: settings
  summary: 現在のドキュメントのコンテンツ アプリまたは作業ウィンドウ アプリの保存されているカスタム設定を表すオブジェクトを取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'settings: Settings;'
    return:
      type: <xref uid="office!Office.Settings:interface" />
- name: url
  uid: office!Office.Document#url:member
  package: office!
  fullName: url
  summary: ホスト アプリケーションが現在開いているドキュメントの URL を取得します。 URL が使用できない場合は null を返します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'url: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction displayDocumentUrl() {\n    write(Office.context.document.url);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Document#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Document オブジェクト イベントのイベント ハンドラーを追加します。
  remarks: >-
    **要件セット**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    各イベント ハンドラー関数の名前が一意である限り、指定した eventType に対して複数のイベント ハンドラーを追加できます。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Document オブジェクト イベントの場合、eventType パラメーターは次のように指定できます `Office.EventType.Document.SelectionChanged` 。 `Office.EventType.Document.ActiveViewChanged`<!-- -->、または、この列挙の対応するテキスト値を指定します。
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: 追加するイベント ハンドラー関数で、そのパラメーターは[umentSelectionChangedEventArgsOffice.Doc型のみです](xref:office!Office.DocumentSelectionChangedEventArgs:interface)。<!-- -->. 必須です。
      type: any
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Document#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Document オブジェクト イベントのイベント ハンドラーを追加します。
  remarks: "**要件セット**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)\n\n各イベント ハンドラー関数の名前が一意である限り、指定した eventType に対して複数のイベント ハンドラーを追加できます。\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example adds an event handler for the SelectionChanged event of a document\nfunction addSelectionChangedEventHandler() {\n    Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);\n}\n\nfunction MyHandler(eventArgs) {\n    write('Event raised: ' + eventArgs.type);\n    doSomethingWithDocument(eventArgs.document);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example adds a handler for the ResourceSelectionChanged event.\n// When the resource selection changes in the document, it gets the GUID of the selected resource.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ResourceSelectionChanged,\n                getResourceGuid);\n        });\n    };\n\n    // Get the GUID of the selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ResourceSelectionChanged\n// event handler in a Project add-in, see \"Create your first task pane add-in\n// for Project 2013 by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example adds a handler for the TaskSelectionChanged event.\n// When the task selection changes in the document, it gets the GUID of the\n// selected task.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.TaskSelectionChanged,\n                getTaskGuid);\n            getTaskGuid();\n        });\n    };\n\n    // Get the GUID of the selected task and display it in the add-in.\n    function getTaskGuid() {\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```\n```javascript\n// The following code example adds a handler for the ViewSelectionChanged\n// event. When the active view changes, it gets the name and type of the active view.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the name and type of the active view and display it in the add-in.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, result.value.viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For an example that shows how to use a ViewSelectionChanged event handler in a\n// Project add-in, see \"Create your first task pane add-in for Project 2013 by\n// using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.\n// When the active view changes, the handler checks the view type. It enables a button if the view is a resource\n// view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected\n// resource and displays it in the add-in.\n// The example assumes that your add-in has a reference to the jQuery library and that the following page controls\n// are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" disabled=\"disabled\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            // Add a ViewSelectionChanged event handler.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            $('#get-info').click(getResourceGuid);\n\n            // This example calls the handler on page load to get the active view\n            // of the default page.\n            getActiveView();\n        });\n    };\n\n    // Activate the button based on the active view type of the document.\n    // This is the ViewSelectionChanged event handler.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var viewType = result.value.viewType;\n                    if (viewType == 6 ||   // ResourceForm\n                        viewType == 7 ||   // ResourceSheet\n                        viewType == 8 ||   // ResourceGraph\n                        viewType == 15) {  // ResourceUsage\n                        $('#get-info').removeAttr('disabled');\n                    }\n                    else {\n                        $('#get-info').attr('disabled', 'disabled');\n                    }\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    // Get the GUID of the currently selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html('Resource GUID: ' + result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,\n// see \"Create your first task pane add-in for Project by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Document オブジェクト イベントの場合、eventType パラメーターは次のように指定できます `Office.EventType.Document.SelectionChanged` 。 `Office.EventType.Document.ActiveViewChanged`<!-- -->、または、この列挙の対応するテキスト値を指定します。
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: 追加するイベント ハンドラー関数で、そのパラメーターは[umentSelectionChangedEventArgsOffice.Doc型のみです](xref:office!Office.DocumentSelectionChangedEventArgs:interface)。<!-- -->. 必須です。
      type: any
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(options, callback)
  uid: office!Office.Document#getActiveViewAsync:member(1)
  package: office!
  fullName: getActiveViewAsync(options, callback)
  summary: プレゼンテーションの現在のビューの状態を返します (編集または読み取り)。
  remarks: >-
    **要件セット**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    ビューが変更されたときにイベントをトリガーできます。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、プレゼンテーションの現在のビューの状態です。 返される値は、「編集」または「読み取り」のいずれかです。 "edit" は、スライドを編集できるビュー (標準ビューやアウトライン ビューなど) に対応します。 "read" は、スライド ショーまたは閲覧ビューに対応します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(callback)
  uid: office!Office.Document#getActiveViewAsync:member(2)
  package: office!
  fullName: getActiveViewAsync(callback)
  summary: プレゼンテーションの現在のビューの状態を返します (編集または読み取り)。
  remarks: >-
    **要件セット**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    ビューが変更されたときにイベントをトリガーできます。


    #### <a name="examples"></a>例


    ```javascript

    function getFileView() {
        // Get whether the current view is edit or read.
        Office.context.document.getActiveViewAsync(function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage(asyncResult.value);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、プレゼンテーションの現在のビューの状態です。 返される値は、「編集」または「読み取り」のいずれかです。 "edit" は、スライドを編集できるビュー (標準ビューやアウトライン ビューなど) に対応します。 "read" は、スライド ショーまたは閲覧ビューに対応します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, options, callback)
  uid: office!Office.Document#getFileAsync:member(1)
  package: office!
  fullName: getFileAsync(fileType, options, callback)
  summary: ドキュメント ファイル全体を、最大で 4194304 バイト (4 MB) のスライスに分割して返します。 iPad のアドインの場合、ファイル スライスは最大 65536 (64 KB) までサポートされます。 許可されている制限を超えてスライス サイズを指定すると、"内部エラー" が発生しますのでご注意ください。
  remarks: "**要件セット**:\n\n- [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (使用する場合) `Office.FileType.Compressed`<!-- -->)\n\n- [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)\n\n- [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (使用する場合) `Office.FileType.Text`<!-- -->)\n\niPad 上の Office Office 以外の Office ホスト アプリケーションで実行されているアドインの場合、このメソッドは最大 `getFileAsync` 4194304 バイト (4 MB) のスライスでファイルを取得できます。 iPad 上の Office アプリで実行されているアドインの場合、このメソッドは最大 `getFileAsync` 65536 (64 KB) のスライスでファイルを取得できます。\n\nパラメーター `fileType` は [、Office.FileType 列挙またはテキスト値](xref:office!Office.FileType:enum) を使用して指定できます。 ただし、可能な値はホストによって異なります。\n\n*サポートされる FileTypes (プラットフォーム別)* <table> <tr><th> </th><th> Windows での Office </th><th> Office on the web </th><th> Office on iPad </th><th> Office on Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Word </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example gets the document in Office Open XML (\"compressed\") format in 65536 bytes (64 KB) slices.\n// Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.\nfunction getDocumentAsCompressed() {\n    Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, \n        function (result) {\n            if (result.status == \"succeeded\") {\n                // If the getFileAsync call succeeded, then\n                // result.value will return a valid File Object.\n                var myFile = result.value;\n                var sliceCount = myFile.sliceCount;\n                var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];\n                app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n\n                // Get the file slices.\n                getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n            else {\n                app.showNotification(\"Error:\", result.error.message);\n            }\n    });\n}\n\nfunction getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {\n    file.getSliceAsync(nextSlice, function (sliceResult) {\n        if (sliceResult.status == \"succeeded\") {\n            if (!gotAllSlices) { // Failed to get all slices, no need to continue.\n                return;\n            }\n\n            // Got one slice, store it in a temporary array.\n            // (Or you can do something else, such as\n            // send it to a third-party server.)\n            docdataSlices[sliceResult.value.index] = sliceResult.value.data;\n            if (++slicesReceived == sliceCount) {\n              // All slices have been received.\n              file.closeAsync();\n              onGotAllSlices(docdataSlices);\n            }\n            else {\n                getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n        }\n            else {\n                gotAllSlices = false;\n                file.closeAsync();\n                app.showNotification(\"getSliceAsync Error:\", sliceResult.error.message);\n            }\n    });\n}\n\nfunction onGotAllSlices(docdataSlices) {\n    var docdata = [];\n    for (var i = 0; i < docdataSlices.length; i++) {\n        docdata = docdata.concat(docdataSlices[i]);\n    }\n\n    var fileContent = new String();\n    for (var j = 0; j < docdata.length; j++) {\n        fileContent += String.fromCharCode(docdata[j]);\n    }\n\n    // Now all the file content is stored in 'fileContent' variable,\n    // you can do something with it, such as print, fax...\n}\n\n// The following example gets the document in PDF format.\nOffice.context.document.getFileAsync(Office.FileType.Pdf,\n    function(result) {\n        if (result.status == \"succeeded\") {\n            var myFile = result.value;\n            var sliceCount = myFile.sliceCount;\n            app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n            // Now, you can call getSliceAsync to download the files,\n            // as described in the previous code segment (compressed format).\n            \n            myFile.closeAsync();\n        }\n        else {\n            app.showNotification(\"Error:\", result.error.message);\n        }\n}\n);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: ファイルが返される形式
      type: <xref uid="office!Office.FileType:enum" />
    - id: options
      description: ドキュメントを分割するスライスのサイズを設定するためのオプションを提供します。
      type: <xref uid="office!Office.GetFileOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは File オブジェクトです。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, callback)
  uid: office!Office.Document#getFileAsync:member(2)
  package: office!
  fullName: getFileAsync(fileType, callback)
  summary: ドキュメント ファイル全体を、最大で 4194304 バイト (4 MB) のスライスに分割して返します。 iPad のアドインの場合、ファイル スライスは最大 65536 (64 KB) までサポートされます。 許可されている制限を超えてスライス サイズを指定すると、"内部エラー" が発生しますのでご注意ください。
  remarks: >-
    **要件セット**:


    - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (使用する場合) `Office.FileType.Compressed`<!-- -->)


    - [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


    - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (使用する場合) `Office.FileType.Text`<!-- -->)


    iPad 上の Office Office 以外の Office ホスト アプリケーションで実行されているアドインの場合、このメソッドは最大 `getFileAsync` 4194304 バイト (4 MB) のスライスでファイルを取得できます。 iPad アプリの Office で実行されているアドインの場合、このメソッドは最大 `getFileAsync` 65536 (64 KB) のスライスでファイルを取得できます。


    パラメーター `fileType` は [、Office.FileType 列挙またはテキスト値](xref:office!Office.FileType:enum) を使用して指定できます。 ただし、可能な値はホストによって異なります。


    *サポートされる FileTypes (プラットフォーム別)* <table> <tr><th> </th><th> Windows での Office </th><th> Office on the web </th><th> Office on iPad </th><th> Office on Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Word </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: ファイルが返される形式
      type: <xref uid="office!Office.FileType:enum" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは File オブジェクトです。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(options, callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(1)
  package: office!
  fullName: getFilePropertiesAsync(options, callback)
  summary: 現在のドキュメントのファイル プロパティを取得します。
  remarks: >-
    **要件セット**: [セットに含めない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    url プロパティを使用してファイルの URL を取得します。 `asyncResult.value.url`<!-- -->.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、ファイルのプロパティです (URL は次のページにあります) `asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(2)
  package: office!
  fullName: getFilePropertiesAsync(callback)
  summary: 現在のドキュメントのファイル プロパティを取得します。
  remarks: >-
    **要件セット**: [セットに含めない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    url プロパティを使用してファイルの URL を取得します。 `asyncResult.value.url`<!-- -->.


    #### <a name="examples"></a>例


    ```javascript

    // To read the URL of the current file, you need to write a callback function that returns the URL.

    // The following example shows how to:

    // 1. Pass an anonymous callback function that returns the value of the file's URL

    //    to the callback parameter of the getFilePropertiesAsync method.

    // 2. Display the value on the add-in's page.

    function getFileUrl() {
        // Get the URL of the current file.
        Office.context.document.getFilePropertiesAsync(function (asyncResult) {
            var fileUrl = asyncResult.value.url;
            if (fileUrl == "") {
                showMessage("The file hasn't been saved yet. Save the file and try again");
            }
            else {
                showMessage(fileUrl);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: callback
      description: コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、ファイルのプロパティです (URL は次のページにあります) `asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(options, callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(1)
  package: office!
  fullName: getMaxResourceIndexAsync(options, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 現在のプロジェクト内のリソースのコレクションの最大インデックスを取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、現在のプロジェクトのリソース コレクションの中で最も高いインデックス番号です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(2)
  package: office!
  fullName: getMaxResourceIndexAsync(callback)
  summary: >-
    プロジェクト ドキュメントのみ。 現在のプロジェクト内のリソースのコレクションの最大インデックスを取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、現在のプロジェクトのリソース コレクションの中で最も高いインデックス番号です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection \n// of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync\n// method to get each resource GUID. The example assumes that your add-in has a reference to the \n// jQuery library and that the following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getMaxTaskIndexAsync(options, callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(1)
  package: office!
  fullName: getMaxTaskIndexAsync(options, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 現在のプロジェクト内のタスクのコレクションの最大インデックスを取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、現在のプロジェクトのタスク コレクションの中で最も高いインデックス番号です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxTaskIndexAsync(callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(2)
  package: office!
  fullName: getMaxTaskIndexAsync(callback)
  summary: >-
    プロジェクト ドキュメントのみ。 現在のプロジェクト内のタスクのコレクションの最大インデックスを取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、現在のプロジェクトのタスク コレクションの中で最も高いインデックス番号です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the maximum index\n// of the collection of tasks in the current project. Then it uses the returned value\n// with the getTaskByIndexAsync method to get each task GUID.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getProjectFieldAsync(fieldId, options, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(1)
  package: office!
  fullName: getProjectFieldAsync(fieldId, options, callback)
  summary: プロジェクト ドキュメントのみ。 [プロジェクトの取得] フィールド (Ex. ProjectWebAccessURL)。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: プロジェクト レベルのフィールド。
      type: number
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、指定したフィールドの値を表す `fieldValue` プロパティが含まれる。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getProjectFieldAsync(fieldId, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(2)
  package: office!
  fullName: getProjectFieldAsync(fieldId, callback)
  summary: プロジェクト ドキュメントのみ。 [プロジェクトの取得] フィールド (Ex. ProjectWebAccessURL)。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: プロジェクト レベルのフィールド。
      type: number
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、指定したフィールドの値を表す `fieldValue` プロパティが含まれる。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example gets the values of three specified fields for the active project, \n// and then displays the values in the add-in.\n// The example calls getProjectFieldAsync recursively, after the previous call returns successfully.\n// It also tracks the calls to determine when all calls are sent.\n// The example assumes your add-in has a reference to the jQuery library and that the \n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information for the active project.\n            getProjectInformation();\n        });\n    };\n\n    // Get the specified fields for the active project.\n    function getProjectInformation() {\n        var fields =\n            [Office.ProjectProjectFields.Start, \n             Office.ProjectProjectFields.Finish, \n             Office.ProjectProjectFields.GUID];\n        var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == fields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n            else {\n                Office.context.document.getProjectFieldAsync(\n                    fields[index],\n                    function (result) {\n\n                        // If the call is successful, get the field value and then get the next field.\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceByIndexAsync(resourceIndex, options, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(1)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, options, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 リソース コレクションで指定したインデックスを持つリソースの GUID を取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: The index of the resource in the collection of resources for the project.
      type: number
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceByIndexAsync(resourceIndex, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(2)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 リソース コレクションで指定したインデックスを持つリソースの GUID を取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: The index of the resource in the collection of resources for the project.
      type: number
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource\n// collection, and then calls getResourceByIndexAsync to get the GUID for each resource.\n// The example assumes that your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceFieldAsync(resourceId, fieldId, options, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(1)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, options, callback)
  summary: プロジェクト ドキュメントのみ。 指定されたリソース ID のリソース フィールドを取得します。(Ex.ResourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: リソース ID の文字列または値。
      type: string
    - id: fieldId
      description: リソース フィールド。
      type: number
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceFieldAsync(resourceId, fieldId, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(2)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, callback)
  summary: プロジェクト ドキュメントのみ。 指定されたリソース ID のリソース フィールドを取得します。(Ex.ResourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: リソース ID の文字列または値。
      type: string
    - id: fieldId
      description: リソース フィールド。
      type: number
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource\n// that's currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(1)
  package: office!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: ドキュメントの現在の選択範囲に含まれるデータを読み取ります。
  remarks: "**要件セット**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (使用する場合) `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用する場合) `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (使用する場合) `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (使用する場合) `Office.CoercionType.Table`<!-- -->)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (使用する場合) `Office.CoercionType.Text`<!-- -->)\n\ngetSelectedDataAsync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して、次の情報を返します。\n\n<table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>取得するオブジェクトまたはデータがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>\n\n[Office.CoercionType](xref:office!Office.CoercionType:enum)パラメーターに指定できる値は、ホストによって異なります。\n\n<table> <tr> <th>Host</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Matrix` (配列の配列)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Table` (TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office OPEN XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example uses the getSelectedDataAsync method of the Document object to retrieve the\n// user's current selection as text, and then display it in the add-in's page.\n\n// Display the user's current selection.\nfunction showSelection() {\n    Office.context.document.getSelectedDataAsync(\n        \"text\",                        // coercionType\n        {valueFormat: \"unformatted\",   // valueFormat\n        filterType: \"all\"},            // filterType\n        function (result) {            // callback\n            var dataValue; \n            dataValue = result.value;\n            write('Selected data is: ' + dataValue);\n        });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To read the value of the current selection, you need to write a callback function that reads the selection.\n// The following example shows how to:\n// 1. Pass an anonymous callback function that reads the value of the current selection\n//    to the callback parameter of the getSelectedDataAsync method.\n// 2. Read the selection as text, unformatted, and not filtered.\n// 3. Display the value on the add-in's page.\nfunction getText() {\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n        { valueFormat: \"unformatted\", filterType: \"all\" },\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            } \n            else {\n                // Get selected data.\n                var dataValue = asyncResult.value; \n                write('Selected data is ' + dataValue);\n            }            \n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example gets the values of the selected cells. It uses the optional\n// asyncContext parameter to pass some text to the callback function.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getSelectedText);\n        });\n    };\n\n    // Get the text from the selected cells in the document, and display it in the add-in.\n    function getSelectedText() {\n        Office.context.document.getSelectedDataAsync(\n            Office.CoercionType.Text,\n            {asyncContext: 'Some related info'},\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'Selected text: {0}<br/>Passed info: {1}',\n                        result.value, result.asyncContext);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: 返されるデータ構造の種類です。 各ホストでサポートされている coercion の種類については、「備考」セクションを参照してください。
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: options
      description: 返されるデータと書式設定方法をカスタマイズするためのオプションを提供します。
      type: <xref uid="office!Office.GetSelectedDataOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、現在の選択範囲のデータです。 これは、coercionType パラメーターで指定したデータ構造または形式で返されます。 (データの強制型変換の詳細については、「注釈」を参照してください)。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(2)
  package: office!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: ドキュメントの現在の選択範囲に含まれるデータを読み取ります。
  remarks: >-
    **要件セット**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (使用する場合) `Office.CoercionType.Html`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用する場合) `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (使用する場合) `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (使用する場合) `Office.CoercionType.Table`<!-- -->)


    - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (使用する場合) `Office.CoercionType.Text`<!-- -->)


    getSelectedDataAsync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して、次の情報を返します。


    <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>取得するオブジェクトまたはデータがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>


    [Office.CoercionType](xref:office!Office.CoercionType:enum)パラメーターに指定できる値は、ホストによって異なります。


    <table> <tr> <th>Host</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Matrix` (配列の配列)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Table` (TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office OPEN XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: 返されるデータ構造の種類です。 各ホストでサポートされている coercion の種類については、「備考」セクションを参照してください。
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、現在の選択範囲のデータです。 これは、coercionType パラメーターで指定したデータ構造または形式で返されます。 (データの強制型変換の詳細については、「注釈」を参照してください)。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(options, callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(1)
  package: office!
  fullName: getSelectedResourceAsync(options, callback)
  summary: プロジェクト ドキュメントのみ。 現在選択されているリソースの ID を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(2)
  package: office!
  fullName: getSelectedResourceAsync(callback)
  summary: プロジェクト ドキュメントのみ。 現在選択されているリソースの ID を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's \n// currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page controls are\n// defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedTaskAsync(options, callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(1)
  package: office!
  fullName: getSelectedTaskAsync(options, callback)
  summary: プロジェクト ドキュメントのみ。 現在選択されているタスクの ID を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedTaskAsync(callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(2)
  package: office!
  fullName: getSelectedTaskAsync(callback)
  summary: プロジェクト ドキュメントのみ。 現在選択されているタスクの ID を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、文字列としてのリソースの GUID です。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets task properties by calling getTaskAsync.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedViewAsync(options, callback)
  uid: office!Office.Document#getSelectedViewAsync:member(1)
  package: office!
  fullName: getSelectedViewAsync(options, callback)
  summary: プロジェクト ドキュメントのみ。 現在選択されているビューの種類 (Ex. ガント) と [ビュー名] をクリックします。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、ProjectViewTypes 定数として、ビューの名前というプロパティ `viewName` が含まれます。 `viewType` - ProjectViewTypes 定数の整数値として、ビューの種類を指定します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedViewAsync(callback)
  uid: office!Office.Document#getSelectedViewAsync:member(2)
  package: office!
  fullName: getSelectedViewAsync(callback)
  summary: プロジェクト ドキュメントのみ。 現在選択されているビューの種類 (Ex. ガント) と [ビュー名] をクリックします。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、ProjectViewTypes 定数として、ビューの名前というプロパティ `viewName` が含まれます。 `viewType` - ProjectViewTypes 定数の整数値として、ビューの種類を指定します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls adds a ViewSelectionChanged event handler that\n// calls getSelectedViewAsync to get the name and type of the active view in the document.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the active view's name and type.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskAsync(taskId, options, callback)
  uid: office!Office.Document#getTaskAsync:member(1)
  package: office!
  fullName: getTaskAsync(taskId, options, callback)
  summary: プロジェクト ドキュメントのみ。 指定した taskId のタスクWSS、タスク ID、ResourceNames を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: タスク ID の文字列または値。
      type: string
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、次のプロパティが含まれます。 `taskName` - タスクの名前。 `wssTaskId` - 同期された SharePoint タスク リスト内のタスクの ID。 プロジェクトが SharePoint タスク リストと同期されていない場合、値は 0 です。 `resourceNames` - タスクに割り当てられているリソースの名前のコンマ区切りのリスト。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskAsync(taskId, callback)
  uid: office!Office.Document#getTaskAsync:member(2)
  package: office!
  fullName: getTaskAsync(taskId, callback)
  summary: プロジェクト ドキュメントのみ。 指定した taskId のタスクWSS、タスク ID、ResourceNames を取得します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: タスク ID の文字列または値。
      type: string
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、次のプロパティが含まれます。 `taskName` - タスクの名前。 `wssTaskId` - 同期された SharePoint タスク リスト内のタスクの ID。 プロジェクトが SharePoint タスク リストと同期されていない場合、値は 0 です。 `resourceNames` - タスクに割り当てられているリソースの名前のコンマ区切りのリスト。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the task GUID of the currently\n// selected task. Then it calls getTaskAsync to get the properties for the task that are\n// available from the JavaScript API for Office.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskByIndexAsync(taskIndex, options, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(1)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, options, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 タスク コレクションで指定したインデックスを持つタスクの GUID を取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: The index of the task in the collection of tasks for the project.
      type: number
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、タスクの GUID を文字列として指定します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskByIndexAsync(taskIndex, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(2)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 タスク コレクションで指定したインデックスを持つタスクの GUID を取得します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: The index of the task in the collection of tasks for the project.
      type: number
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは、タスクの GUID を文字列として指定します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the\n// maximum index in the project's task collection, and then\n// calls getTaskByIndexAsync to get the GUID for each task.\n// The example assumes that your add-in has a reference to the\n// jQuery library and that the following page controls are defined\n// in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskFieldAsync(taskId, fieldId, options, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(1)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, options, callback)
  summary: プロジェクト ドキュメントのみ。 指定されたタスク ID のタスク フィールドを取得します。(Ex. StartDate)。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: タスク ID の文字列または値。
      type: string
    - id: fieldId
      description: タスク フィールド。
      type: number
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、指定したフィールドの値を表す `fieldValue` プロパティが含まれる。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskFieldAsync(taskId, fieldId, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(2)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, callback)
  summary: プロジェクト ドキュメントのみ。 指定されたタスク ID のタスク フィールドを取得します。(Ex. StartDate)。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: タスク ID の文字列または値。
      type: string
    - id: fieldId
      description: タスク フィールド。
      type: number
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティには、指定したフィールドの値を表す `fieldValue` プロパティが含まれる。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected task.\n    function getTaskFields(taskGuid) {\n        var output = '';\n        var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];\n        var fieldValues = ['Priority: ', '% Complete: '];\n        var index = 0;\n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // Get the field value. If the call is successful, then get the next field.\n            else {\n                Office.context.document.getTaskFieldAsync(\n                    taskGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getWSSUrlAsync(options, callback)
  uid: office!Office.Document#getWSSUrlAsync:member(1)
  package: office!
  fullName: getWSSUrlAsync(options, callback)
  summary: プロジェクト ドキュメントのみ。 タスク リストWSS URL とリスト名を取得すると、MPP も同期されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果のプロパティには、同期された SharePoint タスク リストの名前というプロパティ `value` `listName` が含まれます。 `serverUrl` - 同期された SharePoint タスク リストの URL。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getWSSUrlAsync(callback)
  uid: office!Office.Document#getWSSUrlAsync:member(2)
  package: office!
  fullName: getWSSUrlAsync(callback)
  summary: プロジェクト ドキュメントのみ。 タスク リストWSS URL とリスト名を取得すると、MPP も同期されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果のプロパティには、同期された SharePoint タスク リストの名前というプロパティ `value` `listName` が含まれます。 `serverUrl` - 同期された SharePoint タスク リストの URL。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, options, callback)
  uid: office!Office.Document#goToByIdAsync:member(1)
  package: office!
  fullName: goToByIdAsync(id, goToType, options, callback)
  summary: ドキュメント内の指定されたオブジェクトまたは場所に移動します。
  remarks: >-
    **要件セット**: [セットに含めない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint では、マスター ビューの goToByIdAsync メソッドはサポートされていません。


    selectionMode オプションによって発生する動作は、ホストによって異なります。


    Excel では、 `Office.SelectionMode.Selected` バインドまたは名前付きアイテム内のすべてのコンテンツを選択します。 Office.SelectionMode.None では、テキスト バインドの場合は、セルを選択します。マトリックス バインド、テーブル バインド、および名前付きアイテムの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。


    PowerPoint: `Office.SelectionMode.Selected` スライドのタイトルまたはスライドの最初のテキスト ボックスを選択します。 `Office.SelectionMode.None` 何も選択しません。


    Word: バインド `Office.SelectionMode.Selected` 内のすべてのコンテンツを選択します。 Office.SelectionMode.None では、テキスト バインドの場合はテキストの最初までカーソルを移動します。マトリックス バインドとテーブル バインドの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: 移動先のオブジェクトまたは場所の識別子です。
      type: string | number
    - id: goToType
      description: 移動先の場所の型です。
      type: <xref uid="office!Office.GoToType:enum" />
    - id: options
      description: 移動する場所を選択するかどうかを指定するオプションを提供します。
      type: <xref uid="office!Office.GoToByIdOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは現在のビューです。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, callback)
  uid: office!Office.Document#goToByIdAsync:member(2)
  package: office!
  fullName: goToByIdAsync(id, goToType, callback)
  summary: ドキュメント内の指定されたオブジェクトまたは場所に移動します。
  remarks: >-
    **要件セット**: [セットに含めない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint では、マスター ビューの goToByIdAsync メソッドはサポートされていません。


    selectionMode オプションによって発生する動作は、ホストによって異なります。


    Excel では、 `Office.SelectionMode.Selected` バインドまたは名前付きアイテム内のすべてのコンテンツを選択します。 Office.SelectionMode.None では、テキスト バインドの場合は、セルを選択します。マトリックス バインド、テーブル バインド、および名前付きアイテムの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。


    PowerPoint: `Office.SelectionMode.Selected` スライドのタイトルまたはスライドの最初のテキスト ボックスを選択します。 `Office.SelectionMode.None` 何も選択しません。


    Word: バインド `Office.SelectionMode.Selected` 内のすべてのコンテンツを選択します。 Office.SelectionMode.None では、テキスト バインドの場合はテキストの最初までカーソルを移動します。マトリックス バインドとテーブル バインドの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。


    #### <a name="examples"></a>例


    ```javascript

    // Go to a binding by id (Word and Excel)

    // The following example shows how to:

    // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

    // 2. Specify that binding as the binding to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value on the add-in's page.

    function gotoBinding() {
        // Create a new table binding for the selected table.
        Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
        if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
              }
        });

        // Go to binding by id.
        Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to a table in a spreadsheet (Excel)

    // The following example shows how to:

    // 1. Specify a table by name as the table to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToTable() {
        Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to the currently selected slide by id (PowerPoint)

    // The following example shows how to:

    // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

    // 2. Specify the returned id as the slide to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value of the stringified JSON object returned by asyncResult.value,

    //    which contains information about the selected slides, on the add-in's page.

    var firstSlideId = 0;

    function gotoSelectedSlide() {
        //Get currently selected slide's id
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                firstSlideId = asyncResult.value.slides[0].id;
                app.showNotification(JSON.stringify(asyncResult.value));
            }
        });
        //Go to slide by id.
        Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                app.showNotification("Navigation successful");
            }
        });
    }


    // Go to slide by index (PowerPoint)

    // The following example shows how to:

    // 1. Specify the index of the first, last, previous, or next slide to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToSlideByIndex() {
        var goToFirst = Office.Index.First;
        var goToLast = Office.Index.Last;
        var goToPrevious = Office.Index.Previous;
        var goToNext = Office.Index.Next;

        Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: 移動先のオブジェクトまたは場所の識別子です。
      type: string | number
    - id: goToType
      description: 移動先の場所の型です。
      type: <xref uid="office!Office.GoToType:enum" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. 結果 `value` のプロパティは現在のビューです。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Document#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: 指定したイベントの種類のイベント ハンドラーを削除します。
  remarks: '**要件セット**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: イベントの種類。 ドキュメントの場合は、'Document.SelectionChanged' または 'Document.ActiveViewChanged' を指定できます。
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: 削除するイベント ハンドラーまたはハンドラーを決定するオプションを提供します。
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Document#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: 指定したイベントの種類のイベント ハンドラーを削除します。
  remarks: >-
    **要件セット**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    #### <a name="examples"></a>例


    ```javascript

    // The following example removes the event handler named 'MyHandler'.

    function removeSelectionChangedEventHandler() {
        Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
    }


    function MyHandler(eventArgs) {
        doSomethingWithDocument(eventArgs.document);
    }

    ```

    ```javascript

    // The following code example uses addHandlerAsync to add an event handler for the

    // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.

    // When a resource is selected in a resource view, the handler displays the

    // resource GUID. When the handler is removed, the GUID is not displayed.

    // The example assumes that your add-in has a reference to the jQuery library and

    // that the following page control is defined in the content div in the page body:

    // <input id="remove-handler" type="button" value="Remove handler" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                Office.context.document.addHandlerAsync(
                    Office.EventType.ResourceSelectionChanged,
                    getResourceGuid);
                $('#remove-handler').click(removeEventHandler);
            });
        };

        // Remove the event handler.
        function removeEventHandler() {
            Office.context.document.removeHandlerAsync(
                Office.EventType.ResourceSelectionChanged,
                {handler:getResourceGuid,
                asyncContext:'The handler is removed.'},
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#remove-handler').attr('disabled', 'disabled');
                        $('#message').html(result.asyncContext);
                    }
                }
            );
        }

        // Get the GUID of the currently selected resource and display it in the add-in.
        function getResourceGuid() {
            Office.context.document.getSelectedResourceAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#message').html('Resource GUID: ' + result.value);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: イベントの種類。 ドキュメントの場合は、'Document.SelectionChanged' または 'Document.ActiveViewChanged' を指定できます。
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(1)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 指定したリソース ID のリソース フィールドを設定します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: リソース ID の文字列または値。
      type: string
    - id: fieldId
      description: リソース フィールド。
      type: number
    - id: fieldValue
      description: ターゲット フィールドの値。
      type: string | number | boolean | object
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(2)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 指定したリソース ID のリソース フィールドを設定します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: リソース ID の文字列または値。
      type: string
    - id: fieldId
      description: リソース フィールド。
      type: number
    - id: fieldValue
      description: ターゲット フィールドの値。
      type: string | number | boolean | object
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's\n// currently selected in a resource view. Then it sets two resource field values by calling\n// setResourceFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync\n// method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource, and then get the resource fields.\n    function setResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                setResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected resource.\n    function setResourceFields(resourceGuid) {\n        var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];\n        var fieldValues = [.28, 'Notes for the resource.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setResourceFieldAsync(\n                resourceGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: setSelectedDataAsync(data, options, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(1)
  package: office!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: 指定したデータを現在の選択範囲に書き込みます。
  remarks: "**要件セット**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->、(使用する場合) `Office.CoercionType.Html`<!-- -->)\n\n- [ImageCoercion 1.1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (使用する場合 `Office.CoercionType.Image`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用する場合) `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (使用する場合) `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (使用する場合) `Office.CoercionType.Table`<!-- -->)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (使用する場合) `Office.CoercionType.Text`<!-- -->)\n\n- [ImageCoercion 1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (使用する場合 `Office.CoercionType.XmlSvg`<!-- -->)\n\n**アプリケーション固有の動作**\n\nデータを選択範囲に書き込む場合は、次のアプリケーション固有のアクションが適用されます。\n\n<table> <tr> <td>Word</td> <td>選択範囲がない場合にカーソルが有効な位置にある場合は、指定した位置が `data` 挿入ポイントに挿入されます。</td> <td>文字列 `data` の場合は、指定したテキストが挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>配列の配列 (\"matrix\") または TableData オブジェクトの場合は、新しい `data` Word テーブルが挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>HTML `data` の場合、指定した HTML が挿入されます。 (**重要**: 挿入する HTML が無効な場合、Word はエラーを発生さなかった。 Word は可能な限り多くの HTML を挿入し、無効なデータを省略します)。</td> </tr> <tr> <td></td> <td></td> <td>Open `data` XML をOffice指定すると、指定した XML が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>`data`base64 エンコードされたイメージ ストリームの場合、指定したイメージが挿入されます。</td> </tr> <tr> <td></td> <td>選択範囲がある場合</td> <td>これは、上記と同じルールに `data` 従って指定されたルールに置き換えられる。</td> </tr> <tr> <td></td> <td>イメージの挿入</td> <td>挿入された画像はインラインで配置されます。 imageLeft パラメーターと imageTop パラメーターは無視されます。 画像の縦横比は常に固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか 1 つのみが指定された場合、もう一方の値がスケーリングされて自動的に元の縦横比が維持されます。</td> </tr>\n\n<tr> <td>Excel</td> <td>1 つのセルが選択されている場合</td> <td>文字列 `data` の場合、指定したテキストが現在のセルの値として挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>配列の配列 (\"matrix\") の場合、周囲のセル内の他のデータが上書きされない場合、指定した行と列のセット `data` が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>TableData オブジェクトの場合、周囲のセル内の他のデータが上書きされない場合、指定した行とヘッダーのセットを持つ新しい Excel テーブル `data` が挿入されます。</td> </tr> <tr> <td></td> <td>複数のセルが選択されている場合</td> <td>If the shape does not match the shape of `data`<!-- -->、エラーが返されます。</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->の値に基づいて、選択したセルの値が更新されます。 `data`<!-- -->.</td> </tr> <tr> <td></td> <td>イメージの挿入</td> <td>挿入された画像は浮動になります。 位置パラメーターの imageLeft と imageTop は、現在選択されているセルからの相対位置になります。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がワークシート内に収まるようにするために Excel によって再調整される可能性があります。 画像の縦横比は、 imageWidth と imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> <tr> <td></td> <td>その他のすべてのケース</td> <td>エラーが返されます。</td> </tr>\n\n<tr> <td>Excel on the web</td> <td>上記の Excel の動作に加えて、これらの制限は、Web 上の Excel でデータを書き込む場合に適用されます。</td> <td>このメソッドの 1 回の呼び出しで、パラメーターを使用してワークシートに書き込み可能なセルの総数は `data` 20,000 を超えすることはできません。</td> </tr> <tr> <td></td> <td></td> <td>パラメーターに渡される書式設定グループの数は `cellFormat` 100 を超えすることはできません。 1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットから構成されます。</td> </tr>\n\n<tr> <td>PowerPoint</td> <td>イメージの挿入</td> <td>挿入された画像は浮動になります。 位置 imageLeft パラメーターと imageTop パラメーターは省略可能ですが、指定されている場合は、両方が存在する必要があります。 1 つの値しか指定されない場合、それは無視されます。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がスライドの外に配置される可能性があります。 オプションのパラメーターが指定されず、スライドにプレースホルダがある場合は、画像によってスライドのプレースホルダが置き換えられます。 画像の縦横比は、 imageWidth パラメーターと imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> </table>\n\n**Hosts**\n\n[Office.CoercionType](xref:office!Office.CoercionType:enum)パラメーターに指定できる値は、ホストによって異なります。\n\n<table> <tr> <th>Host</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Matrix` (配列の配列)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Table` (TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office OPEN XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example sets the selected text or cell to \"Hello World!\", \n// and if that fails, displays the value of the error.message property.\nfunction writeText() {\n    Office.context.document.setSelectedDataAsync(\"Hello World!\",\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write\n// to a selection. The following example writes data as an array of three rows of two columns, \n// specifying the coercionType as `Matrix` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeMatrix() {\n    Office.context.document.setSelectedDataAsync(\n        [[\"Red\", \"Rojo\"], [\"Green\", \"Verde\"], [\"Blue\", \"Azul\"]],\n        {coercionType: Office.CoercionType.Matrix}\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// The following example writes data as a one column table with a header and four rows, \n// specifying the coercionType as `Table` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeTable() {\n    // Build table.\n    var myTable = new Office.TableData();\n    myTable.headers = [[\"Cities\"]];\n    myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];\n\n    // Write table.\n    Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},\n        function (result) {\n            var error = result.error\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`\n// as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.context.document.setSelectedDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: Office.CoercionType.Html}, function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write('Error: ' + asyncResult.error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType\n// parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertPictureAtSelection(base64EncodedImageStr) {\n\n    Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {\n        coercionType: Office.CoercionType.Image,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 100,\n        imageHeight: 100\n    },\n    function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n    });\n}\n\n// In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the \n// coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertSvgAtSelection(base64EncodedImageStr) {\n    Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {\n        coercionType: Office.CoercionType.XmlSvg,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 400\n    },\n        function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n            }\n        });\n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        設定するデータ。 文字列または [Office.CoercionType](xref:office!Office.CoercionType:enum) 値、2d 配列、または TableData オブジェクトのいずれか。


        渡される値が次 `data` の場合:


        - 文字列: プレーン テキスト、または string に強制的に変換できるその他の値が挿入されます。 Excel では、データを有効な数式として指定して、その数式を選択したセルに追加することもできます。 例えば、data を "=SUM(A1:A5)" と設定すると、指定の範囲内の値が集計されます。 ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。 選択したセルで Document.getSelectedDataAsync メソッドを呼び出してそのデータを読み取ると、このメソッドは (数式の結果である) セルに表示されたデータのみを返します。


        - 配列の配列 ("matrix"): ヘッダーなしの表形式データが挿入されます。 たとえば、2 列の 3 行にデータを書き込むには \[ \[ 、"R1C1"、"R1C2" \] \[ 、"R2C1"、"R2C2" \] \[ 、"R3C1"、"R3C2" \] \] のような配列を渡します。 3 行の単一列を記述するには、次のような配列を渡します \[ \[ 。"R1C1" \] \[ 、"R2C1" \] \[ 、"R3C1"\]\]


        Excel では、選択したセルにデータを追加する有効な数式を含む配列の配列としてデータを指定することもできます。 たとえば、他のデータが上書きされない場合、データを \[ \[ "=SUM(A1:A5)"に設定すると、これらの 2 つの数式が選択範囲に追加 \] \] されます。 Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.


        - TableData オブジェクト: ヘッダー付きのテーブルが挿入されます。 Excel では、データ パラメーターに渡す TableData オブジェクトに数式を指定すると、Excel の "計算列" 機能が原因で、列内の数式が自動的に重複する結果が得されない場合があります。 数式を含む数式を選択したテーブルに書き込む場合は、(TableData オブジェクトではなく) 配列の配列としてデータを指定し `data` 、coercionType を Microsoft.Office.Matrix または "matrix" として指定してください。 ただし、この手法は、(1) 列のすべてのセルに書き込むか、(2) 列に少なくとも 2 つの異なる数式が既に存在する場合にのみ、"計算列" 機能をブロックします。
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: 選択範囲にデータを挿入する方法のオプションを提供します。
      type: <xref uid="office!Office.SetSelectedDataOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. AsyncResult.value プロパティは、取得するオブジェクトやデータが存在しないので、常に未定義を返します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(2)
  package: office!
  fullName: setSelectedDataAsync(data, callback)
  summary: 指定したデータを現在の選択範囲に書き込みます。
  remarks: >-
    **要件セット**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->、(使用する場合) `Office.CoercionType.Html`<!-- -->)


    - [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (使用する場合) `Office.CoercionType.Image`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用する場合) `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (使用する場合) `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (使用する場合) `Office.CoercionType.Table`<!-- -->)


    - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (使用する場合) `Office.CoercionType.Text`<!-- -->)


    - [ImageCoercion 1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (使用する場合 `Office.CoercionType.XmlSvg`<!-- -->)


    **アプリケーション固有の動作**


    データを選択範囲に書き込む場合は、次のアプリケーション固有のアクションが適用されます。


    <table> <tr> <td>Word</td> <td>選択範囲がない場合にカーソルが有効な位置にある場合は、指定した位置が `data` 挿入ポイントに挿入されます。</td> <td>文字列 `data` の場合は、指定したテキストが挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>配列の配列 ("matrix") または TableData オブジェクトの場合は、新しい `data` Word テーブルが挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>HTML `data` の場合、指定した HTML が挿入されます。 (**重要**: 挿入する HTML が無効な場合、Word はエラーを発生さなかった。 Word は可能な限り多くの HTML を挿入し、無効なデータを省略します)。</td> </tr> <tr> <td></td> <td></td> <td>Open `data` XML をOffice指定すると、指定した XML が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>`data`base64 エンコードされたイメージ ストリームの場合、指定したイメージが挿入されます。</td></tr></td> </tr> <tr> <td></td> <td>選択範囲がある場合</td> <td>これは、上記と同じルールに `data` 従って指定されたルールに置き換えられる。</td> </tr> <tr> <td></td> <td>イメージの挿入</td> <td>挿入された画像はインラインで配置されます。 imageLeft パラメーターと imageTop パラメーターは無視されます。 画像の縦横比は常に固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか 1 つのみが指定された場合、もう一方の値がスケーリングされて自動的に元の縦横比が維持されます。</td> </tr>


    <tr> <td>Excel</td> <td>1 つのセルが選択されている場合</td> <td>文字列 `data` の場合、指定したテキストが現在のセルの値として挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>配列の配列 ("matrix") の場合、周囲のセル内の他のデータが上書きされない場合、指定した行と列のセット `data` が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>TableData オブジェクトの場合、周囲のセル内の他のデータが上書きされない場合、指定した行とヘッダーのセットを持つ新しい Excel テーブル `data` が挿入されます。</td> </tr> <tr> <td></td> <td>複数のセルが選択されている場合</td><td>If the shape does not match the shape of `data`<!-- -->、エラーが返されます。</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->の値に基づいて、選択したセルの値が更新されます。 `data`<!-- -->.</td> </tr> <tr> <td></td> <td>イメージの挿入</td> <td>挿入された画像は浮動になります。 位置パラメーターの imageLeft と imageTop は、現在選択されているセルからの相対位置になります。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がワークシート内に収まるようにするために Excel によって再調整される可能性があります。 画像の縦横比は、 imageWidth と imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> <tr> <td></td> <td>その他のすべてのケース</td> <td>エラーが返されます。</td> </tr>


    <tr> <td>Excel on the web</td> <td>上記の Excel の動作に加えて、これらの制限は、Web 上の Excel でデータを書き込む場合に適用されます。</td> <td>このメソッドの 1 回の呼び出しで、パラメーターを使用してワークシートに書き込み可能なセルの総数は `data` 20,000 を超えすることはできません。</td> </tr> <tr> <td></td> <td></td> <td>パラメーターに渡される書式設定グループの数は `cellFormat` 100 を超えすることはできません。 1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットから構成されます。</td> </tr>


    <tr> <td>PowerPoint</td> <td>イメージの挿入</td> <td>挿入された画像は浮動になります。 位置 imageLeft パラメーターと imageTop パラメーターは省略可能ですが、指定されている場合は、両方が存在する必要があります。 1 つの値しか指定されない場合、それは無視されます。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がスライドの外に配置される可能性があります。 オプションのパラメーターが指定されず、スライドにプレースホルダがある場合は、画像によってスライドのプレースホルダが置き換えられます。 画像の縦横比は、 imageWidth パラメーターと imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> </table>


    **Hosts**


    [Office.CoercionType](xref:office!Office.CoercionType:enum)パラメーターに指定できる値は、ホストによって異なります。


    <table> <tr> <th>Host</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Matrix` (配列の配列)</td> </tr> <tr> <td>Excel と Word</td> <td>`Office.CoercionType.Table` (TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office OPEN XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        設定するデータ。 文字列または [Office.CoercionType](xref:office!Office.CoercionType:enum) 値、2d 配列、または TableData オブジェクトのいずれか。


        渡される値が次 `data` の場合:


        - 文字列: プレーン テキスト、または string に強制的に変換できるその他の値が挿入されます。 Excel では、データを有効な数式として指定して、その数式を選択したセルに追加することもできます。 例えば、data を "=SUM(A1:A5)" と設定すると、指定の範囲内の値が集計されます。 ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。 選択したセルで Document.getSelectedDataAsync メソッドを呼び出してそのデータを読み取ると、このメソッドは (数式の結果である) セルに表示されたデータのみを返します。


        - 配列の配列 ("matrix"): ヘッダーなしの表形式データが挿入されます。 たとえば、2 列の 3 行にデータを書き込むには \[ \[ 、"R1C1"、"R1C2" \] \[ 、"R2C1"、"R2C2" \] \[ 、"R3C1"、"R3C2" \] \] のような配列を渡します。 3 行の単一列を記述するには、次のような配列を渡します \[ \[ 。"R1C1" \] \[ 、"R2C1" \] \[ 、"R3C1"\]\]


        Excel では、選択したセルにデータを追加する有効な数式を含む配列の配列としてデータを指定することもできます。 たとえば、他のデータが上書きされない場合、データを \[ \[ "=SUM(A1:A5)"に設定すると、これらの 2 つの数式が選択範囲に追加 \] \] されます。 Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.


        - TableData オブジェクト: ヘッダー付きのテーブルが挿入されます。 Excel では、データ パラメーターに渡す TableData オブジェクトに数式を指定すると、Excel の "計算列" 機能が原因で、列内の数式が自動的に重複する結果が得されない場合があります。 数式を含む数式を選択したテーブルに書き込む場合は、(TableData オブジェクトではなく) 配列の配列としてデータを指定し `data` 、coercionType を Microsoft.Office.Matrix または "matrix" として指定してください。 ただし、この手法は、(1) 列のすべてのセルに書き込むか、(2) 列に少なくとも 2 つの異なる数式が既に存在する場合にのみ、"計算列" 機能をブロックします。
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->. AsyncResult.value プロパティは、取得するオブジェクトやデータが存在しないので、常に未定義を返します。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(1)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 指定したタスク ID のタスク フィールドを設定します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: タスク ID の文字列または値。
      type: string
    - id: fieldId
      description: タスク フィールド。
      type: number
    - id: fieldValue
      description: ターゲット フィールドの値。
      type: string | number | boolean | object
    - id: options
      description: コールバックで使用するために、任意の種類のコンテキスト データを変更されずに保持するためのオプションを提供します。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(2)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  summary: >-
    プロジェクト ドキュメントのみ。 指定したタスク ID のタスク フィールドを設定します。


    **重要**: この API は、Windows デスクトップ上の Project 2016 でのみ動作します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: タスク ID の文字列または値。
      type: string
    - id: fieldId
      description: タスク フィールド。
      type: number
    - id: fieldValue
      description: ターゲット フィールドの値。
      type: string | number | boolean | object
    - id: callback
      description: 省略可能。 コールバックが返された場合に呼び出される関数で、パラメーターは [Office.AsyncResult 型のみです。](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's\n// currently selected in a task view. Then it sets two task field values by calling\n// setTaskFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the\n// addHandlerAsync method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function setTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                setTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected task.\n    function setTaskFields(taskGuid) {\n        var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];\n        var fieldValues = [true, 'Notes for the task.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setTaskFieldAsync(\n                taskGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
metadata:
  ms.openlocfilehash: 03b1040947c78b5ca754d75ae2fd5c77162138db
  ms.sourcegitcommit: fe39bc3f2ccca2834584e2aa7eb14ce6beb0b638
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 03/17/2021
  ms.locfileid: "50837459"
