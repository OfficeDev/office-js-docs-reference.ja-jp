### YamlMime:UniversalReference
items:
  - uid: 'office!Office.File:interface'
    summary: Office アドインに関連付けられているドキュメント ファイルを表します。
    remarks: GetFileAsync メソッドに渡されたコールバック関数で、AsyncResult プロパティを使用して File オブジェクトにアクセスします。
    name: Office.File
    fullName: Office.File
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.File#closeAsync:member(1)'
      - 'office!Office.File#getSliceAsync:member(1)'
      - 'office!Office.File#size:member'
      - 'office!Office.File#sliceCount:member'
  - uid: 'office!Office.File#closeAsync:member(1)'
    summary: ドキュメント ファイルを閉じます。
    remarks: |-
      **要件セット**: [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      2 つ以上のドキュメントがメモリに存在する場合、Document.getFileAsync 操作は失敗します。 ファイルを使い終わったら、File.closeAsync メソッドを使用してファイルを閉じてください。

      closeAsync メソッドに渡されるコールバック関数で、AsyncResult オブジェクトのプロパティを使用して次の情報を返すことができます。

      <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>取得するオブジェクトまたはデータがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>
    name: closeAsync(callback)
    fullName: closeAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'closeAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->.'
          type:
            - 'office!Office.File#closeAsync~0:complex'
  - uid: 'office!Office.File#getSliceAsync:member(1)'
    summary: 指定したスライスを返します。
    remarks: |-
      **要件セット**: [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      getSliceAsync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して次の情報を返すことができます。

      <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>Slice オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>

      #### <a name="examples"></a>例

      ```typescript
      // This sample shows how to get all the slices of a file. 
      // The asynchronous operation returns a Promise so it can be awaited.
      private getAllSlices(file: any): Promise<any> {
          var self = this;
          var isError = false;

          return new Promise(async (resolve, reject) => {
              var documentFileData = [];
              for (var sliceIndex = 0; (sliceIndex < file.sliceCount) && !isError; sliceIndex++) {
                  var sliceReadPromise = new Promise((sliceResolve, sliceReject) => {
                      file.getSliceAsync(sliceIndex, (asyncResult) => {
                          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                              documentFileData = documentFileData.concat(asyncResult.value.data);
                              sliceResolve({
                                  IsSuccess: true,
                                  Data: documentFileData
                              });
                          } else {
                              file.closeAsync();
                              sliceReject({
                                  IsSuccess: false,
                                  ErrorMessage: `Error in reading the slice: ${sliceIndex} of the document`
                              });
                          }
                      });
                  });
                  await sliceReadPromise.catch((error) => {
                      isError = true;
                  });
              }

              if (isError || !documentFileData.length) {
                  reject('Error while reading document. Please try it again.');
                  return;
              }

              file.closeAsync();

              resolve({
                  IsSuccess: true,
                  Data: documentFileData
              });
          });
      }
      ```
    name: 'getSliceAsync(sliceIndex, callback)'
    fullName: 'getSliceAsync(sliceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSliceAsync(sliceIndex: number, callback?: (result: AsyncResult<Office.Slice>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sliceIndex
          description: Specifies the zero-based index of the slice to be retrieved. Required.
          type:
            - number
        - id: callback
          description: '省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office!Office.AsyncResult:interface)である。<!-- -->. `value`Result のプロパティは、Office の[Slice](xref:office!Office.Slice:interface)オブジェクトです。'
          type:
            - 'office!Office.File#getSliceAsync~0:complex'
  - uid: 'office!Office.File#size:member'
    summary: ドキュメントのファイル サイズをバイト単位で取得します。
    name: size
    fullName: size
    langs:
      - typeScript
    type: property
    syntax:
      content: 'size: number;'
      return:
        type:
          - number
  - uid: 'office!Office.File#sliceCount:member'
    summary: ファイルが分割されるスライス数を取得します。
    name: sliceCount
    fullName: sliceCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'sliceCount: number;'
      return:
        type:
          - number
references:
  - uid: 'office!Office.File#closeAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.File#getSliceAsync~0:complex'
    name: '(result: AsyncResult<Office.Slice>) => void'
    fullName: '(result: Office.AsyncResult<Office.Slice>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.Slice:interface'
        name: Office.Slice
        fullName: Office.Slice
      - name: '>) => void'
        fullName: '>) => void'