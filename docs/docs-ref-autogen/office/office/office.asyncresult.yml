### YamlMime:UniversalReference
items:
  - uid: 'office!Office.AsyncResult:interface'
    summary: |-
      要求が失敗した場合の状態やエラー情報など、非同期要求の結果をカプセル化するオブジェクト。

      "Async" メソッドの`callback`パラメーターに渡す関数が実行されると、AsyncResult オブジェクトを受け取ります。このオブジェクトには、 `callback`関数の唯一のパラメーターからアクセスできます。
    name: Office.AsyncResult
    fullName: Office.AsyncResult
    langs:
      - typeScript
    type: interface
    syntax:
      typeParameters:
        - id: T
    package: office!
    remarks: |-


      #### <a name="examples"></a>例

      ```javascript
      // The following is an example applicable to content and task pane add-ins.
      // The example shows a call to the getSelectedDataAsync method of the Document object.
      Office.context.document.getSelectedDataAsync("text", {
              valueFormat: "unformatted",
              filterType: "all"
          },
          function (result) {
              if (result.status === Office.AsyncResultStatus.Succeeded) {
                  var dataValue = result.value; // Get selected data.
                  console.log('Selected data is ' + dataValue);
              } else {
                  var err = result.error;
                  console.log(err.name + ": " + err.message);
              }
          });
      // The anonymous function passed as the callback argument ( function (result){...}) has a single 
      // parameter named result that provides access to an AsyncResult object when the function executes.
      // When the call to the getSelectedDataAsync method completes, the callback function executes, 
      // and the following line of code accesses the value property of the AsyncResult object to 
      // return the data selected in the document:
      var dataValue = result.value;
      // Note that other lines of code in the function use the result parameter of the callback function 
      // to access the status and error properties of the AsyncResult object.
      ```
    children:
      - 'office!Office.AsyncResult#asyncContext:member'
      - 'office!Office.AsyncResult#diagnostics:member'
      - 'office!Office.AsyncResult#error:member'
      - 'office!Office.AsyncResult#status:member'
      - 'office!Office.AsyncResult#value:member'
  - uid: 'office!Office.AsyncResult#asyncContext:member'
    summary: 呼び出されたメソッドの省略可能`asyncContext`なパラメーターに渡されたユーザー定義アイテムを、渡されたときと同じ状態で取得します。 これにより、ユーザー定義のアイテムが返されます。これは、呼び出されたメソッドの省略可能`asyncContext`なパラメーターに渡される任意の種類の JavaScript の型 (String、Number、Boolean、Object、Array、Null、または Undefined) を返します。 asyncContext パラメーターに値を渡していない場合は、 Undefined が戻されます。
    name: asyncContext
    fullName: asyncContext
    langs:
      - typeScript
    type: property
    syntax:
      content: 'asyncContext: any;'
      return:
        type:
          - any
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          function getDataWithContext() {
              var format = "Your data: ";
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text, 
                  { asyncContext: format }, 
                  showDataWithContext);
          }

          function showDataWithContext(asyncResult) {
              write(asyncResult.asyncContext + asyncResult.value);
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.AsyncResult#diagnostics:member'
    summary: '[エラー](xref:office!Office.Error:interface)が発生した場合に追加情報を提供する可能性があるオブジェクトを取得します。'
    remarks: |-
      これらのサポートされている Api で次のエラーが発生した場合、このプロパティは追加情報を返します。

      *サポートされる Api*

      `Office.context.mailbox.item.getCallbackTokenAsync`<!-- -->, `Office.context.mailbox.item.getUserIdentityTokenAsync`

      *サポートされるエラー* <table> <tr><th>`AsyncResult.error.name` </th><th>`AsyncResult.error.message` </th><th>返される診断オブジェクトの説明 </th></tr> <tr><td><strong>HTTPRequestFailure</strong> </td><td>要求が失敗しました。 HTTP エラーコードの diagnostics オブジェクトを参照してください。 </td><td>JSON オブジェクトの HTTP エラーコード例:`{"HTTPCode":"401"}` </td></tr> <tr><td><strong>InternalServerError</strong></td><td>Exchange サーバーがエラーを返しました。 詳細については、diagnostics オブジェクトを参照してください。</td><td>JSON オブジェクト内の Exchange サーバーからのエラーメッセージ例:`{"ErrorText": "The mailbox database is temporarily unavailable"}`</td></tr> </table>
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: any;'
      return:
        type:
          - any
  - uid: 'office!Office.AsyncResult#error:member'
    summary: 'エラーが発生した場合は、エラーの説明を提供する[Office の error](xref:office!Office.Error:interface)オブジェクトを取得します。'
    name: error
    fullName: error
    langs:
      - typeScript
    type: property
    syntax:
      content: 'error: Office.Error;'
      return:
        type:
          - 'office!Office.Error:interface'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          function getData() {
              Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write(asyncResult.error.message);
                  }
                  else {
                      write(asyncResult.value);
                  }
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.AsyncResult#status:member'
    summary: '非同期操作の[AsyncResultStatus](xref:office!Office.AsyncResultStatus:enum)を取得します。'
    name: status
    fullName: status
    langs:
      - typeScript
    type: property
    syntax:
      content: 'status: AsyncResultStatus;'
      return:
        type:
          - 'office!Office.AsyncResultStatus:enum'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          function getData() {
              Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write(asyncResult.error.message);
                  }
                  else {
                      write(asyncResult.value);
                  }
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.AsyncResult#value:member'
    summary: この非同期操作のペイロードまたはコンテンツを取得します (ある場合)。
    remarks: |-
      "Async" メソッドの callback パラメーターに引数として渡される関数で、AsyncResult オブジェクトにアクセスします。たとえば、 `getSelectedDataAsync` Document `setSelectedDataAsync`オブジェクトのメソッド[](xref:office!Office.Document:interface)やメソッドなどです。

      **注**: 特定の "Async" メソッドに対して value プロパティが返す内容は、そのメソッドの目的とコンテキストによって異なります。 To determine what is returned by the value property for an "Async" method, refer to the "Callback value" section of the method's topic.

      #### <a name="examples"></a>例

      ```javascript
      function getData() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
              if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                  write(asyncResult.error.message);
              }
              else {
                  write(asyncResult.value);
              }
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: value
    fullName: value
    langs:
      - typeScript
    type: property
    syntax:
      content: 'value: T;'
      return:
        type:
          - T
references:
  - uid: 'office!Office.Error:interface'
    name: Office.Error
  - uid: 'office!Office.AsyncResultStatus:enum'
    name: AsyncResultStatus