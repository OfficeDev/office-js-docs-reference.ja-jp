### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Source
    summary: <span data-ttu-id="b3a51-101">アドインイベントのソースデータをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="b3a51-101">Encapsulates source data for add-in events.</span></span>
    name: Office.AddinCommands.Source
    fullName: Office.AddinCommands.Source
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Source.id
  - uid: office.Office.AddinCommands.Source.id
    summary: <span data-ttu-id="b3a51-102">この関数の呼び出しをトリガーしたコントロールの ID。</span><span class="sxs-lookup"><span data-stu-id="b3a51-102">The id of the control that triggered calling this function.</span></span> <span data-ttu-id="b3a51-103">Id はマニフェストからのもので、Office アドインの一意の ID である GUID として取得されます。</span><span class="sxs-lookup"><span data-stu-id="b3a51-103">The id comes from the manifest and is the unique ID of your Office Add-in as a GUID.</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b3a51-104">例</span><span class="sxs-lookup"><span data-stu-id="b3a51-104">Examples</span></span>

          ```javascript
          // In this example, consider a button defined in an add-in manifest as follows:
          //<Control xsi:type="Button" id="eventTestButton">
          //    <Label resid="eventButtonLabel" />
          //    <Tooltip resid="eventButtonTooltip" />
          //    <Supertip>
          //        <Title resid="eventSuperTipTitle" />
          //        <Description resid="eventSuperTipDescription" />
          //    </Supertip>
          //    <Icon>
          //        <bt:Image size="16" resid="blue-icon-16" />
          //        <bt:Image size="32" resid="blue-icon-32" />
          //        <bt:Image size="80" resid="blue-icon-80" />
          //    </Icon>
          //    <Action xsi:type="ExecuteFunction">
          //        <FunctionName>testEventObject</FunctionName>
          //    </Action>
          //</Control>

          // The button has an id attribute set to eventTestButton, and will invoke
          // the testEventObject function defined in the add-in.
          // That function looks like this:
          function testEventObject(event) {
              // The event object implements the Event interface.

              // This value will be "eventTestButton".
              var buttonId = event.source.id;

              // Signal to the host app that processing is complete.
              event.completed();
          }
          ```
          ```javascript
          // Function is used by two buttons:
          // button1 and button2
          function multiButton (event) {
              // Check which button was clicked.
              var buttonId = event.source.id;

              if (buttonId === 'button1') {
                  doButton1Action();
              } else {
                  doButton2Action();
              }

              event.completed();
          }
          ```