### YamlMime:UniversalReference
items:
  - uid: 'office!OfficeExtension.Error:class'
    summary: で返される error オブジェクト`context.sync()`<!-- -->要求の処理中にエラーが発生したため、promise が拒否された場合。
    name: OfficeExtension.Error
    fullName: OfficeExtension.Error
    langs:
      - typeScript
    type: class
    package: office!
    remarks: |-


      #### <a name="examples"></a>例

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the document body.
          var body = context.document.body;

          // Queue a command to insert text in to the beginning of the body.
          // This will cause an OfficeExtension.Error.
          body.insertText(0);

          // Synchronize the document state by executing the queued-up commands,
          // and return a promise to indicate task completion.
          return context.sync();
      })
      .catch(function (error) {
          if (error instanceof OfficeExtension.Error) {
              console.log('Error code and message: ' + error.toString());
          }
      });
      ```
    children:
      - 'office!OfficeExtension.Error#code:member'
      - 'office!OfficeExtension.Error#debugInfo:member'
      - 'office!OfficeExtension.Error#innerError:member'
      - 'office!OfficeExtension.Error#message:member'
      - 'office!OfficeExtension.Error#name:member'
      - 'office!OfficeExtension.Error#stack:member'
      - 'office!OfficeExtension.Error#traceMessages:member'
  - uid: 'office!OfficeExtension.Error#code:member'
    summary: エラーコード文字列 ("InvalidArgument" など)。
    name: code
    fullName: code
    langs:
      - typeScript
    type: property
    syntax:
      content: 'code: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#debugInfo:member'
    summary: デバッグ情報 (エラーの詳細なログ記録に役立ちます。つまり、から)`JSON.stringify(...)`<!-- -->).
    name: debugInfo
    fullName: debugInfo
    langs:
      - typeScript
    type: property
    syntax:
      content: 'debugInfo: DebugInfo;'
      return:
        type:
          - 'office!OfficeExtension.DebugInfo:interface'
  - uid: 'office!OfficeExtension.Error#innerError:member'
    summary: 内部エラー (該当する場合)。
    name: innerError
    fullName: innerError
    langs:
      - typeScript
    type: property
    syntax:
      content: 'innerError: Error;'
      return:
        type:
          - 'office!OfficeExtension.Error:class'
  - uid: 'office!OfficeExtension.Error#message:member'
    summary: ホスト Office アプリケーションから渡されたエラーメッセージ。
    name: message
    fullName: message
    langs:
      - typeScript
    type: property
    syntax:
      content: 'message: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#name:member'
    summary: 'エラー名: "Officeextension.error"。'
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#stack:member'
    summary: スタックトレース (該当する場合)。
    name: stack
    fullName: stack
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stack: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#traceMessages:member'
    summary: 呼び出し前に呼び出しによって追加されたメッセージをトレースする (存在する場合) `context.trace()``context.sync()`<!-- -->. エラーが発生した場合は、エラーが発生する前に実行されたすべてのトレースメッセージがこれに含まれます。 これらのメッセージは、プログラムの実行シーケンスを監視し、エラーのケースを検出するのに役立ちます。
    name: traceMessages
    fullName: traceMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'traceMessages: string[];'
      return:
        type:
          - 'string[]'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following example shows how you can instrument a batch of commands
          // to determine where an error occurred. The first batch successfully
          // inserts the first two paragraphs into the document and cause no errors.
          // The second batch successfully inserts the third and fourth paragraphs
          // but fails in the call to insert the fifth paragraph. All other commands
          // after the failed command in the batch are not executed, including the
          // command that adds the fifth trace message. In this case, the error
          // occurred after the fourth paragraph was inserted, and before adding the
          // fifth trace message.

          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              // Start a batch of commands.
              body.insertParagraph('1st paragraph', Word.InsertLocation.end);
              // Queue a command for instrumenting this part of the batch.
              context.trace('1st paragraph successful');

              body.insertParagraph('2nd paragraph', Word.InsertLocation.end);
              context.trace('2nd paragraph successful');

              // Synchronize the document state by executing the queued-up commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Queue a command to insert the paragraph at the end of the document body.
                  // Start a new batch of commands.
                  body.insertParagraph('3rd paragraph', Word.InsertLocation.end);
                  context.trace('3rd paragraph successful');

                  body.insertParagraph('4th paragraph', Word.InsertLocation.end);
                  context.trace('4th paragraph successful');

                  // This command will cause an error. The trace messages in the queue up to
                  // this point will be available via Error.traceMessages.
                  body.insertParagraph(0, '5th paragraph', Word.InsertLocation.end);
                  // Queue a command for instrumenting this part of the batch.
                  // This trace message will not be set on Error.traceMessages.
                  context.trace('5th paragraph successful');
              }).then(context.sync);
          })
          .catch(function (error) {
              if (error instanceof OfficeExtension.Error) {
                  console.log('Trace messages: ' + error.traceMessages);
              }
          });

          // Output: "Trace messages: 3rd paragraph successful,4th paragraph successful"
          ```
references:
  - uid: 'office!OfficeExtension.DebugInfo:interface'
    name: DebugInfo
  - uid: 'office!OfficeExtension.Error:class'
    name: Error