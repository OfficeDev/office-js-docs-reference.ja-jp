### YamlMime:TSType
name: OfficeExtension.LoadOption
uid: office!OfficeExtension.LoadOption:interface
package: office!
fullName: OfficeExtension.LoadOption
summary: 読み込む必要のあるオブジェクトのプロパティを指定します。 この負荷は sync () メソッドが実行されたときに発生します。 これにより、Office オブジェクトと、それに対応する JavaScript プロキシオブジェクトとの間で状態が同期されます。
remarks: >-
  Word では、プロパティとページング情報を指定する方法として、文字列リテラルを使用することをお勧めします。 最初の 2 つの例は、段落コレクションの段落のテキストおよびフォント サイズのプロパティを要求するための推奨される方法を示しています。


  `context.load(paragraphs, 'text, font/size');`


  `paragraphs.load('text, font/size');`


  次に、オブジェクト表記 (ページングを含む) を使用する、類似の例を示します。


  `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


  `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


  select ステートメントのフォント オブジェクトで特定のプロパティを指定しない場合、すべてのフォント プロパティが読み込まれることを expand ステートメントが単独で示します。


  #### <a name="examples"></a>例


  ```javascript

  // This example shows how to get the paragraphs in the Word document

  // along with their text and font size properties.


  // Run a batch operation against the Word object model.

  Word.run(function (context) {
      // Create a proxy object for the paragraphs collection.
      var paragraphs = context.document.body.paragraphs;

      // Queue a commmand to load the text and font properties.
      // It is best practice to always specify the property set.
      // Otherwise, all properties are returned on the object.
      context.load(paragraphs, 'text, font/size');

      // Synchronize the document state by executing the queued commands,
      // and return a promise to indicate task completion.
      return context.sync().then(function () {
          // Insert code that works with the paragraphs loaded by context.load().
      })
  })

  .catch(function (error) {
      console.log('Error: ' + JSON.stringify(error));
      if (error instanceof OfficeExtension.Error) {
          console.log('Debug info: ' + JSON.stringify(error.debugInfo));
      }
  });

  ```
isPreview: false
isDeprecated: false
type: interface
properties:
- name: expand
  uid: office!OfficeExtension.LoadOption#expand:member
  package: office!
  fullName: expand
  summary: 読み込むナビゲーションプロパティを指定する、コンマで区切られた文字列または文字列の配列。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'expand?: string | string[];'
    return:
      type: string | string[]
- name: select
  uid: office!OfficeExtension.LoadOption#select:member
  package: office!
  fullName: select
  summary: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select?: string | string[];'
    return:
      type: string | string[]
- name: skip
  uid: office!OfficeExtension.LoadOption#skip:member
  package: office!
  fullName: skip
  summary: コレクション型でのみ使用できます。 コレクション内でスキップされ、結果に含まれていないアイテムの数を指定します。 Top が指定されている場合、指定された数のアイテムをスキップした後、結果セットが開始されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'skip?: number;'
    return:
      type: number
- name: top
  uid: office!OfficeExtension.LoadOption#top:member
  package: office!
  fullName: top
  summary: コレクション型でのみ使用できます。 結果に含めることができるコレクション項目の最大数を指定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'top?: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
metadata:
  ms.openlocfilehash: 293c68d45ae2d6fb3d4e8d8e2bdb9db0641b769e
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49136821"
