### YamlMime:UniversalReference
items:
  - uid: office.Office.Document
    summary: アドインから対話操作するドキュメントを表す抽象クラス。
    remarks: '**Hosts**: Access、Excel、PowerPoint、Project、Word'
    name: Office.Document
    fullName: Office.Document
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Document.addHandlerAsync
      - office.Office.Document.addHandlerAsync_1
      - office.Office.Document.getActiveViewAsync
      - office.Office.Document.getActiveViewAsync_1
      - office.Office.Document.getFileAsync
      - office.Office.Document.getFileAsync_1
      - office.Office.Document.getFilePropertiesAsync
      - office.Office.Document.getFilePropertiesAsync_1
      - office.Office.Document.getMaxResourceIndexAsync
      - office.Office.Document.getMaxResourceIndexAsync_1
      - office.Office.Document.getMaxTaskIndexAsync
      - office.Office.Document.getMaxTaskIndexAsync_1
      - office.Office.Document.getProjectFieldAsync
      - office.Office.Document.getProjectFieldAsync_1
      - office.Office.Document.getResourceByIndexAsync
      - office.Office.Document.getResourceByIndexAsync_1
      - office.Office.Document.getResourceFieldAsync
      - office.Office.Document.getResourceFieldAsync_1
      - office.Office.Document.getSelectedDataAsync
      - office.Office.Document.getSelectedDataAsync_1
      - office.Office.Document.getSelectedResourceAsync
      - office.Office.Document.getSelectedResourceAsync_1
      - office.Office.Document.getSelectedTaskAsync
      - office.Office.Document.getSelectedTaskAsync_1
      - office.Office.Document.getSelectedViewAsync
      - office.Office.Document.getSelectedViewAsync_1
      - office.Office.Document.getTaskAsync
      - office.Office.Document.getTaskAsync_1
      - office.Office.Document.getTaskByIndexAsync
      - office.Office.Document.getTaskByIndexAsync_1
      - office.Office.Document.getTaskFieldAsync
      - office.Office.Document.getTaskFieldAsync_1
      - office.Office.Document.getWSSUrlAsync
      - office.Office.Document.getWSSUrlAsync_1
      - office.Office.Document.goToByIdAsync
      - office.Office.Document.goToByIdAsync_1
      - office.Office.Document.removeHandlerAsync
      - office.Office.Document.removeHandlerAsync_1
      - office.Office.Document.setResourceFieldAsync
      - office.Office.Document.setResourceFieldAsync_1
      - office.Office.Document.setSelectedDataAsync
      - office.Office.Document.setSelectedDataAsync_1
      - office.Office.Document.setTaskFieldAsync
      - office.Office.Document.setTaskFieldAsync_1
      - office.Office.Document.bindings
      - office.Office.Document.customXmlParts
      - office.Office.Document.mode
      - office.Office.Document.settings
      - office.Office.Document.url
  - uid: office.Office.Document.addHandlerAsync
    summary: Document オブジェクトイベントのイベントハンドラーを追加します。
    remarks: |-
      **要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      各イベントハンドラー関数の名前が一意である限り、指定された eventType に対して複数のイベントハンドラーを追加できます。
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Document オブジェクトイベントの場合、eventType パラメーターは、またはと`Office.EventType.Document.SelectionChanged`して指定できます。`Office.EventType.Document.ActiveViewChanged`<!-- -->、またはこの列挙の対応するテキスト値を指定します。
          type:
            - Office.EventType
        - id: handler
          description: '追加するイベントハンドラー関数。これは、唯一のパラメーターが DocumentSelectionChangedEventArgs 型であることを示し[ます。](xref:office.Office.DocumentSelectionChangedEventArgs)<!-- -->. 必須。'
          type:
            - any
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.addHandlerAsync_1
    summary: Document オブジェクトイベントのイベントハンドラーを追加します。
    remarks: |-
      **要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      各イベントハンドラー関数の名前が一意である限り、指定された eventType に対して複数のイベントハンドラーを追加できます。

      #### <a name="examples"></a>例

      ```javascript
      // The following example adds an event handler for the SelectionChanged event of a document
      function addSelectionChangedEventHandler() {
          Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithDocument(eventArgs.document);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example adds a handler for the ResourceSelectionChanged event.
      // When the resource selection changes in the document, it gets the GUID of the selected resource.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
              });
          };

          // Get the GUID of the selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ResourceSelectionChanged
      // event handler in a Project add-in, see "Create your first task pane add-in
      // for Project 2013 by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example adds a handler for the TaskSelectionChanged event.
      // When the task selection changes in the document, it gets the GUID of the
      // selected task.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.TaskSelectionChanged,
                      getTaskGuid);
                  getTaskGuid();
              });
          };

          // Get the GUID of the selected task and display it in the add-in.
          function getTaskGuid() {
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
      ```javascript
      // The following code example adds a handler for the ViewSelectionChanged
      // event. When the active view changes, it gets the name and type of the active view.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  getActiveView();
              });
          };

          // Get the name and type of the active view and display it in the add-in.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, result.value.viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For an example that shows how to use a ViewSelectionChanged event handler in a
      // Project add-in, see "Create your first task pane add-in for Project 2013 by
      // using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.
      // When the active view changes, the handler checks the view type. It enables a button if the view is a resource
      // view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected
      // resource and displays it in the add-in.
      // The example assumes that your add-in has a reference to the jQuery library and that the following page controls
      // are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" disabled="disabled" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  // Add a ViewSelectionChanged event handler.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  $('#get-info').click(getResourceGuid);

                  // This example calls the handler on page load to get the active view
                  // of the default page.
                  getActiveView();
              });
          };

          // Activate the button based on the active view type of the document.
          // This is the ViewSelectionChanged event handler.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var viewType = result.value.viewType;
                          if (viewType == 6 ||   // ResourceForm
                              viewType == 7 ||   // ResourceSheet
                              viewType == 8 ||   // ResourceGraph
                              viewType == 15) {  // ResourceUsage
                              $('#get-info').removeAttr('disabled');
                          }
                          else {
                              $('#get-info').attr('disabled', 'disabled');
                          }
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,
      // see "Create your first task pane add-in for Project by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Document オブジェクトイベントの場合、eventType パラメーターは、またはと`Office.EventType.Document.SelectionChanged`して指定できます。`Office.EventType.Document.ActiveViewChanged`<!-- -->、またはこの列挙の対応するテキスト値を指定します。
          type:
            - Office.EventType
        - id: handler
          description: '追加するイベントハンドラー関数。これは、唯一のパラメーターが DocumentSelectionChangedEventArgs 型であることを示し[ます。](xref:office.Office.DocumentSelectionChangedEventArgs)<!-- -->. 必須。'
          type:
            - any
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.getActiveViewAsync
    summary: プレゼンテーションの現在のビューの状態を返します (編集または読み取り)。
    remarks: |-
      **要件セット**: [activeview](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)

      ビューが変更されたときにイベントをトリガーできます。
    name: 'getActiveViewAsync(options, callback)'
    fullName: 'getActiveViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、プレゼンテーションの現在のビューの状態です。 返される値は、"edit" または "read" のいずれかです。 "edit" は、スライドを編集できるビュー (標準表示、アウトライン表示など) のいずれかに対応します。 "読み取り" は、スライドショーまたは閲覧表示に対応します。'
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: office.Office.Document.getActiveViewAsync_1
    summary: プレゼンテーションの現在のビューの状態を返します (編集または読み取り)。
    remarks: |-
      **要件セット**: [activeview](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)

      ビューが変更されたときにイベントをトリガーできます。

      #### <a name="examples"></a>例

      ```javascript
      function getFileView() {
          // Get whether the current view is edit or read.
          Office.context.document.getActiveViewAsync(function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage(asyncResult.value);
              }
          });
      }
      ```
    name: getActiveViewAsync(callback)
    fullName: getActiveViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、プレゼンテーションの現在のビューの状態です。 返される値は、"edit" または "read" のいずれかです。 "edit" は、スライドを編集できるビュー (標準表示、アウトライン表示など) のいずれかに対応します。 "読み取り" は、スライドショーまたは閲覧表示に対応します。'
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: office.Office.Document.getFileAsync
    summary: ドキュメント ファイル全体を、最大で 4194304 バイト (4 MB) のスライスに分割して返します。 iOS 用アドインの場合は、最大 65536 バイト (64 KB) のファイル スライスがサポートされます。 許容された制限を超えてファイル スライスのサイズを指定すると、"内部エラー" が発生する点に注意してください。
    remarks: |-
      **要件セット**:

      - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile)(を使用する場合`Office.FileType.Compressed`<!-- -->)

      - [ファイル](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile)(を使用する場合`Office.FileType.Text`<!-- -->)

      Office for iOS 以外の Office ホストアプリケーションで実行されているアドインの場合、getFileAsync メソッドは最大4194304バイト (4 MB) のスライスでのファイルの取得をサポートしています。 iOS アプリ向けの Office で実行するアドインの場合、getFileAsync メソッドは最大 65536 バイト (64 KB) にスライスしたファイルの取得をサポートします。

      FileType パラメーターは、 [Office の filetype](xref:office.Office.FileType)列挙型またはテキスト値を使用して指定できます。 ただし、ホストによって可能な値は次のとおりです。

      Excel for Windows デスクトップおよび Excel Online:`Office.FileType.Compressed`

      Excel for Mac:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      PowerPoint for Windows デスクトップ、Mac、iPad、PowerPoint Online:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      Word for Windows デスクトップ、Mac、iPad、および Word Online:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`<!-- -->, `Office.FileType.Text`

      #### <a name="examples"></a>例

      ```javascript
      // The following example gets the document in Office Open XML ("compressed") format in 65536 bytes (64 KB) slices.
      // Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.
      function getDocumentAsCompressed() {
          Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
              function (result) {
                  if (result.status == "succeeded") {
                  // If the getFileAsync call succeeded, then
                  // result.value will return a valid File Object.
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                  // Get the file slices.
                  getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
                  else {
                  app.showNotification("Error:", result.error.message);
                  }
          });
      }

      function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {
          file.getSliceAsync(nextSlice, function (sliceResult) {
              if (sliceResult.status == "succeeded") {
                  if (!gotAllSlices) { // Failed to get all slices, no need to continue.
                      return;
                  }

                  // Got one slice, store it in a temporary array.
                  // (Or you can do something else, such as
                  // send it to a third-party server.)
                  docdataSlices[sliceResult.value.index] = sliceResult.value.data;
                  if (++slicesReceived == sliceCount) {
                    // All slices have been received.
                    file.closeAsync();
                    onGotAllSlices(docdataSlices);
                  }
                  else {
                      getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
              }
                  else {
                      gotAllSlices = false;
                      file.closeAsync();
                      app.showNotification("getSliceAsync Error:", sliceResult.error.message);
                  }
          });
      }

      function onGotAllSlices(docdataSlices) {
          var docdata = [];
          for (var i = 0; i < docdataSlices.length; i++) {
              docdata = docdata.concat(docdataSlices[i]);
          }

          var fileContent = new String();
          for (var j = 0; j < docdata.length; j++) {
              fileContent += String.fromCharCode(docdata[j]);
          }

          // Now all the file content is stored in 'fileContent' variable,
          // you can do something with it, such as print, fax...
      }

      // The following example gets the document in PDF format.
      Office.context.document.getFileAsync(Office.FileType.Pdf,
          function(result) {
              if (result.status == "succeeded") {
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);
                  // Now, you can call getSliceAsync to download the files,
                  // as described in the previous code segment (compressed format).
                  
                  myFile.closeAsync();
              }
              else {
                  app.showNotification("Error:", result.error.message);
              }
      }
      );
      ```
    name: 'getFileAsync(fileType, options, callback)'
    fullName: 'getFileAsync(fileType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: ファイルが返される形式を指定します。
          type:
            - office.Office.FileType
        - id: options
          description: ドキュメントが分割されるスライスのサイズを設定するためのオプションを提供します。
          type:
            - office.Office.GetFileOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、File オブジェクトです。'
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: office.Office.Document.getFileAsync_1
    summary: ドキュメント ファイル全体を、最大で 4194304 バイト (4 MB) のスライスに分割して返します。 iOS 用アドインの場合は、最大 65536 バイト (64 KB) のファイル スライスがサポートされます。 許容された制限を超えてファイル スライスのサイズを指定すると、"内部エラー" が発生する点に注意してください。
    remarks: |-
      **要件セット**:

      - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile)(を使用する場合`Office.FileType.Compressed`<!-- -->)

      - [ファイル](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile)(を使用する場合`Office.FileType.Text`<!-- -->)

      Office for iOS 以外の Office ホストアプリケーションで実行されているアドインの場合、getFileAsync メソッドは最大4194304バイト (4 MB) のスライスでのファイルの取得をサポートしています。 iOS アプリ向けの Office で実行するアドインの場合、getFileAsync メソッドは最大 65536 バイト (64 KB) にスライスしたファイルの取得をサポートします。

      FileType パラメーターは、 [Office の filetype](xref:office.Office.FileType)列挙型またはテキスト値を使用して指定できます。 ただし、ホストによって可能な値は次のとおりです。

      Excel for Windows デスクトップおよび Excel Online:`Office.FileType.Compressed`

      Excel for Mac:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      PowerPoint for Windows デスクトップ、Mac、iPad、PowerPoint Online:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      Word for Windows デスクトップ、Mac、iPad、および Word Online:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`<!-- -->, `Office.FileType.Text`
    name: 'getFileAsync(fileType, callback)'
    fullName: 'getFileAsync(fileType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: ファイルが返される形式を指定します。
          type:
            - office.Office.FileType
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、File オブジェクトです。'
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: office.Office.Document.getFilePropertiesAsync
    summary: 現在のドキュメントのファイル プロパティを取得します。
    remarks: |-
      **要件セット**:[セット内にない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Url プロパティを使用して、ファイルの URL を取得します。`asyncResult.value.url`<!-- -->.
    name: 'getFilePropertiesAsync(options, callback)'
    fullName: 'getFilePropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、ファイルのプロパティです (URL はにあります)。`asyncResult.value.url`<!-- -->).'
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: office.Office.Document.getFilePropertiesAsync_1
    summary: 現在のドキュメントのファイル プロパティを取得します。
    remarks: |-
      **要件セット**:[セット内にない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Url プロパティを使用して、ファイルの URL を取得します。`asyncResult.value.url`<!-- -->.

      #### <a name="examples"></a>例

      ```javascript
      // To read the URL of the current file, you need to write a callback function that returns the URL.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that returns the value of the file's URL
      //    to the callback parameter of the getFilePropertiesAsync method.
      // 2. Display the value on the add-in's page.
      function getFileUrl() {
          // Get the URL of the current file.
          Office.context.document.getFilePropertiesAsync(function (asyncResult) {
              var fileUrl = asyncResult.value.url;
              if (fileUrl == "") {
                  showMessage("The file hasn't been saved yet. Save the file and try again");
              }
              else {
                  showMessage(fileUrl);
              }
          });
      }
      ```
    name: getFilePropertiesAsync(callback)
    fullName: getFilePropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、ファイルのプロパティです (URL はにあります)。`asyncResult.value.url`<!-- -->).'
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: office.Office.Document.getMaxResourceIndexAsync
    summary: |-
      プロジェクトドキュメントのみ。 現在のプロジェクト内のリソースのコレクションの最大インデックスを取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'getMaxResourceIndexAsync(options, callback)'
    fullName: 'getMaxResourceIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、現在のプロジェクトのリソースコレクションの最大インデックス番号です。'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxResourceIndexAsync_1
    summary: |-
      プロジェクトドキュメントのみ。 現在のプロジェクト内のリソースのコレクションの最大インデックスを取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: getMaxResourceIndexAsync(callback)
    fullName: getMaxResourceIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection 
          // of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync
          // method to get each resource GUID. The example assumes that your add-in has a reference to the 
          // jQuery library and that the following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、現在のプロジェクトのリソースコレクションの最大インデックス番号です。'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxTaskIndexAsync
    summary: |-
      プロジェクトドキュメントのみ。 現在のプロジェクト内のタスクのコレクションの最大インデックスを取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'getMaxTaskIndexAsync(options, callback)'
    fullName: 'getMaxTaskIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、現在のプロジェクトのタスクコレクションの最大インデックス番号です。'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxTaskIndexAsync_1
    summary: |-
      プロジェクトドキュメントのみ。 現在のプロジェクト内のタスクのコレクションの最大インデックスを取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: getMaxTaskIndexAsync(callback)
    fullName: getMaxTaskIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the maximum index
          // of the collection of tasks in the current project. Then it uses the returned value
          // with the getTaskByIndexAsync method to get each task GUID.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、現在のプロジェクトのタスクコレクションの最大インデックス番号です。'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getProjectFieldAsync
    summary: プロジェクトドキュメントのみ。 プロジェクトフィールドの取得 (例) ProjectWebAccessURL)。
    name: 'getProjectFieldAsync(fieldId, options, callback)'
    fullName: 'getProjectFieldAsync(fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: プロジェクトレベルのフィールド。
          type:
            - number
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getProjectFieldAsync_1
    summary: プロジェクトドキュメントのみ。 プロジェクトフィールドの取得 (例) ProjectWebAccessURL)。
    name: 'getProjectFieldAsync(fieldId, callback)'
    fullName: 'getProjectFieldAsync(fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example gets the values of three specified fields for the active project, 
          // and then displays the values in the add-in.
          // The example calls getProjectFieldAsync recursively, after the previous call returns successfully.
          // It also tracks the calls to determine when all calls are sent.
          // The example assumes your add-in has a reference to the jQuery library and that the 
          // following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information for the active project.
                      getProjectInformation();
                  });
              };

              // Get the specified fields for the active project.
              function getProjectInformation() {
                  var fields =
                      [Office.ProjectProjectFields.Start, 
                       Office.ProjectProjectFields.Finish, 
                       Office.ProjectProjectFields.GUID];
                  var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == fields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }
                      else {
                          Office.context.document.getProjectFieldAsync(
                              fields[index],
                              function (result) {

                                  // If the call is successful, get the field value and then get the next field.
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: fieldId
          description: プロジェクトレベルのフィールド。
          type:
            - number
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getResourceByIndexAsync
    summary: |-
      プロジェクトドキュメントのみ。 リソースコレクション内の指定されたインデックスを持つリソースの GUID を取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceByIndexAsync_1
    summary: |-
      プロジェクトドキュメントのみ。 リソースコレクション内の指定されたインデックスを持つリソースの GUID を取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'getResourceByIndexAsync(resourceIndex, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource
          // collection, and then calls getResourceByIndexAsync to get the GUID for each resource.
          // The example assumes that your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceFieldAsync
    summary: プロジェクトドキュメントのみ。 提供されたリソース Id のリソースフィールドを取得します。 (例、)
    name: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: リソース Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: リソースフィールド
          type:
            - number
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceFieldAsync_1
    summary: プロジェクトドキュメントのみ。 提供されたリソース Id のリソースフィールドを取得します。 (例、)
    name: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource
          // that's currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: リソース Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: リソースフィールド
          type:
            - number
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedDataAsync
    summary: ドキュメントの現在の選択範囲に含まれるデータを読み取ります。
    remarks: |-
      **要件セット**:

      - [Htmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)(を使用する場合`Office.CoercionType.Html`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)(を使用する場合`Office.CoercionType.Matrix`<!-- -->)

      - [Ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(を使用する場合`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)(を使用する場合`Office.CoercionType.Table`<!-- -->)

      - [Textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)(を使用する場合`Office.CoercionType.Text`<!-- -->)

      GetSelectedDataAsync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。

      <table> <tr> <th>Property</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>取得するオブジェクトまたはデータがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>

      [CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。

      <table> <tr> <th>ホスト</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、および Word</td> <td>`Office.CoercionType.Text`表す</td> </tr> <tr> <td>Excel および Word</td> <td>`Office.CoercionType.Matrix`(配列の配列)</td> </tr> <tr> <td>Access、Excel、Word</td> <td>`Office.CoercionType.Table`(TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint、PowerPoint Online</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a>例

      ```javascript
      // The following example uses the getSelectedDataAsync method of the Document object to retrieve the
      // user's current selection as text, and then display it in the add-in's page.

      // Display the user's current selection.
      function showSelection() {
          Office.context.document.getSelectedDataAsync(
              "text",                        // coercionType
              {valueFormat: "unformatted",   // valueFormat
              filterType: "all"},            // filterType
              function (result) {            // callback
                  var dataValue; 
                  dataValue = result.value;
                  write('Selected data is: ' + dataValue);
              });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To read the value of the current selection, you need to write a callback function that reads the selection.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that reads the value of the current selection
      //    to the callback parameter of the getSelectedDataAsync method.
      // 2. Read the selection as text, unformatted, and not filtered.
      // 3. Display the value on the add-in's page.
      function getText() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, 
              { valueFormat: "unformatted", filterType: "all" },
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  } 
                  else {
                      // Get selected data.
                      var dataValue = asyncResult.value; 
                      write('Selected data is ' + dataValue);
                  }            
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example gets the values of the selected cells. It uses the optional
      // asyncContext parameter to pass some text to the callback function.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page controls are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getSelectedText);
              });
          };

          // Get the text from the selected cells in the document, and display it in the add-in.
          function getSelectedText() {
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text,
                  {asyncContext: 'Some related info'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'Selected text: {0}<br/>Passed info: {1}',
                              result.value, result.asyncContext);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: 返されるデータ構造の種類です。 各ホストでサポートされている強制型変換の種類については、「備考」を参照してください。
          type:
            - office.Office.CoercionType
        - id: options
          description: 返されるデータとその書式設定方法をカスタマイズするためのオプションを提供します。
          type:
            - office.Office.GetSelectedDataOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、現在の選択範囲内のデータです。 これは、coercionType パラメーターで指定したデータ構造または形式で返されます。 (データの強制型変換の詳細については、「注釈」を参照してください)。'
          type:
            - '(result: AsyncResult<T>) => void'
  - uid: office.Office.Document.getSelectedDataAsync_1
    summary: ドキュメントの現在の選択範囲に含まれるデータを読み取ります。
    remarks: |-
      **要件セット**:

      - [Htmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)(を使用する場合`Office.CoercionType.Html`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)(を使用する場合`Office.CoercionType.Matrix`<!-- -->)

      - [Ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(を使用する場合`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)(を使用する場合`Office.CoercionType.Table`<!-- -->)

      - [Textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)(を使用する場合`Office.CoercionType.Text`<!-- -->)

      GetSelectedDataAsync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。

      <table> <tr> <th>Property</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>取得するオブジェクトまたはデータがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>

      [CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。

      <table> <tr> <th>ホスト</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、および Word</td> <td>`Office.CoercionType.Text`表す</td> </tr> <tr> <td>Excel および Word</td> <td>`Office.CoercionType.Matrix`(配列の配列)</td> </tr> <tr> <td>Access、Excel、Word</td> <td>`Office.CoercionType.Table`(TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint、PowerPoint Online</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: 返されるデータ構造の種類です。 各ホストでサポートされている強制型変換の種類については、「備考」を参照してください。
          type:
            - office.Office.CoercionType
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、現在の選択範囲内のデータです。 これは、coercionType パラメーターで指定したデータ構造または形式で返されます。 (データの強制型変換の詳細については、「注釈」を参照してください)。'
          type:
            - '(result: AsyncResult<T>) => void'
  - uid: office.Office.Document.getSelectedResourceAsync
    summary: プロジェクトドキュメントのみ。 現在選択されているリソースの Id を取得します。
    name: 'getSelectedResourceAsync(options, callback)'
    fullName: 'getSelectedResourceAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedResourceAsync_1
    summary: プロジェクトドキュメントのみ。 現在選択されているリソースの Id を取得します。
    name: getSelectedResourceAsync(callback)
    fullName: getSelectedResourceAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's 
          // currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page controls are
          // defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedTaskAsync
    summary: プロジェクトドキュメントのみ。 現在選択されているタスクの Id を取得します。
    name: 'getSelectedTaskAsync(options, callback)'
    fullName: 'getSelectedTaskAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedTaskAsync_1
    summary: プロジェクトドキュメントのみ。 現在選択されているタスクの Id を取得します。
    name: getSelectedTaskAsync(callback)
    fullName: getSelectedTaskAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets task properties by calling getTaskAsync.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティは、文字列としてのリソースの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedViewAsync
    summary: プロジェクトドキュメントのみ。 現在選択されているビューの種類 (例) を取得します。 ガント) とビュー名。
    name: 'getSelectedViewAsync(options, callback)'
    fullName: 'getSelectedViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、次のプロパティが`viewName`含まれます:-ビューの名前 (projectviewtypes 定数)。 `viewType`-ビューの種類 (ProjectViewTypes 定数の整数値として)。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getSelectedViewAsync_1
    summary: プロジェクトドキュメントのみ。 現在選択されているビューの種類 (例) を取得します。 ガント) とビュー名。
    name: getSelectedViewAsync(callback)
    fullName: getSelectedViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls adds a ViewSelectionChanged event handler that
          // calls getSelectedViewAsync to get the name and type of the active view in the document.
          // The example assumes your add-in has a reference to the jQuery library and that
          // the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      Office.context.document.addHandlerAsync(
                          Office.EventType.ViewSelectionChanged,
                          getActiveView);
                      getActiveView();
                  });
              };

              // Get the active view's name and type.
              function getActiveView() {
                  Office.context.document.getSelectedViewAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var output = String.format(
                                  'View name: {0}<br/>View type: {1}',
                                  result.value.viewName, viewType);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、次のプロパティが`viewName`含まれます:-ビューの名前 (projectviewtypes 定数)。 `viewType`-ビューの種類 (ProjectViewTypes 定数の整数値として)。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskAsync
    summary: プロジェクトドキュメントのみ。 指定した taskId のタスク名、WSS タスク Id、および ResourceNames を取得します。
    name: 'getTaskAsync(taskId, options, callback)'
    fullName: 'getTaskAsync(taskId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: タスク Id の文字列または値。
          type:
            - string
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、次のプロパティが`taskName`含まれます:-タスクの名前。 `wssTaskId`-同期された SharePoint タスクリスト内のタスクの ID。 プロジェクトが SharePoint タスク リストと同期されていない場合、値は 0 です。 `resourceNames`-タスクに割り当てられているリソースの名前のコンマ区切りのリスト。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskAsync_1
    summary: プロジェクトドキュメントのみ。 指定した taskId のタスク名、WSS タスク Id、および ResourceNames を取得します。
    name: 'getTaskAsync(taskId, callback)'
    fullName: 'getTaskAsync(taskId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the task GUID of the currently
          // selected task. Then it calls getTaskAsync to get the properties for the task that are
          // available from the JavaScript API for Office.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: タスク Id の文字列または値。
          type:
            - string
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、次のプロパティが`taskName`含まれます:-タスクの名前。 `wssTaskId`-同期された SharePoint タスクリスト内のタスクの ID。 プロジェクトが SharePoint タスク リストと同期されていない場合、値は 0 です。 `resourceNames`-タスクに割り当てられているリソースの名前のコンマ区切りのリスト。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskByIndexAsync
    summary: |-
      プロジェクトドキュメントのみ。 タスクコレクション内の指定されたインデックスを持つタスクの GUID を取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'getTaskByIndexAsync(taskIndex, options, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、文字列としてのタスクの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getTaskByIndexAsync_1
    summary: |-
      プロジェクトドキュメントのみ。 タスクコレクション内の指定されたインデックスを持つタスクの GUID を取得します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'getTaskByIndexAsync(taskIndex, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the
          // maximum index in the project's task collection, and then
          // calls getTaskByIndexAsync to get the GUID for each task.
          // The example assumes that your add-in has a reference to the
          // jQuery library and that the following page controls are defined
          // in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは、文字列としてのタスクの GUID です。'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getTaskFieldAsync
    summary: プロジェクトドキュメントのみ。 提供されたタスク Id のタスクフィールドを取得します。 (例 StartDate)。
    name: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: タスク Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: タスクフィールド
          type:
            - number
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskFieldAsync_1
    summary: プロジェクトドキュメントのみ。 提供されたタスク Id のタスクフィールドを取得します。 (例 StartDate)。
    name: 'getTaskFieldAsync(taskId, fieldId, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected task.
              function getTaskFields(taskGuid) {
                  var output = '';
                  var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];
                  var fieldValues = ['Priority: ', '% Complete: '];
                  var index = 0;
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // Get the field value. If the call is successful, then get the next field.
                      else {
                          Office.context.document.getTaskFieldAsync(
                              taskGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: タスク Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: タスクフィールド
          type:
            - number
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. Result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getWSSUrlAsync
    summary: プロジェクトドキュメントのみ。 タスクリストの WSS Url とリスト名を取得します。 MPP も同期されます。
    name: 'getWSSUrlAsync(options, callback)'
    fullName: 'getWSSUrlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティには、次のプロパティが`listName`含まれます:-同期された SharePoint タスクリストの名前。 `serverUrl`-同期された SharePoint タスクリストの URL。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getWSSUrlAsync_1
    summary: プロジェクトドキュメントのみ。 タスクリストの WSS Url とリスト名を取得します。 MPP も同期されます。
    name: getWSSUrlAsync(callback)
    fullName: getWSSUrlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティには、次のプロパティが`listName`含まれます:-同期された SharePoint タスクリストの名前。 `serverUrl`-同期された SharePoint タスクリストの URL。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.goToByIdAsync
    summary: ドキュメント内の指定されたオブジェクトまたは場所に移動します。
    remarks: |-
      **要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      PowerPoint では、マスター表示で Document.gotobyidasync メソッドはサポートされていません。

      SelectionMode オプションが原因で発生する動作は、ホストによって異なります。

      Excel の場合`Office.SelectionMode.Selected` : バインド内のすべてのコンテンツ、または名前付きアイテムを選択します。 Office.SelectionMode.None では、テキスト バインドの場合は、セルを選択します。マトリックス バインド、テーブル バインド、および名前付きアイテムの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。

      PowerPoint では`Office.SelectionMode.Selected` 、スライドのタイトルまたは最初のテキストボックスを選択します。 `Office.SelectionMode.None`何も選択しません。

      Word では`Office.SelectionMode.Selected` 、バインド内のすべてのコンテンツを選択します。 Office.SelectionMode.None では、テキスト バインドの場合はテキストの最初までカーソルを移動します。マトリックス バインドとテーブル バインドの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。
    name: 'goToByIdAsync(id, goToType, options, callback)'
    fullName: 'goToByIdAsync(id, goToType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: 移動先のオブジェクトまたは場所の識別子です。
          type:
            - string | number
        - id: goToType
          description: 移動先の場所の型です。
          type:
            - office.Office.GoToType
        - id: options
          description: 移動先の場所を選択するかどうかのオプションを提供します。
          type:
            - office.Office.GoToByIdOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは現在のビューです。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.goToByIdAsync_1
    summary: ドキュメント内の指定されたオブジェクトまたは場所に移動します。
    remarks: |-
      **要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      PowerPoint では、マスター表示で Document.gotobyidasync メソッドはサポートされていません。

      SelectionMode オプションが原因で発生する動作は、ホストによって異なります。

      Excel の場合`Office.SelectionMode.Selected` : バインド内のすべてのコンテンツ、または名前付きアイテムを選択します。 Office.SelectionMode.None では、テキスト バインドの場合は、セルを選択します。マトリックス バインド、テーブル バインド、および名前付きアイテムの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。

      PowerPoint では`Office.SelectionMode.Selected` 、スライドのタイトルまたは最初のテキストボックスを選択します。 `Office.SelectionMode.None`何も選択しません。

      Word では`Office.SelectionMode.Selected` 、バインド内のすべてのコンテンツを選択します。 Office.SelectionMode.None では、テキスト バインドの場合はテキストの最初までカーソルを移動します。マトリックス バインドとテーブル バインドの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。

      #### <a name="examples"></a>例

      ```javascript
      // Go to a binding by id (Word and Excel)
      // The following example shows how to:
      // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.
      // 2. Specify that binding as the binding to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value on the add-in's page.
      function gotoBinding() {
          // Create a new table binding for the selected table.
          Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
          if (asyncResult.status == "failed") {
                    showMessage("Action failed with error: " + asyncResult.error.message);
                }
                else {
                    showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
                }
          });

          // Go to binding by id.
          Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to a table in a spreadsheet (Excel)
      // The following example shows how to:
      // 1. Specify a table by name as the table to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToTable() {
          Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to the currently selected slide by id (PowerPoint)
      // The following example shows how to:
      // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.
      // 2. Specify the returned id as the slide to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value of the stringified JSON object returned by asyncResult.value,
      //    which contains information about the selected slides, on the add-in's page.
      var firstSlideId = 0;
      function gotoSelectedSlide() {
          //Get currently selected slide's id
          Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  firstSlideId = asyncResult.value.slides[0].id;
                  app.showNotification(JSON.stringify(asyncResult.value));
              }
          });
          //Go to slide by id.
          Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  app.showNotification("Navigation successful");
              }
          });
      }

      // Go to slide by index (PowerPoint)
      // The following example shows how to:
      // 1. Specify the index of the first, last, previous, or next slide to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToSlideByIndex() {
          var goToFirst = Office.Index.First;
          var goToLast = Office.Index.Last;
          var goToPrevious = Office.Index.Previous;
          var goToNext = Office.Index.Next;

          Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }
      ```
    name: 'goToByIdAsync(id, goToType, callback)'
    fullName: 'goToByIdAsync(id, goToType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: 移動先のオブジェクトまたは場所の識別子です。
          type:
            - string | number
        - id: goToType
          description: 移動先の場所の型です。
          type:
            - office.Office.GoToType
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 結果`value`のプロパティは現在のビューです。'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.removeHandlerAsync
    summary: 指定したイベントの種類のイベントハンドラーを削除します。
    remarks: '**要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: イベントの種類。 ドキュメントの場合は、' ドキュメント. SelectionChanged ' または ' ドキュメント. ActiveViewChanged ' のいずれかです。
          type:
            - Office.EventType
        - id: options
          description: 削除するイベントハンドラーを決めるためのオプションを提供します。
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.removeHandlerAsync_1
    summary: 指定したイベントの種類のイベントハンドラーを削除します。
    remarks: |-
      **要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      #### <a name="examples"></a>例

      ```javascript
      // The following example removes the event handler named 'MyHandler'.
      function removeSelectionChangedEventHandler() {
          Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
      }

      function MyHandler(eventArgs) {
          doSomethingWithDocument(eventArgs.document);
      }
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the
      // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.
      // When a resource is selected in a resource view, the handler displays the
      // resource GUID. When the handler is removed, the GUID is not displayed.
      // The example assumes that your add-in has a reference to the jQuery library and
      // that the following page control is defined in the content div in the page body:
      // <input id="remove-handler" type="button" value="Remove handler" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
                  $('#remove-handler').click(removeEventHandler);
              });
          };

          // Remove the event handler.
          function removeEventHandler() {
              Office.context.document.removeHandlerAsync(
                  Office.EventType.ResourceSelectionChanged,
                  {handler:getResourceGuid,
                  asyncContext:'The handler is removed.'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#remove-handler').attr('disabled', 'disabled');
                          $('#message').html(result.asyncContext);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: イベントの種類。 ドキュメントの場合は、' ドキュメント. SelectionChanged ' または ' ドキュメント. ActiveViewChanged ' のいずれかです。
          type:
            - Office.EventType
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setResourceFieldAsync
    summary: |-
      プロジェクトドキュメントのみ。 指定されたリソース Id のリソースフィールドを設定します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: リソース Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: リソースフィールド
          type:
            - number
        - id: fieldValue
          description: ターゲットフィールドの値。
          type:
            - string | number | boolean | object
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setResourceFieldAsync_1
    summary: |-
      プロジェクトドキュメントのみ。 指定されたリソース Id のリソースフィールドを設定します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's
          // currently selected in a resource view. Then it sets two resource field values by calling
          // setResourceFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync
          // method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setResourceInfo);
                  });
              };

              // Get the GUID of the resource, and then get the resource fields.
              function setResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          setResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected resource.
              function setResourceFields(resourceGuid) {
                  var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];
                  var fieldValues = [.28, 'Notes for the resource.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setResourceFieldAsync(
                          resourceGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: リソース Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: リソースフィールド
          type:
            - number
        - id: fieldValue
          description: ターゲットフィールドの値。
          type:
            - string | number | boolean | object
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setSelectedDataAsync
    summary: 指定されたデータを現在の選択範囲に書き込みます。
    remarks: |-
      **要件セット**:

      - [HtmlCoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->、(を使用する場合)`Office.CoercionType.Html`<!-- -->)

      - [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#imagecoercion)(を使用する場合`Office.CoercionType.Image`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)(を使用する場合`Office.CoercionType.Matrix`<!-- -->)

      - [Ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(を使用する場合`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)(を使用する場合`Office.CoercionType.Table`<!-- -->)

      - [Textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)(を使用する場合`Office.CoercionType.Text`<!-- -->)

      **アプリケーション固有の動作**

      選択範囲にデータを書き込むときには、次のアプリケーション固有のアクションが適用されます。

      <table> <tr> <td>Word</td> <td>選択範囲がなく、挿入ポイントが有効な位置にある場合は、指定`data`されたが挿入ポイントに挿入されます。</td> <td>が`data`文字列の場合、指定したテキストが挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data`配列の配列 ("matrix") または TableData オブジェクトの場合は、新しい Word の表が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data` Html の場合は、指定された html が挿入されます。 (**重要**: 挿入する HTML のいずれかが無効な場合は、Word でエラーは発生しません。 Word は、できるだけ多くの HTML を挿入し、無効なデータを省略します。</td> </tr> <tr> <td></td> <td></td> <td>Office `data` Open Xml の場合、指定した xml が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data` base64 でエンコードされたイメージストリームの場合、指定したイメージが挿入されます。</td> </tr> <tr> <td></td> <td>選択範囲がある場合</td> <td>これは、上記と同じ規則`data`に従って、次のように置き換えられます。</td> </tr> <tr> <td></td> <td>画像の挿入</td> <td>挿入された画像はインラインで配置されます。 imageLeft パラメーターと imageTop パラメーターは無視されます。 画像の縦横比は常に固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか 1 つのみが指定された場合、もう一方の値がスケーリングされて自動的に元の縦横比が維持されます。</td> </tr>

      <tr> <td>Excel</td> <td>単一のセルが選択されている場合</td> <td>が`data`文字列の場合、指定したテキストが現在のセルの値として挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data`配列の配列 ("matrix") の場合は、指定された行と列のセットが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</td> </tr> <tr> <td></td> <td></td> <td>が`data` TableData オブジェクトの場合、指定された行とヘッダーを持つ新しい Excel テーブルが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</td> </tr> <tr> <td></td> <td>複数のセルが選択されている場合</td> <td>If the shape does not match the shape of `data`<!-- -->、エラーが返されます。</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->、選択されているセルの値が更新されます。`data`<!-- -->.</td> </tr> <tr> <td></td> <td>画像の挿入</td> <td>挿入された画像は浮動になります。 位置パラメーターの imageLeft と imageTop は、現在選択されているセルからの相対位置になります。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がワークシート内に収まるようにするために Excel によって再調整される可能性があります。 画像の縦横比は、 imageWidth と imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> <tr> <td></td> <td>その他すべてのケース</td> <td>エラーが返されます。</td> </tr>

      <tr> <td>Excel Online</td> <td>上記の Excel で説明されている動作に加えて、これらの制限は Excel Online でのデータの書き込み時に適用されます。</td> <td>この`data`パラメーターを使用してワークシートに書き込むセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。</td> </tr> <tr> <td></td> <td></td> <td>`cellFormat`パラメーターに渡される書式設定グループの数が100を超えることはできません。 1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットから構成されます。</td> </tr>

      <tr> <td>PowerPoint</td> <td>画像の挿入</td> <td>挿入された画像は浮動になります。 Position imageLeft および imageTop パラメーターは省略可能ですが、指定した場合は両方とも存在する必要があります。 1 つの値しか指定されない場合、それは無視されます。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がスライドの外に配置される可能性があります。 オプションのパラメーターが指定されず、スライドにプレースホルダがある場合は、画像によってスライドのプレースホルダが置き換えられます。 画像の縦横比は、 imageWidth パラメーターと imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> </table>

      [CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。

      <table> <tr> <th>ホスト</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、および Word</td> <td>`Office.CoercionType.Text`表す</td> </tr> <tr> <td>Excel および Word</td> <td>`Office.CoercionType.Matrix`(配列の配列)</td> </tr> <tr> <td>Access、Excel、Word</td> <td>`Office.CoercionType.Table`(TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint、PowerPoint Online</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a>例

      ```javascript
      // The following example sets the selected text or cell to "Hello World!", 
      // and if that fails, displays the value of the error.message property.
      function writeText() {
          Office.context.document.setSelectedDataAsync("Hello World!",
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write
      // to a selection. The following example writes data as an array of three rows of two columns, 
      // specifying the coercionType as `Matrix` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeMatrix() {
          Office.context.document.setSelectedDataAsync(
              [["Red", "Rojo"], ["Green", "Verde"], ["Blue", "Azul"]],
              {coercionType: Office.CoercionType.Matrix}
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // The following example writes data as a one column table with a header and four rows, 
      // specifying the coercionType as `Table` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeTable() {
          // Build table.
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];

          // Write table.
          Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},
              function (result) {
                  var error = result.error
                  if (result.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`
      // as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.context.document.setSelectedDataAsync(
              "<b>Hello</b> World!", {coercionType: Office.CoercionType.Html}, function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write('Error: ' + asyncResult.error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType
      // parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertPictureAtSelection(base64EncodedImageStr) {

          Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {
              coercionType: Office.CoercionType.Image,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 100,
              imageHeight: 100
          },
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          });
      }

      // In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the 
      // coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertSvgAtSelection(base64EncodedImageStr) {
          Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {
              coercionType: Office.CoercionType.XmlSvg,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 400
          },
              function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      console.log(asyncResult.error.message);
                  }
              });
      }
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            設定するデータを指定します。 文字列または[CoercionType](xref:office.Office.CoercionType)の値、2d 配列、TableData オブジェクトのいずれかを指定します。

            渡された値が`data`である場合は、次のようになります。

            - 文字列: プレーン テキスト、または string に強制的に変換できるその他の値が挿入されます。 Excel では、選択したセルに数式を追加する有効な数式としてデータを指定することもできます。 例えば、data を "=SUM(A1:A5)" と設定すると、指定の範囲内の値が集計されます。 ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。 選択したセルで Document.getSelectedDataAsync メソッドを呼び出してそのデータを読み取ると、このメソッドは (数式の結果である) セルに表示されたデータのみを返します。

            - 配列の配列 ("matrix"): ヘッダーなしの表形式データが挿入されます。 たとえば、2つの列に3つの行のデータを書き込むには、次のよう\[ \[な配列を渡します。 "\]R1C1 \["、"R1C2"、"\]R2C1 \["、"R2C2"、"\]\]R3C1"、"R3C2"。 3つの行からなる1つの列を記述するには\[ \[、次の\]よう\[な配列を\]渡し\[ます。 "R1C1"、"R2C1"、"R3C1"\]\]

            Excel では、データを、選択したセルに追加する有効な数式を含む配列の配列として指定することもできます。 たとえば、他のデータが上書きされない場合は、 \[ \[データを "= SUM (a1: a5)", "= AVERAGE (a1: a5\] \] )" に設定すると、選択範囲に2つの数式が追加されます。 Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.

            - TableData オブジェクト: ヘッダー付きのテーブルが挿入されます。 Excel では、data パラメーターに渡す TableData オブジェクトに数式を指定すると、Excel の "集計列" 機能によって期待した結果が得られない場合があります。これにより、列内の数式は自動的に複製されます。 この問題を回避するには、選択`data`したテーブルに数式が含まれている場合は、TableData オブジェクトではなく配列の配列としてデータを指定し、coercionType または "matrix" として指定します。 ただし、この手法では、次のいずれかの条件が満たされている場合にのみ、"計算列" 機能がブロックされます。 (1) 列のすべてのセルに対して、または (2) 列に2つ以上の数式が既に存在します。
          type:
            - 'string | TableData | any[][]'
        - id: options
          description: 選択範囲にデータを挿入する方法のオプションを提供します。
          type:
            - office.Office.SetSelectedDataOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 取得するオブジェクトまたはデータがないため、AsyncResult プロパティは常に undefined を返します。'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setSelectedDataAsync_1
    summary: 指定されたデータを現在の選択範囲に書き込みます。
    remarks: |-
      **要件セット**:

      - [HtmlCoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->、(を使用する場合)`Office.CoercionType.Html`<!-- -->)

      - [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#imagecoercion)(を使用する場合`Office.CoercionType.Image`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)(を使用する場合`Office.CoercionType.Matrix`<!-- -->)

      - [Ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(を使用する場合`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)(を使用する場合`Office.CoercionType.Table`<!-- -->)

      - [Textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)(を使用する場合`Office.CoercionType.Text`<!-- -->)

      **アプリケーション固有の動作**

      選択範囲にデータを書き込むときには、次のアプリケーション固有のアクションが適用されます。

      <table> <tr> <td>Word</td> <td>選択範囲がなく、挿入ポイントが有効な位置にある場合は、指定`data`されたが挿入ポイントに挿入されます。</td> <td>が`data`文字列の場合、指定したテキストが挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data`配列の配列 ("matrix") または TableData オブジェクトの場合は、新しい Word の表が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data` Html の場合は、指定された html が挿入されます。 (**重要**: 挿入する HTML のいずれかが無効な場合は、Word でエラーは発生しません。 Word は、できるだけ多くの HTML を挿入し、無効なデータを省略します。</td> </tr> <tr> <td></td> <td></td> <td>Office `data` Open Xml の場合、指定した xml が挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data` base64 でエンコードされたイメージストリームの場合、指定したイメージが挿入されます。</td></tr></td> </tr> <tr> <td></td> <td>選択範囲がある場合</td> <td>これは、上記と同じ規則`data`に従って、次のように置き換えられます。</td> </tr> <tr> <td></td> <td>画像の挿入</td> <td>挿入された画像はインラインで配置されます。 imageLeft パラメーターと imageTop パラメーターは無視されます。 画像の縦横比は常に固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか 1 つのみが指定された場合、もう一方の値がスケーリングされて自動的に元の縦横比が維持されます。</td> </tr>

      <tr> <td>Excel</td> <td>単一のセルが選択されている場合</td> <td>が`data`文字列の場合、指定したテキストが現在のセルの値として挿入されます。</td> </tr> <tr> <td></td> <td></td> <td>が`data`配列の配列 ("matrix") の場合は、指定された行と列のセットが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</td> </tr> <tr> <td></td> <td></td> <td>が`data` TableData オブジェクトの場合、指定された行とヘッダーを持つ新しい Excel テーブルが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</td> </tr> <tr> <td></td> <td>複数のセルが選択されている場合</td><td>If the shape does not match the shape of `data`<!-- -->、エラーが返されます。</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->、選択されているセルの値が更新されます。`data`<!-- -->.</td> </tr> <tr> <td></td> <td>画像の挿入</td> <td>挿入された画像は浮動になります。 位置パラメーターの imageLeft と imageTop は、現在選択されているセルからの相対位置になります。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がワークシート内に収まるようにするために Excel によって再調整される可能性があります。 画像の縦横比は、 imageWidth と imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> <tr> <td></td> <td>その他すべてのケース</td> <td>エラーが返されます。</td> </tr>

      <tr> <td>Excel Online</td> <td>上記の Excel で説明されている動作に加えて、これらの制限は Excel Online でのデータの書き込み時に適用されます。</td> <td>この`data`パラメーターを使用してワークシートに書き込むセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。</td> </tr> <tr> <td></td> <td></td> <td>`cellFormat`パラメーターに渡される書式設定グループの数が100を超えることはできません。 1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットから構成されます。</td> </tr>

      <tr> <td>PowerPoint</td> <td>画像の挿入</td> <td>挿入された画像は浮動になります。 Position imageLeft および imageTop パラメーターは省略可能ですが、指定した場合は両方とも存在する必要があります。 1 つの値しか指定されない場合、それは無視されます。 imageLeft と imageTop は負の値にすることもでき、その場合は、画像がスライドの外に配置される可能性があります。 オプションのパラメーターが指定されず、スライドにプレースホルダがある場合は、画像によってスライドのプレースホルダが置き換えられます。 画像の縦横比は、 imageWidth パラメーターと imageHeight パラメーターの両方が指定されない限り固定されます。 imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</td> </tr> </table>

      [CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。

      <table> <tr> <th>ホスト</th> <th>サポートされる coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project、および Word</td> <td>`Office.CoercionType.Text`表す</td> </tr> <tr> <td>Excel および Word</td> <td>`Office.CoercionType.Matrix`(配列の配列)</td> </tr> <tr> <td>Access、Excel、Word</td> <td>`Office.CoercionType.Table`(TableData オブジェクト)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint、PowerPoint Online</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint、および Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            設定するデータを指定します。 文字列または[CoercionType](xref:office.Office.CoercionType)の値、2d 配列、TableData オブジェクトのいずれかを指定します。

            渡された値が`data`である場合は、次のようになります。

            - 文字列: プレーン テキスト、または string に強制的に変換できるその他の値が挿入されます。 Excel では、選択したセルに数式を追加する有効な数式としてデータを指定することもできます。 例えば、data を "=SUM(A1:A5)" と設定すると、指定の範囲内の値が集計されます。 ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。 選択したセルで Document.getSelectedDataAsync メソッドを呼び出してそのデータを読み取ると、このメソッドは (数式の結果である) セルに表示されたデータのみを返します。

            - 配列の配列 ("matrix"): ヘッダーなしの表形式データが挿入されます。 たとえば、2つの列に3つの行のデータを書き込むには、次のよう\[ \[な配列を渡します。 "\]R1C1 \["、"R1C2"、"\]R2C1 \["、"R2C2"、"\]\]R3C1"、"R3C2"。 3つの行からなる1つの列を記述するには\[ \[、次の\]よう\[な配列を\]渡し\[ます。 "R1C1"、"R2C1"、"R3C1"\]\]

            Excel では、データを、選択したセルに追加する有効な数式を含む配列の配列として指定することもできます。 たとえば、他のデータが上書きされない場合は、 \[ \[データを "= SUM (a1: a5)", "= AVERAGE (a1: a5\] \] )" に設定すると、選択範囲に2つの数式が追加されます。 Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.

            - TableData オブジェクト: ヘッダー付きのテーブルが挿入されます。 Excel では、data パラメーターに渡す TableData オブジェクトに数式を指定すると、Excel の "集計列" 機能によって期待した結果が得られない場合があります。これにより、列内の数式は自動的に複製されます。 この問題を回避するには、選択`data`したテーブルに数式が含まれている場合は、TableData オブジェクトではなく配列の配列としてデータを指定し、coercionType または "matrix" として指定します。 ただし、この手法では、次のいずれかの条件が満たされている場合にのみ、"計算列" 機能がブロックされます。 (1) 列のすべてのセルに対して、または (2) 列に2つ以上の数式が既に存在します。
          type:
            - 'string | TableData | any[][]'
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->. 取得するオブジェクトまたはデータがないため、AsyncResult プロパティは常に undefined を返します。'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setTaskFieldAsync
    summary: |-
      プロジェクトドキュメントのみ。 指定したタスク Id のタスクフィールドを設定します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: タスク Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: タスクフィールド
          type:
            - number
        - id: fieldValue
          description: ターゲットフィールドの値。
          type:
            - string | number | boolean | object
        - id: options
          description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setTaskFieldAsync_1
    summary: |-
      プロジェクトドキュメントのみ。 指定したタスク Id のタスクフィールドを設定します。

      **重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's
          // currently selected in a task view. Then it sets two task field values by calling
          // setTaskFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the
          // addHandlerAsync method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function setTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          setTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected task.
              function setTaskFields(taskGuid) {
                  var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];
                  var fieldValues = [true, 'Notes for the task.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setTaskFieldAsync(
                          taskGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: タスク Id の文字列または値。
          type:
            - string
        - id: fieldId
          description: タスクフィールド
          type:
            - number
        - id: fieldValue
          description: ターゲットフィールドの値。
          type:
            - string | number | boolean | object
        - id: callback
          description: '省略可能です。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.bindings
    summary: ドキュメントに定義されているバインドへのアクセスを提供するオブジェクトを取得します。
    remarks: |-
      Document オブジェクトをスクリプトで直接インスタンス化することはありません。 To call members of the Document object to interact with the current document or worksheet, use `Office.context.document` in your script.

      #### <a name="examples"></a>例

      ```javascript
      function displayAllBindings() {
          Office.context.document.bindings.getAllAsync(function (asyncResult) {
              var bindingString = '';
              for (var i in asyncResult.value) {
                  bindingString += asyncResult.value[i].id + '\n';
              }
              write('Existing bindings: ' + bindingString);
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bindings: Bindings;'
      return:
        type:
          - office.Office.Bindings
  - uid: office.Office.Document.customXmlParts
    summary: ドキュメント内のカスタム XML パーツを表すオブジェクトを取得します。
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customXmlParts: CustomXmlParts;'
      return:
        type:
          - office.Office.CustomXmlParts
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          function getCustomXmlParts(){
              Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {
                  write('Retrieved ' + asyncResult.value.length + ' custom XML parts');
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Document.mode
    summary: ドキュメントのモードを取得します。
    name: mode
    fullName: mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: DocumentMode;'
      return:
        type:
          - office.Office.DocumentMode
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          function displayDocumentMode() {
              write(Office.context.document.mode);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
          ```javascript
          // The following example initializes the add-in and then gets properties of the
          // Document object that are available in the context of a Project document.
          // A Project document is the opened, active project. To access members of the
          // ProjectDocument object, use the Office.context.document object as shown in
          // the code examples for ProjectDocument methods and events.
          // The example assumes your add-in has a reference to the jQuery library and
          // that the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information about the document.
                      showDocumentProperties();
                  });
              };

              // Get the document mode and the URL of the active project.
              function showDocumentProperties() {
                  var output = String.format(
                      'The document mode is {0}.<br/>The URL of the active project is {1}.',
                      Office.context.document.mode,
                      Office.context.document.url);
                  $('#message').html(output);
              }
          })();
          ```
  - uid: office.Office.Document.settings
    summary: 現在のドキュメントのコンテンツ アプリまたは作業ウィンドウ アプリの保存されているカスタム設定を表すオブジェクトを取得します。
    name: settings
    fullName: settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'settings: Settings;'
      return:
        type:
          - office.Office.Settings
  - uid: office.Office.Document.url
    summary: ホスト アプリケーションが現在開いているドキュメントの URL を取得します。 URL が利用できない場合は null を返します。
    name: url
    fullName: url
    langs:
      - typeScript
    type: property
    syntax:
      content: 'url: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          function displayDocumentUrl() {
              write(Office.context.document.url);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```