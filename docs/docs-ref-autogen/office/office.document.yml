### YamlMime:UniversalReference
items:
  - uid: office.Office.Document
    summary: <span data-ttu-id="ead19-101">アドインから対話操作するドキュメントを表す抽象クラス。</span><span class="sxs-lookup"><span data-stu-id="ead19-101">An abstract class that represents the document the add-in is interacting with.</span></span>
    remarks: '<span data-ttu-id="ead19-102">**Hosts**: Access、Excel、PowerPoint、Project、Word</span><span class="sxs-lookup"><span data-stu-id="ead19-102">**Hosts**: Access, Excel, PowerPoint, Project, Word</span></span>'
    name: Office.Document
    fullName: Office.Document
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Document.addHandlerAsync
      - office.Office.Document.addHandlerAsync_1
      - office.Office.Document.getActiveViewAsync
      - office.Office.Document.getActiveViewAsync_1
      - office.Office.Document.getFileAsync
      - office.Office.Document.getFileAsync_1
      - office.Office.Document.getFilePropertiesAsync
      - office.Office.Document.getFilePropertiesAsync_1
      - office.Office.Document.getMaxResourceIndexAsync
      - office.Office.Document.getMaxResourceIndexAsync_1
      - office.Office.Document.getMaxTaskIndexAsync
      - office.Office.Document.getMaxTaskIndexAsync_1
      - office.Office.Document.getProjectFieldAsync
      - office.Office.Document.getProjectFieldAsync_1
      - office.Office.Document.getResourceByIndexAsync
      - office.Office.Document.getResourceByIndexAsync_1
      - office.Office.Document.getResourceFieldAsync
      - office.Office.Document.getResourceFieldAsync_1
      - office.Office.Document.getSelectedDataAsync
      - office.Office.Document.getSelectedDataAsync_1
      - office.Office.Document.getSelectedResourceAsync
      - office.Office.Document.getSelectedResourceAsync_1
      - office.Office.Document.getSelectedTaskAsync
      - office.Office.Document.getSelectedTaskAsync_1
      - office.Office.Document.getSelectedViewAsync
      - office.Office.Document.getSelectedViewAsync_1
      - office.Office.Document.getTaskAsync
      - office.Office.Document.getTaskAsync_1
      - office.Office.Document.getTaskByIndexAsync
      - office.Office.Document.getTaskByIndexAsync_1
      - office.Office.Document.getTaskFieldAsync
      - office.Office.Document.getTaskFieldAsync_1
      - office.Office.Document.getWSSUrlAsync
      - office.Office.Document.getWSSUrlAsync_1
      - office.Office.Document.goToByIdAsync
      - office.Office.Document.goToByIdAsync_1
      - office.Office.Document.removeHandlerAsync
      - office.Office.Document.removeHandlerAsync_1
      - office.Office.Document.setResourceFieldAsync
      - office.Office.Document.setResourceFieldAsync_1
      - office.Office.Document.setSelectedDataAsync
      - office.Office.Document.setSelectedDataAsync_1
      - office.Office.Document.setTaskFieldAsync
      - office.Office.Document.setTaskFieldAsync_1
      - office.Office.Document.bindings
      - office.Office.Document.customXmlParts
      - office.Office.Document.mode
      - office.Office.Document.settings
      - office.Office.Document.url
  - uid: office.Office.Document.addHandlerAsync
    summary: <span data-ttu-id="ead19-103">Document オブジェクトイベントのイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="ead19-103">Adds an event handler for a Document object event.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-104">**要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span><span class="sxs-lookup"><span data-stu-id="ead19-104">**Requirement set**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span></span>

      <span data-ttu-id="ead19-105">各イベントハンドラー関数の名前が一意である限り、指定された eventType に対して複数のイベントハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="ead19-105">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="ead19-106">Document オブジェクトイベントの場合、eventType パラメーターは、またはと`Office.EventType.Document.SelectionChanged`して指定できます。`Office.EventType.Document.ActiveViewChanged`</span><span class="sxs-lookup"><span data-stu-id="ead19-106">For a Document object event, the eventType parameter can be specified as `Office.EventType.Document.SelectionChanged` or `Office.EventType.Document.ActiveViewChanged`</span></span><!-- --><span data-ttu-id="ead19-107">、またはこの列挙の対応するテキスト値を指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-107">, or the corresponding text value of this enumeration.</span></span>'
          type:
            - Office.EventType
        - id: handler
          description: '<span data-ttu-id="ead19-108">追加するイベントハンドラー関数。これは、唯一のパラメーターが DocumentSelectionChangedEventArgs 型であることを示し[ます。](xref:office.Office.DocumentSelectionChangedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="ead19-108">The event handler function to add, whose only parameter is of type [Office.DocumentSelectionChangedEventArgs](xref:office.Office.DocumentSelectionChangedEventArgs)</span></span><!-- --><span data-ttu-id="ead19-109">.</span><span class="sxs-lookup"><span data-stu-id="ead19-109"></span></span> <span data-ttu-id="ead19-110">必須です。</span><span class="sxs-lookup"><span data-stu-id="ead19-110">Required.</span></span>'
          type:
            - any
        - id: options
          description: '<span data-ttu-id="ead19-111">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-111">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-112">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-112">Optional.</span></span> <span data-ttu-id="ead19-113">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-113">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-114">.</span><span class="sxs-lookup"><span data-stu-id="ead19-114"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.addHandlerAsync_1
    summary: <span data-ttu-id="ead19-115">Document オブジェクトイベントのイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="ead19-115">Adds an event handler for a Document object event.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-116">**要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span><span class="sxs-lookup"><span data-stu-id="ead19-116">**Requirement set**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span></span>

      <span data-ttu-id="ead19-117">各イベントハンドラー関数の名前が一意である限り、指定された eventType に対して複数のイベントハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="ead19-117">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>

      #### <a name="examples"></a><span data-ttu-id="ead19-118">例</span><span class="sxs-lookup"><span data-stu-id="ead19-118">Examples</span></span>

      ```javascript
      // The following example adds an event handler for the SelectionChanged event of a document
      function addSelectionChangedEventHandler() {
          Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithDocument(eventArgs.document);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example adds a handler for the ResourceSelectionChanged event.
      // When the resource selection changes in the document, it gets the GUID of the selected resource.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
              });
          };

          // Get the GUID of the selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ResourceSelectionChanged
      // event handler in a Project add-in, see "Create your first task pane add-in
      // for Project 2013 by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example adds a handler for the TaskSelectionChanged event.
      // When the task selection changes in the document, it gets the GUID of the
      // selected task.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.TaskSelectionChanged,
                      getTaskGuid);
                  getTaskGuid();
              });
          };

          // Get the GUID of the selected task and display it in the add-in.
          function getTaskGuid() {
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
      ```javascript
      // The following code example adds a handler for the ViewSelectionChanged
      // event. When the active view changes, it gets the name and type of the active view.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  getActiveView();
              });
          };

          // Get the name and type of the active view and display it in the add-in.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, result.value.viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For an example that shows how to use a ViewSelectionChanged event handler in a
      // Project add-in, see "Create your first task pane add-in for Project 2013 by
      // using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.
      // When the active view changes, the handler checks the view type. It enables a button if the view is a resource
      // view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected
      // resource and displays it in the add-in.
      // The example assumes that your add-in has a reference to the jQuery library and that the following page controls
      // are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" disabled="disabled" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  // Add a ViewSelectionChanged event handler.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  $('#get-info').click(getResourceGuid);

                  // This example calls the handler on page load to get the active view
                  // of the default page.
                  getActiveView();
              });
          };

          // Activate the button based on the active view type of the document.
          // This is the ViewSelectionChanged event handler.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var viewType = result.value.viewType;
                          if (viewType == 6 ||   // ResourceForm
                              viewType == 7 ||   // ResourceSheet
                              viewType == 8 ||   // ResourceGraph
                              viewType == 15) {  // ResourceUsage
                              $('#get-info').removeAttr('disabled');
                          }
                          else {
                              $('#get-info').attr('disabled', 'disabled');
                          }
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,
      // see "Create your first task pane add-in for Project by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="ead19-119">Document オブジェクトイベントの場合、eventType パラメーターは、またはと`Office.EventType.Document.SelectionChanged`して指定できます。`Office.EventType.Document.ActiveViewChanged`</span><span class="sxs-lookup"><span data-stu-id="ead19-119">For a Document object event, the eventType parameter can be specified as `Office.EventType.Document.SelectionChanged` or `Office.EventType.Document.ActiveViewChanged`</span></span><!-- --><span data-ttu-id="ead19-120">、またはこの列挙の対応するテキスト値を指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-120">, or the corresponding text value of this enumeration.</span></span>'
          type:
            - Office.EventType
        - id: handler
          description: '<span data-ttu-id="ead19-121">追加するイベントハンドラー関数。これは、唯一のパラメーターが DocumentSelectionChangedEventArgs 型であることを示し[ます。](xref:office.Office.DocumentSelectionChangedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="ead19-121">The event handler function to add, whose only parameter is of type [Office.DocumentSelectionChangedEventArgs](xref:office.Office.DocumentSelectionChangedEventArgs)</span></span><!-- --><span data-ttu-id="ead19-122">.</span><span class="sxs-lookup"><span data-stu-id="ead19-122"></span></span> <span data-ttu-id="ead19-123">必須です。</span><span class="sxs-lookup"><span data-stu-id="ead19-123">Required.</span></span>'
          type:
            - any
        - id: callback
          description: '<span data-ttu-id="ead19-124">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-124">Optional.</span></span> <span data-ttu-id="ead19-125">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-125">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-126">.</span><span class="sxs-lookup"><span data-stu-id="ead19-126"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.getActiveViewAsync
    summary: <span data-ttu-id="ead19-127">プレゼンテーションの現在のビューの状態を返します (編集または読み取り)。</span><span class="sxs-lookup"><span data-stu-id="ead19-127">Returns the state of the current view of the presentation (edit or read).</span></span>
    remarks: |-
      <span data-ttu-id="ead19-128">**要件セット**: [activeview](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)</span><span class="sxs-lookup"><span data-stu-id="ead19-128">**Requirement set**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)</span></span>

      <span data-ttu-id="ead19-129">ビューが変更されたときにイベントをトリガーできます。</span><span class="sxs-lookup"><span data-stu-id="ead19-129">Can trigger an event when the view changes.</span></span>
    name: 'getActiveViewAsync(options, callback)'
    fullName: 'getActiveViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-130">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-130">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-131">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-131">Optional.</span></span> <span data-ttu-id="ead19-132">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-132">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-133">.</span><span class="sxs-lookup"><span data-stu-id="ead19-133"></span></span> <span data-ttu-id="ead19-134">結果`value`のプロパティは、プレゼンテーションの現在のビューの状態です。</span><span class="sxs-lookup"><span data-stu-id="ead19-134">The `value` property of the result is the state of the presentation''s current view.</span></span> <span data-ttu-id="ead19-135">返される値は、"edit" または "read" のいずれかです。</span><span class="sxs-lookup"><span data-stu-id="ead19-135">The value returned can be either "edit" or "read".</span></span> <span data-ttu-id="ead19-136">"edit" は、スライドを編集できるビュー (標準表示、アウトライン表示など) のいずれかに対応します。</span><span class="sxs-lookup"><span data-stu-id="ead19-136">"edit" corresponds to any of the views in which you can edit slides, such as Normal or Outline View.</span></span> <span data-ttu-id="ead19-137">"読み取り" は、スライドショーまたは閲覧表示に対応します。</span><span class="sxs-lookup"><span data-stu-id="ead19-137">"read" corresponds to either Slide Show or Reading View.</span></span>'
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: office.Office.Document.getActiveViewAsync_1
    summary: <span data-ttu-id="ead19-138">プレゼンテーションの現在のビューの状態を返します (編集または読み取り)。</span><span class="sxs-lookup"><span data-stu-id="ead19-138">Returns the state of the current view of the presentation (edit or read).</span></span>
    remarks: |-
      <span data-ttu-id="ead19-139">**要件セット**: [activeview](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)</span><span class="sxs-lookup"><span data-stu-id="ead19-139">**Requirement set**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)</span></span>

      <span data-ttu-id="ead19-140">ビューが変更されたときにイベントをトリガーできます。</span><span class="sxs-lookup"><span data-stu-id="ead19-140">Can trigger an event when the view changes.</span></span>

      #### <a name="examples"></a><span data-ttu-id="ead19-141">例</span><span class="sxs-lookup"><span data-stu-id="ead19-141">Examples</span></span>

      ```javascript
      function getFileView() {
          // Get whether the current view is edit or read.
          Office.context.document.getActiveViewAsync(function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage(asyncResult.value);
              }
          });
      }
      ```
    name: getActiveViewAsync(callback)
    fullName: getActiveViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-142">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-142">Optional.</span></span> <span data-ttu-id="ead19-143">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-143">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-144">.</span><span class="sxs-lookup"><span data-stu-id="ead19-144"></span></span> <span data-ttu-id="ead19-145">結果`value`のプロパティは、プレゼンテーションの現在のビューの状態です。</span><span class="sxs-lookup"><span data-stu-id="ead19-145">The `value` property of the result is the state of the presentation''s current view.</span></span> <span data-ttu-id="ead19-146">返される値は、"edit" または "read" のいずれかです。</span><span class="sxs-lookup"><span data-stu-id="ead19-146">The value returned can be either "edit" or "read".</span></span> <span data-ttu-id="ead19-147">"edit" は、スライドを編集できるビュー (標準表示、アウトライン表示など) のいずれかに対応します。</span><span class="sxs-lookup"><span data-stu-id="ead19-147">"edit" corresponds to any of the views in which you can edit slides, such as Normal or Outline View.</span></span> <span data-ttu-id="ead19-148">"読み取り" は、スライドショーまたは閲覧表示に対応します。</span><span class="sxs-lookup"><span data-stu-id="ead19-148">"read" corresponds to either Slide Show or Reading View.</span></span>'
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: office.Office.Document.getFileAsync
    summary: '<span data-ttu-id="ead19-149">ドキュメント ファイル全体を、最大で 4194304 バイト (4 MB) のスライスに分割して返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-149">Returns the entire document file in slices of up to 4194304 bytes (4 MB).</span></span> <span data-ttu-id="ead19-150">iOS 用アドインの場合は、最大 65536 バイト (64 KB) のファイル スライスがサポートされます。</span><span class="sxs-lookup"><span data-stu-id="ead19-150">For add-ins for iOS, file slice is supported up to 65536 (64 KB).</span></span> <span data-ttu-id="ead19-151">許容された制限を超えてファイル スライスのサイズを指定すると、"内部エラー" が発生する点に注意してください。</span><span class="sxs-lookup"><span data-stu-id="ead19-151">Note that specifying file slice size of above permitted limit will result in an "Internal Error" failure.</span></span>'
    remarks: |-
      <span data-ttu-id="ead19-152">**要件セット**: [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (を使用する場合)`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-152">**Requirement sets**: [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (when using `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-153">)、[ファイル](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)</span><span class="sxs-lookup"><span data-stu-id="ead19-153">), [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)</span></span><!-- --><span data-ttu-id="ead19-154">、 [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (を使用する場合)`Office.FileType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-154">, [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (when using `Office.FileType.Text`</span></span><!-- --><span data-ttu-id="ead19-155">)</span><span class="sxs-lookup"><span data-stu-id="ead19-155"></span></span>

      <span data-ttu-id="ead19-156">office for iOS 以外の office ホストアプリケーションで実行されているアドインの場合、getFileAsync メソッドは最大4194304バイト (4 MB) のスライスでのファイルの取得をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="ead19-156">For add-ins running in Office host applications other than Office for iOS, the getFileAsync method supports getting files in slices of up to 4194304 bytes (4 MB).</span></span> <span data-ttu-id="ead19-157">iOS アプリ向けの Office で実行するアドインの場合、getFileAsync メソッドは最大 65536 バイト (64 KB) にスライスしたファイルの取得をサポートします。</span><span class="sxs-lookup"><span data-stu-id="ead19-157">For add-ins running in Office for iOS apps, the getFileAsync method supports getting files in slices of up to 65536 (64 KB).</span></span>

      <span data-ttu-id="ead19-158">filetype パラメーターは、 [Office の filetype](xref:office.Office.FileType)列挙型またはテキスト値を使用して指定できます。</span><span class="sxs-lookup"><span data-stu-id="ead19-158">The fileType parameter can be specified by using the [Office.FileType](xref:office.Office.FileType) enumeration or text values.</span></span> <span data-ttu-id="ead19-159">ただし、ホストによって可能な値は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="ead19-159">But the possible values vary with the host:</span></span>

      <span data-ttu-id="ead19-160">Windows デスクトップ、iPad、excel Online の場合:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-160">Excel for Windows desktop, iPad, and Excel Online: `Office.FileType.Compressed`</span></span>

      <span data-ttu-id="ead19-161">Excel for Mac:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-161">Excel for Mac: `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-162">, `Office.FileType.Pdf`</span><span class="sxs-lookup"><span data-stu-id="ead19-162"></span></span>

      <span data-ttu-id="ead19-163">powerpoint for Windows デスクトップ、Mac、iPad、powerpoint Online:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-163">PowerPoint for Windows desktop, Mac, iPad, and PowerPoint Online: `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-164">, `Office.FileType.Pdf`</span><span class="sxs-lookup"><span data-stu-id="ead19-164"></span></span>

      <span data-ttu-id="ead19-165">word for Windows デスクトップ、Mac、iPad、および word Online:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-165">Word for Windows desktop, Mac, iPad, and Word Online: `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-166">, `Office.FileType.Pdf`</span><span class="sxs-lookup"><span data-stu-id="ead19-166"></span></span><!-- --><span data-ttu-id="ead19-167">, `Office.FileType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-167"></span></span>

      #### <a name="examples"></a><span data-ttu-id="ead19-168">例</span><span class="sxs-lookup"><span data-stu-id="ead19-168">Examples</span></span>

      ```javascript
      // The following example gets the document in Office Open XML ("compressed") format in 65536 bytes (64 KB) slices.
      // Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.
      function getDocumentAsCompressed() {
          Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
              function (result) {
                  if (result.status == "succeeded") {
                  // If the getFileAsync call succeeded, then
                  // result.value will return a valid File Object.
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                  // Get the file slices.
                  getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
                  else {
                  app.showNotification("Error:", result.error.message);
                  }
          });
      }

      function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {
          file.getSliceAsync(nextSlice, function (sliceResult) {
              if (sliceResult.status == "succeeded") {
                  if (!gotAllSlices) { // Failed to get all slices, no need to continue.
                      return;
                  }

                  // Got one slice, store it in a temporary array.
                  // (Or you can do something else, such as
                  // send it to a third-party server.)
                  docdataSlices[sliceResult.value.index] = sliceResult.value.data;
                  if (++slicesReceived == sliceCount) {
                    // All slices have been received.
                    file.closeAsync();
                    onGotAllSlices(docdataSlices);
                  }
                  else {
                      getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
              }
                  else {
                      gotAllSlices = false;
                      file.closeAsync();
                      app.showNotification("getSliceAsync Error:", sliceResult.error.message);
                  }
          });
      }

      function onGotAllSlices(docdataSlices) {
          var docdata = [];
          for (var i = 0; i < docdataSlices.length; i++) {
              docdata = docdata.concat(docdataSlices[i]);
          }

          var fileContent = new String();
          for (var j = 0; j < docdata.length; j++) {
              fileContent += String.fromCharCode(docdata[j]);
          }

          // Now all the file content is stored in 'fileContent' variable,
          // you can do something with it, such as print, fax...
      }

      // The following example gets the document in PDF format.
      Office.context.document.getFileAsync(Office.FileType.Pdf,
          function(result) {
              if (result.status == "succeeded") {
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);
                  // Now, you can call getSliceAsync to download the files,
                  // as described in the previous code segment (compressed format).
                  
                  myFile.closeAsync();
              }
              else {
                  app.showNotification("Error:", result.error.message);
              }
      }
      );
      ```
    name: 'getFileAsync(fileType, options, callback)'
    fullName: 'getFileAsync(fileType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: <span data-ttu-id="ead19-169">ファイルが返される形式を指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-169">The format in which the file will be returned</span></span>
          type:
            - office.Office.FileType
        - id: options
          description: <span data-ttu-id="ead19-170">ドキュメントが分割されるスライスのサイズを設定するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-170">Provides options for setting the size of slices that the document will be divided into.</span></span>
          type:
            - office.Office.GetFileOptions
        - id: callback
          description: '<span data-ttu-id="ead19-171">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-171">Optional.</span></span> <span data-ttu-id="ead19-172">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-172">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-173">.</span><span class="sxs-lookup"><span data-stu-id="ead19-173"></span></span> <span data-ttu-id="ead19-174">result `value`のプロパティは、File オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="ead19-174">The `value` property of the result is the File object.</span></span>'
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: office.Office.Document.getFileAsync_1
    summary: '<span data-ttu-id="ead19-175">ドキュメント ファイル全体を、最大で 4194304 バイト (4 MB) のスライスに分割して返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-175">Returns the entire document file in slices of up to 4194304 bytes (4 MB).</span></span> <span data-ttu-id="ead19-176">iOS 用アドインの場合は、最大 65536 バイト (64 KB) のファイル スライスがサポートされます。</span><span class="sxs-lookup"><span data-stu-id="ead19-176">For add-ins for iOS, file slice is supported up to 65536 (64 KB).</span></span> <span data-ttu-id="ead19-177">許容された制限を超えてファイル スライスのサイズを指定すると、"内部エラー" が発生する点に注意してください。</span><span class="sxs-lookup"><span data-stu-id="ead19-177">Note that specifying file slice size of above permitted limit will result in an "Internal Error" failure.</span></span>'
    remarks: |-
      <span data-ttu-id="ead19-178">**要件セット**: [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (を使用する場合)`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-178">**Requirement sets**: [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (when using `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-179">)、[ファイル](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)</span><span class="sxs-lookup"><span data-stu-id="ead19-179">), [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)</span></span><!-- --><span data-ttu-id="ead19-180">、 [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (を使用する場合)`Office.FileType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-180">, [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (when using `Office.FileType.Text`</span></span><!-- --><span data-ttu-id="ead19-181">)</span><span class="sxs-lookup"><span data-stu-id="ead19-181"></span></span>

      <span data-ttu-id="ead19-182">office for iOS 以外の office ホストアプリケーションで実行されているアドインの場合、getFileAsync メソッドは最大4194304バイト (4 MB) のスライスでのファイルの取得をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="ead19-182">For add-ins running in Office host applications other than Office for iOS, the getFileAsync method supports getting files in slices of up to 4194304 bytes (4 MB).</span></span> <span data-ttu-id="ead19-183">iOS アプリ向けの Office で実行するアドインの場合、getFileAsync メソッドは最大 65536 バイト (64 KB) にスライスしたファイルの取得をサポートします。</span><span class="sxs-lookup"><span data-stu-id="ead19-183">For add-ins running in Office for iOS apps, the getFileAsync method supports getting files in slices of up to 65536 (64 KB).</span></span>

      <span data-ttu-id="ead19-184">filetype パラメーターは、 [Office の filetype](xref:office.Office.FileType)列挙型またはテキスト値を使用して指定できます。</span><span class="sxs-lookup"><span data-stu-id="ead19-184">The fileType parameter can be specified by using the [Office.FileType](xref:office.Office.FileType) enumeration or text values.</span></span> <span data-ttu-id="ead19-185">ただし、ホストによって可能な値は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="ead19-185">But the possible values vary with the host:</span></span>

      <span data-ttu-id="ead19-186">Windows デスクトップ、iPad、excel Online の場合:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-186">Excel for Windows desktop, iPad, and Excel Online: `Office.FileType.Compressed`</span></span>

      <span data-ttu-id="ead19-187">Excel for Mac:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-187">Excel for Mac: `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-188">, `Office.FileType.Pdf`</span><span class="sxs-lookup"><span data-stu-id="ead19-188"></span></span>

      <span data-ttu-id="ead19-189">powerpoint for Windows デスクトップ、Mac、iPad、powerpoint Online:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-189">PowerPoint for Windows desktop, Mac, iPad, and PowerPoint Online: `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-190">, `Office.FileType.Pdf`</span><span class="sxs-lookup"><span data-stu-id="ead19-190"></span></span>

      <span data-ttu-id="ead19-191">word for Windows デスクトップ、Mac、iPad、および word Online:`Office.FileType.Compressed`</span><span class="sxs-lookup"><span data-stu-id="ead19-191">Word for Windows desktop, Mac, iPad, and Word Online: `Office.FileType.Compressed`</span></span><!-- --><span data-ttu-id="ead19-192">, `Office.FileType.Pdf`</span><span class="sxs-lookup"><span data-stu-id="ead19-192"></span></span><!-- --><span data-ttu-id="ead19-193">, `Office.FileType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-193"></span></span>
    name: 'getFileAsync(fileType, callback)'
    fullName: 'getFileAsync(fileType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: <span data-ttu-id="ead19-194">ファイルが返される形式を指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-194">The format in which the file will be returned</span></span>
          type:
            - office.Office.FileType
        - id: callback
          description: '<span data-ttu-id="ead19-195">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-195">Optional.</span></span> <span data-ttu-id="ead19-196">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-196">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-197">.</span><span class="sxs-lookup"><span data-stu-id="ead19-197"></span></span> <span data-ttu-id="ead19-198">result `value`のプロパティは、File オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="ead19-198">The `value` property of the result is the File object.</span></span>'
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: office.Office.Document.getFilePropertiesAsync
    summary: <span data-ttu-id="ead19-199">現在のドキュメントのファイル プロパティを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-199">Gets file properties of the current document.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-200">**要件セット**:[セット内にない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span><span class="sxs-lookup"><span data-stu-id="ead19-200">**Requirement sets**: [Not in a set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span></span>

      <span data-ttu-id="ead19-201">url プロパティを使用して、ファイルの url を取得します。`asyncResult.value.url`</span><span class="sxs-lookup"><span data-stu-id="ead19-201">You get the file's URL with the url property `asyncResult.value.url`</span></span><!-- --><span data-ttu-id="ead19-202">.</span><span class="sxs-lookup"><span data-stu-id="ead19-202"></span></span>
    name: 'getFilePropertiesAsync(options, callback)'
    fullName: 'getFilePropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-203">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-203">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-204">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-204">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-205">.</span><span class="sxs-lookup"><span data-stu-id="ead19-205"></span></span> <span data-ttu-id="ead19-206">result `value`のプロパティは、ファイルのプロパティです (URL はにあります)。`asyncResult.value.url`</span><span class="sxs-lookup"><span data-stu-id="ead19-206">The `value` property of the result is the file''s properties (with the URL found at `asyncResult.value.url`</span></span><!-- --><span data-ttu-id="ead19-207">).</span><span class="sxs-lookup"><span data-stu-id="ead19-207"></span></span>'
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: office.Office.Document.getFilePropertiesAsync_1
    summary: <span data-ttu-id="ead19-208">現在のドキュメントのファイル プロパティを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-208">Gets file properties of the current document.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-209">**要件セット**:[セット内にない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span><span class="sxs-lookup"><span data-stu-id="ead19-209">**Requirement sets**: [Not in a set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span></span>

      <span data-ttu-id="ead19-210">url プロパティを使用して、ファイルの url を取得します。`asyncResult.value.url`</span><span class="sxs-lookup"><span data-stu-id="ead19-210">You get the file's URL with the url property `asyncResult.value.url`</span></span><!-- --><span data-ttu-id="ead19-211">.</span><span class="sxs-lookup"><span data-stu-id="ead19-211"></span></span>

      #### <a name="examples"></a><span data-ttu-id="ead19-212">例</span><span class="sxs-lookup"><span data-stu-id="ead19-212">Examples</span></span>

      ```javascript
      // To read the URL of the current file, you need to write a callback function that returns the URL.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that returns the value of the file's URL
      //    to the callback parameter of the getFilePropertiesAsync method.
      // 2. Display the value on the add-in's page.
      function getFileUrl() {
          // Get the URL of the current file.
          Office.context.document.getFilePropertiesAsync(function (asyncResult) {
              var fileUrl = asyncResult.value.url;
              if (fileUrl == "") {
                  showMessage("The file hasn't been saved yet. Save the file and try again");
              }
              else {
                  showMessage(fileUrl);
              }
          });
      }
      ```
    name: getFilePropertiesAsync(callback)
    fullName: getFilePropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-213">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-213">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-214">.</span><span class="sxs-lookup"><span data-stu-id="ead19-214"></span></span> <span data-ttu-id="ead19-215">result `value`のプロパティは、ファイルのプロパティです (URL はにあります)。`asyncResult.value.url`</span><span class="sxs-lookup"><span data-stu-id="ead19-215">The `value` property of the result is the file''s properties (with the URL found at `asyncResult.value.url`</span></span><!-- --><span data-ttu-id="ead19-216">).</span><span class="sxs-lookup"><span data-stu-id="ead19-216"></span></span>'
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: office.Office.Document.getMaxResourceIndexAsync
    summary: |-
      <span data-ttu-id="ead19-217">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-217">Project documents only.</span></span> <span data-ttu-id="ead19-218">現在のプロジェクト内のリソースのコレクションの最大インデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-218">Get the maximum index of the collection of resources in the current project.</span></span>

      <span data-ttu-id="ead19-219">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-219">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'getMaxResourceIndexAsync(options, callback)'
    fullName: 'getMaxResourceIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-220">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-220">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-221">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-221">Optional.</span></span> <span data-ttu-id="ead19-222">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-222">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-223">.</span><span class="sxs-lookup"><span data-stu-id="ead19-223"></span></span> <span data-ttu-id="ead19-224">結果`value`のプロパティは、現在のプロジェクトのリソースコレクションの最大インデックス番号です。</span><span class="sxs-lookup"><span data-stu-id="ead19-224">The `value` property of the result is the highest index number in the current project''s resource collection.</span></span>'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxResourceIndexAsync_1
    summary: |-
      <span data-ttu-id="ead19-225">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-225">Project documents only.</span></span> <span data-ttu-id="ead19-226">現在のプロジェクト内のリソースのコレクションの最大インデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-226">Get the maximum index of the collection of resources in the current project.</span></span>

      <span data-ttu-id="ead19-227">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-227">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: getMaxResourceIndexAsync(callback)
    fullName: getMaxResourceIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-228">例</span><span class="sxs-lookup"><span data-stu-id="ead19-228">Examples</span></span>

          ```javascript
          // The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection 
          // of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync
          // method to get each resource GUID. The example assumes that your add-in has a reference to the 
          // jQuery library and that the following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-229">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-229">Optional.</span></span> <span data-ttu-id="ead19-230">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-230">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-231">.</span><span class="sxs-lookup"><span data-stu-id="ead19-231"></span></span> <span data-ttu-id="ead19-232">結果`value`のプロパティは、現在のプロジェクトのリソースコレクションの最大インデックス番号です。</span><span class="sxs-lookup"><span data-stu-id="ead19-232">The `value` property of the result is the highest index number in the current project''s resource collection.</span></span>'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxTaskIndexAsync
    summary: |-
      <span data-ttu-id="ead19-233">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-233">Project documents only.</span></span> <span data-ttu-id="ead19-234">現在のプロジェクト内のタスクのコレクションの最大インデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-234">Get the maximum index of the collection of tasks in the current project.</span></span>

      <span data-ttu-id="ead19-235">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-235">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'getMaxTaskIndexAsync(options, callback)'
    fullName: 'getMaxTaskIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-236">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-236">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-237">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-237">Optional.</span></span> <span data-ttu-id="ead19-238">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-238">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-239">.</span><span class="sxs-lookup"><span data-stu-id="ead19-239"></span></span> <span data-ttu-id="ead19-240">結果`value`のプロパティは、現在のプロジェクトのタスクコレクションの最大インデックス番号です。</span><span class="sxs-lookup"><span data-stu-id="ead19-240">The `value` property of the result is the highest index number in the current project''s task collection.</span></span>'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxTaskIndexAsync_1
    summary: |-
      <span data-ttu-id="ead19-241">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-241">Project documents only.</span></span> <span data-ttu-id="ead19-242">現在のプロジェクト内のタスクのコレクションの最大インデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-242">Get the maximum index of the collection of tasks in the current project.</span></span>

      <span data-ttu-id="ead19-243">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-243">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: getMaxTaskIndexAsync(callback)
    fullName: getMaxTaskIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-244">例</span><span class="sxs-lookup"><span data-stu-id="ead19-244">Examples</span></span>

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the maximum index
          // of the collection of tasks in the current project. Then it uses the returned value
          // with the getTaskByIndexAsync method to get each task GUID.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-245">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-245">Optional.</span></span> <span data-ttu-id="ead19-246">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-246">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-247">.</span><span class="sxs-lookup"><span data-stu-id="ead19-247"></span></span> <span data-ttu-id="ead19-248">結果`value`のプロパティは、現在のプロジェクトのタスクコレクションの最大インデックス番号です。</span><span class="sxs-lookup"><span data-stu-id="ead19-248">The `value` property of the result is the highest index number in the current project''s task collection.</span></span>'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getProjectFieldAsync
    summary: <span data-ttu-id="ead19-249">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-249">Project documents only.</span></span> <span data-ttu-id="ead19-250">プロジェクトフィールドの取得 (例)</span><span class="sxs-lookup"><span data-stu-id="ead19-250">Get Project field (Ex.</span></span> <span data-ttu-id="ead19-251">projectwebaccessurl)。</span><span class="sxs-lookup"><span data-stu-id="ead19-251">ProjectWebAccessURL).</span></span>
    name: 'getProjectFieldAsync(fieldId, options, callback)'
    fullName: 'getProjectFieldAsync(fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: <span data-ttu-id="ead19-252">プロジェクトレベルのフィールド。</span><span class="sxs-lookup"><span data-stu-id="ead19-252">Project level fields.</span></span>
          type:
            - number
        - id: options
          description: '<span data-ttu-id="ead19-253">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-253">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-254">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-254">Optional.</span></span> <span data-ttu-id="ead19-255">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-255">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-256">.</span><span class="sxs-lookup"><span data-stu-id="ead19-256"></span></span> <span data-ttu-id="ead19-257">result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="ead19-257">The `value` property of the result contains the `fieldValue` property, which represents the value of the specified field.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getProjectFieldAsync_1
    summary: <span data-ttu-id="ead19-258">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-258">Project documents only.</span></span> <span data-ttu-id="ead19-259">プロジェクトフィールドの取得 (例)</span><span class="sxs-lookup"><span data-stu-id="ead19-259">Get Project field (Ex.</span></span> <span data-ttu-id="ead19-260">projectwebaccessurl)。</span><span class="sxs-lookup"><span data-stu-id="ead19-260">ProjectWebAccessURL).</span></span>
    name: 'getProjectFieldAsync(fieldId, callback)'
    fullName: 'getProjectFieldAsync(fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-261">例</span><span class="sxs-lookup"><span data-stu-id="ead19-261">Examples</span></span>

          ```javascript
          // The following code example gets the values of three specified fields for the active project, 
          // and then displays the values in the add-in.
          // The example calls getProjectFieldAsync recursively, after the previous call returns successfully.
          // It also tracks the calls to determine when all calls are sent.
          // The example assumes your add-in has a reference to the jQuery library and that the 
          // following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information for the active project.
                      getProjectInformation();
                  });
              };

              // Get the specified fields for the active project.
              function getProjectInformation() {
                  var fields =
                      [Office.ProjectProjectFields.Start, 
                       Office.ProjectProjectFields.Finish, 
                       Office.ProjectProjectFields.GUID];
                  var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == fields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }
                      else {
                          Office.context.document.getProjectFieldAsync(
                              fields[index],
                              function (result) {

                                  // If the call is successful, get the field value and then get the next field.
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: fieldId
          description: <span data-ttu-id="ead19-262">プロジェクトレベルのフィールド。</span><span class="sxs-lookup"><span data-stu-id="ead19-262">Project level fields.</span></span>
          type:
            - number
        - id: callback
          description: '<span data-ttu-id="ead19-263">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-263">Optional.</span></span> <span data-ttu-id="ead19-264">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-264">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-265">.</span><span class="sxs-lookup"><span data-stu-id="ead19-265"></span></span> <span data-ttu-id="ead19-266">result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="ead19-266">The `value` property of the result contains the `fieldValue` property, which represents the value of the specified field.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getResourceByIndexAsync
    summary: |-
      <span data-ttu-id="ead19-267">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-267">Project documents only.</span></span> <span data-ttu-id="ead19-268">リソースコレクション内の指定されたインデックスを持つリソースの GUID を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-268">Get the GUID of the resource that has the specified index in the resource collection.</span></span>

      <span data-ttu-id="ead19-269">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-269">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceIndex
          description: <span data-ttu-id="ead19-270">The index of the resource in the collection of resources for the project.</span><span class="sxs-lookup"><span data-stu-id="ead19-270">The index of the resource in the collection of resources for the project.</span></span>
          type:
            - number
        - id: options
          description: '<span data-ttu-id="ead19-271">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-271">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-272">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-272">Optional.</span></span> <span data-ttu-id="ead19-273">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-273">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-274">.</span><span class="sxs-lookup"><span data-stu-id="ead19-274"></span></span> <span data-ttu-id="ead19-275">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-275">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceByIndexAsync_1
    summary: |-
      <span data-ttu-id="ead19-276">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-276">Project documents only.</span></span> <span data-ttu-id="ead19-277">リソースコレクション内の指定されたインデックスを持つリソースの GUID を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-277">Get the GUID of the resource that has the specified index in the resource collection.</span></span>

      <span data-ttu-id="ead19-278">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-278">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'getResourceByIndexAsync(resourceIndex, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-279">例</span><span class="sxs-lookup"><span data-stu-id="ead19-279">Examples</span></span>

          ```javascript
          // The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource
          // collection, and then calls getResourceByIndexAsync to get the GUID for each resource.
          // The example assumes that your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceIndex
          description: <span data-ttu-id="ead19-280">The index of the resource in the collection of resources for the project.</span><span class="sxs-lookup"><span data-stu-id="ead19-280">The index of the resource in the collection of resources for the project.</span></span>
          type:
            - number
        - id: callback
          description: '<span data-ttu-id="ead19-281">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-281">Optional.</span></span> <span data-ttu-id="ead19-282">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-282">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-283">.</span><span class="sxs-lookup"><span data-stu-id="ead19-283"></span></span> <span data-ttu-id="ead19-284">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-284">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceFieldAsync
    summary: <span data-ttu-id="ead19-285">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-285">Project documents only.</span></span> <span data-ttu-id="ead19-286">提供されたリソース Id のリソースフィールドを取得します。 (例、)</span><span class="sxs-lookup"><span data-stu-id="ead19-286">Get resource field for provided resource Id. (Ex.ResourceName)</span></span>
    name: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: <span data-ttu-id="ead19-287">リソース Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-287">Either a string or value of the Resource Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-288">リソースフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-288">Resource Fields.</span></span>
          type:
            - number
        - id: options
          description: '<span data-ttu-id="ead19-289">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-289">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-290">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-290">Optional.</span></span> <span data-ttu-id="ead19-291">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-291">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-292">.</span><span class="sxs-lookup"><span data-stu-id="ead19-292"></span></span> <span data-ttu-id="ead19-293">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-293">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceFieldAsync_1
    summary: <span data-ttu-id="ead19-294">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-294">Project documents only.</span></span> <span data-ttu-id="ead19-295">提供されたリソース Id のリソースフィールドを取得します。 (例、)</span><span class="sxs-lookup"><span data-stu-id="ead19-295">Get resource field for provided resource Id. (Ex.ResourceName)</span></span>
    name: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-296">例</span><span class="sxs-lookup"><span data-stu-id="ead19-296">Examples</span></span>

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource
          // that's currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: <span data-ttu-id="ead19-297">リソース Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-297">Either a string or value of the Resource Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-298">リソースフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-298">Resource Fields.</span></span>
          type:
            - number
        - id: callback
          description: '<span data-ttu-id="ead19-299">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-299">Optional.</span></span> <span data-ttu-id="ead19-300">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-300">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-301">.</span><span class="sxs-lookup"><span data-stu-id="ead19-301"></span></span> <span data-ttu-id="ead19-302">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-302">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedDataAsync
    summary: <span data-ttu-id="ead19-303">ドキュメントの現在の選択範囲に含まれるデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="ead19-303">Reads the data contained in the current selection in the document.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-304">**要件セット**: [htmlcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)型 (を使用する場合)`Office.CoercionType.Html`</span><span class="sxs-lookup"><span data-stu-id="ead19-304">**Requirement sets**: [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (when using `Office.CoercionType.Html`</span></span><!-- --><span data-ttu-id="ead19-305">)、 [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用時)`Office.CoercionType.Matrix`</span><span class="sxs-lookup"><span data-stu-id="ead19-305">), [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (when using `Office.CoercionType.Matrix`</span></span><!-- --><span data-ttu-id="ead19-306">)、 [ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(使用時)`Office.CoercionType.Ooxml`</span><span class="sxs-lookup"><span data-stu-id="ead19-306">), [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (when using `Office.CoercionType.Ooxml`</span></span><!-- --><span data-ttu-id="ead19-307">)、[選択](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span><span class="sxs-lookup"><span data-stu-id="ead19-307">), [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span></span><!-- --><span data-ttu-id="ead19-308">、 [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (を使用する場合)`Office.CoercionType.Table`</span><span class="sxs-lookup"><span data-stu-id="ead19-308">, [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (when using `Office.CoercionType.Table`</span></span><!-- --><span data-ttu-id="ead19-309">)、 [textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (を使用する場合)`Office.CoercionType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-309">), [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (when using `Office.CoercionType.Text`</span></span><!-- --><span data-ttu-id="ead19-310">)</span><span class="sxs-lookup"><span data-stu-id="ead19-310"></span></span>

      <span data-ttu-id="ead19-311">getselecteddataasync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="ead19-311">In the callback function that is passed to the getSelectedDataAsync method, you can use the properties of the AsyncResult object to return the following information.</span></span>

      <table> <tr> <th><span data-ttu-id="ead19-312">プロパティ</span><span class="sxs-lookup"><span data-stu-id="ead19-312">Property</span></span></th> <th><span data-ttu-id="ead19-313">使用目的</span><span class="sxs-lookup"><span data-stu-id="ead19-313">Use to...</span></span></th> </tr> <tr> <td><span data-ttu-id="ead19-314">AsyncResult.value</span><span class="sxs-lookup"><span data-stu-id="ead19-314">AsyncResult.value</span></span></td> <td><span data-ttu-id="ead19-315">取得するオブジェクトまたはデータがないため、常に undefined を返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-315">Always returns undefined because there is no object or data to retrieve.</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-316">AsyncResult.status</span><span class="sxs-lookup"><span data-stu-id="ead19-316">AsyncResult.status</span></span></td> <td><span data-ttu-id="ead19-317">操作の成功または失敗を判断します。</span><span class="sxs-lookup"><span data-stu-id="ead19-317">Determine the success or failure of the operation.</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-318">AsyncResult.error</span><span class="sxs-lookup"><span data-stu-id="ead19-318">AsyncResult.error</span></span></td> <td><span data-ttu-id="ead19-319">操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="ead19-319">Access an Error object that provides error information if the operation failed.</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-320">AsyncResult.asyncContext</span><span class="sxs-lookup"><span data-stu-id="ead19-320">AsyncResult.asyncContext</span></span></td> <td><span data-ttu-id="ead19-321">変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</span><span class="sxs-lookup"><span data-stu-id="ead19-321">A user-defined item of any type that is returned in the AsyncResult object without being altered.</span></span></td> </tr> </table>

      <span data-ttu-id="ead19-322">[CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。</span><span class="sxs-lookup"><span data-stu-id="ead19-322">The possible values for the [Office.CoercionType](xref:office.Office.CoercionType) parameter vary by the host.</span></span>

      <table> <tr> <th><span data-ttu-id="ead19-323">ホスト</span><span class="sxs-lookup"><span data-stu-id="ead19-323">Host</span></span></th> <th><span data-ttu-id="ead19-324">サポートされる coercionType</span><span class="sxs-lookup"><span data-stu-id="ead19-324">Supported coercionType</span></span></th> </tr> <tr> <td><span data-ttu-id="ead19-325">Excel、PowerPoint、Project、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-325">Excel, PowerPoint, Project, and Word</span></span></td> <td><span data-ttu-id="ead19-326">`Office.CoercionType.Text`表す</span><span class="sxs-lookup"><span data-stu-id="ead19-326">`Office.CoercionType.Text` (string)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-327">Excel および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-327">Excel and Word</span></span></td> <td><span data-ttu-id="ead19-328">`Office.CoercionType.Matrix`(配列の配列)</span><span class="sxs-lookup"><span data-stu-id="ead19-328">`Office.CoercionType.Matrix` (array of arrays)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-329">Access、Excel、Word</span><span class="sxs-lookup"><span data-stu-id="ead19-329">Access, Excel, and Word</span></span></td> <td><span data-ttu-id="ead19-330">`Office.CoercionType.Table`(TableData オブジェクト)</span><span class="sxs-lookup"><span data-stu-id="ead19-330">`Office.CoercionType.Table` (TableData object)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-331">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-331">Word</span></span></td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td><span data-ttu-id="ead19-332">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-332">Word</span></span></td> <td><span data-ttu-id="ead19-333">`Office.CoercionType.Ooxml`(Office Open XML)</span><span class="sxs-lookup"><span data-stu-id="ead19-333">`Office.CoercionType.Ooxml` (Office Open XML)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-334">PowerPoint、PowerPoint Online</span><span class="sxs-lookup"><span data-stu-id="ead19-334">PowerPoint and PowerPoint Online</span></span></td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td><span data-ttu-id="ead19-335">Excel、PowerPoint、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-335">Excel, PowerPoint, and Word</span></span></td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a><span data-ttu-id="ead19-336">例</span><span class="sxs-lookup"><span data-stu-id="ead19-336">Examples</span></span>

      ```javascript
      // The following example uses the getSelectedDataAsync method of the Document object to retrieve the
      // user's current selection as text, and then display it in the add-in's page.

      // Display the user's current selection.
      function showSelection() {
          Office.context.document.getSelectedDataAsync(
              "text",                        // coercionType
              {valueFormat: "unformatted",   // valueFormat
              filterType: "all"},            // filterType
              function (result) {            // callback
                  var dataValue; 
                  dataValue = result.value;
                  write('Selected data is: ' + dataValue);
              });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To read the value of the current selection, you need to write a callback function that reads the selection.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that reads the value of the current selection
      //    to the callback parameter of the getSelectedDataAsync method.
      // 2. Read the selection as text, unformatted, and not filtered.
      // 3. Display the value on the add-in's page.
      function getText() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, 
              { valueFormat: "unformatted", filterType: "all" },
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  } 
                  else {
                      // Get selected data.
                      var dataValue = asyncResult.value; 
                      write('Selected data is ' + dataValue);
                  }            
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example gets the values of the selected cells. It uses the optional
      // asyncContext parameter to pass some text to the callback function.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page controls are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getSelectedText);
              });
          };

          // Get the text from the selected cells in the document, and display it in the add-in.
          function getSelectedText() {
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text,
                  {asyncContext: 'Some related info'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'Selected text: {0}<br/>Passed info: {1}',
                              result.value, result.asyncContext);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: <span data-ttu-id="ead19-337">返されるデータ構造の種類です。</span><span class="sxs-lookup"><span data-stu-id="ead19-337">The type of data structure to return.</span></span> <span data-ttu-id="ead19-338">各ホストでサポートされている強制型変換の種類については、「備考」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ead19-338">See the remarks section for each host's supported coercion types.</span></span>
          type:
            - office.Office.CoercionType
        - id: options
          description: <span data-ttu-id="ead19-339">返されるデータとその書式設定方法をカスタマイズするためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-339">Provides options for customizing what data is returned and how it is formatted.</span></span>
          type:
            - office.Office.GetSelectedDataOptions
        - id: callback
          description: '<span data-ttu-id="ead19-340">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-340">Optional.</span></span> <span data-ttu-id="ead19-341">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-341">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-342">.</span><span class="sxs-lookup"><span data-stu-id="ead19-342"></span></span> <span data-ttu-id="ead19-343">結果`value`のプロパティは、現在の選択範囲内のデータです。</span><span class="sxs-lookup"><span data-stu-id="ead19-343">The `value` property of the result is the data in the current selection.</span></span> <span data-ttu-id="ead19-344">これは、coercionType パラメーターで指定したデータ構造または形式で返されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-344">This is returned in the data structure or format you specified with the coercionType parameter.</span></span> <span data-ttu-id="ead19-345">(データの強制型変換の詳細については、「注釈」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="ead19-345">(See Remarks for more information about data coercion.)</span></span>'
          type:
            - '(result: AsyncResult<T>) => void'
  - uid: office.Office.Document.getSelectedDataAsync_1
    summary: <span data-ttu-id="ead19-346">ドキュメントの現在の選択範囲に含まれるデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="ead19-346">Reads the data contained in the current selection in the document.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-347">**要件セット**: [htmlcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)型 (を使用する場合)`Office.CoercionType.Html`</span><span class="sxs-lookup"><span data-stu-id="ead19-347">**Requirement sets**: [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (when using `Office.CoercionType.Html`</span></span><!-- --><span data-ttu-id="ead19-348">)、 [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用時)`Office.CoercionType.Matrix`</span><span class="sxs-lookup"><span data-stu-id="ead19-348">), [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (when using `Office.CoercionType.Matrix`</span></span><!-- --><span data-ttu-id="ead19-349">)、 [ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(使用時)`Office.CoercionType.Ooxml`</span><span class="sxs-lookup"><span data-stu-id="ead19-349">), [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (when using `Office.CoercionType.Ooxml`</span></span><!-- --><span data-ttu-id="ead19-350">)、[選択](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span><span class="sxs-lookup"><span data-stu-id="ead19-350">), [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span></span><!-- --><span data-ttu-id="ead19-351">、 [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (を使用する場合)`Office.CoercionType.Table`</span><span class="sxs-lookup"><span data-stu-id="ead19-351">, [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (when using `Office.CoercionType.Table`</span></span><!-- --><span data-ttu-id="ead19-352">)、 [textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (を使用する場合)`Office.CoercionType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-352">), [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (when using `Office.CoercionType.Text`</span></span><!-- --><span data-ttu-id="ead19-353">)</span><span class="sxs-lookup"><span data-stu-id="ead19-353"></span></span>

      <span data-ttu-id="ead19-354">getselecteddataasync メソッドに渡されるコールバック関数では、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="ead19-354">In the callback function that is passed to the getSelectedDataAsync method, you can use the properties of the AsyncResult object to return the following information.</span></span>

      <table> <tr> <th><span data-ttu-id="ead19-355">プロパティ</span><span class="sxs-lookup"><span data-stu-id="ead19-355">Property</span></span></th> <th><span data-ttu-id="ead19-356">使用目的</span><span class="sxs-lookup"><span data-stu-id="ead19-356">Use to...</span></span></th> </tr> <tr> <td><span data-ttu-id="ead19-357">AsyncResult.value</span><span class="sxs-lookup"><span data-stu-id="ead19-357">AsyncResult.value</span></span></td> <td><span data-ttu-id="ead19-358">取得するオブジェクトまたはデータがないため、常に undefined を返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-358">Always returns undefined because there is no object or data to retrieve.</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-359">AsyncResult.status</span><span class="sxs-lookup"><span data-stu-id="ead19-359">AsyncResult.status</span></span></td> <td><span data-ttu-id="ead19-360">操作の成功または失敗を判断します。</span><span class="sxs-lookup"><span data-stu-id="ead19-360">Determine the success or failure of the operation.</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-361">AsyncResult.error</span><span class="sxs-lookup"><span data-stu-id="ead19-361">AsyncResult.error</span></span></td> <td><span data-ttu-id="ead19-362">操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="ead19-362">Access an Error object that provides error information if the operation failed.</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-363">AsyncResult.asyncContext</span><span class="sxs-lookup"><span data-stu-id="ead19-363">AsyncResult.asyncContext</span></span></td> <td><span data-ttu-id="ead19-364">変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</span><span class="sxs-lookup"><span data-stu-id="ead19-364">A user-defined item of any type that is returned in the AsyncResult object without being altered.</span></span></td> </tr> </table>

      <span data-ttu-id="ead19-365">[CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。</span><span class="sxs-lookup"><span data-stu-id="ead19-365">The possible values for the [Office.CoercionType](xref:office.Office.CoercionType) parameter vary by the host.</span></span>

      <table> <tr> <th><span data-ttu-id="ead19-366">ホスト</span><span class="sxs-lookup"><span data-stu-id="ead19-366">Host</span></span></th> <th><span data-ttu-id="ead19-367">サポートされる coercionType</span><span class="sxs-lookup"><span data-stu-id="ead19-367">Supported coercionType</span></span></th> </tr> <tr> <td><span data-ttu-id="ead19-368">Excel、PowerPoint、Project、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-368">Excel, PowerPoint, Project, and Word</span></span></td> <td><span data-ttu-id="ead19-369">`Office.CoercionType.Text`表す</span><span class="sxs-lookup"><span data-stu-id="ead19-369">`Office.CoercionType.Text` (string)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-370">Excel および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-370">Excel and Word</span></span></td> <td><span data-ttu-id="ead19-371">`Office.CoercionType.Matrix`(配列の配列)</span><span class="sxs-lookup"><span data-stu-id="ead19-371">`Office.CoercionType.Matrix` (array of arrays)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-372">Access、Excel、Word</span><span class="sxs-lookup"><span data-stu-id="ead19-372">Access, Excel, and Word</span></span></td> <td><span data-ttu-id="ead19-373">`Office.CoercionType.Table`(TableData オブジェクト)</span><span class="sxs-lookup"><span data-stu-id="ead19-373">`Office.CoercionType.Table` (TableData object)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-374">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-374">Word</span></span></td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td><span data-ttu-id="ead19-375">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-375">Word</span></span></td> <td><span data-ttu-id="ead19-376">`Office.CoercionType.Ooxml`(Office Open XML)</span><span class="sxs-lookup"><span data-stu-id="ead19-376">`Office.CoercionType.Ooxml` (Office Open XML)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-377">PowerPoint、PowerPoint Online</span><span class="sxs-lookup"><span data-stu-id="ead19-377">PowerPoint and PowerPoint Online</span></span></td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td><span data-ttu-id="ead19-378">Excel、PowerPoint、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-378">Excel, PowerPoint, and Word</span></span></td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: <span data-ttu-id="ead19-379">返されるデータ構造の種類です。</span><span class="sxs-lookup"><span data-stu-id="ead19-379">The type of data structure to return.</span></span> <span data-ttu-id="ead19-380">各ホストでサポートされている強制型変換の種類については、「備考」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ead19-380">See the remarks section for each host's supported coercion types.</span></span>
          type:
            - office.Office.CoercionType
        - id: callback
          description: '<span data-ttu-id="ead19-381">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-381">Optional.</span></span> <span data-ttu-id="ead19-382">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-382">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-383">.</span><span class="sxs-lookup"><span data-stu-id="ead19-383"></span></span> <span data-ttu-id="ead19-384">結果`value`のプロパティは、現在の選択範囲内のデータです。</span><span class="sxs-lookup"><span data-stu-id="ead19-384">The `value` property of the result is the data in the current selection.</span></span> <span data-ttu-id="ead19-385">これは、coercionType パラメーターで指定したデータ構造または形式で返されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-385">This is returned in the data structure or format you specified with the coercionType parameter.</span></span> <span data-ttu-id="ead19-386">(データの強制型変換の詳細については、「注釈」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="ead19-386">(See Remarks for more information about data coercion.)</span></span>'
          type:
            - '(result: AsyncResult<T>) => void'
  - uid: office.Office.Document.getSelectedResourceAsync
    summary: <span data-ttu-id="ead19-387">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-387">Project documents only.</span></span> <span data-ttu-id="ead19-388">現在選択されているリソースの Id を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-388">Get the current selected Resource's Id.</span></span>
    name: 'getSelectedResourceAsync(options, callback)'
    fullName: 'getSelectedResourceAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-389">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-389">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-390">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-390">Optional.</span></span> <span data-ttu-id="ead19-391">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-391">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-392">.</span><span class="sxs-lookup"><span data-stu-id="ead19-392"></span></span> <span data-ttu-id="ead19-393">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-393">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedResourceAsync_1
    summary: <span data-ttu-id="ead19-394">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-394">Project documents only.</span></span> <span data-ttu-id="ead19-395">現在選択されているリソースの Id を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-395">Get the current selected Resource's Id.</span></span>
    name: getSelectedResourceAsync(callback)
    fullName: getSelectedResourceAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-396">例</span><span class="sxs-lookup"><span data-stu-id="ead19-396">Examples</span></span>

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's 
          // currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page controls are
          // defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-397">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-397">Optional.</span></span> <span data-ttu-id="ead19-398">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-398">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-399">.</span><span class="sxs-lookup"><span data-stu-id="ead19-399"></span></span> <span data-ttu-id="ead19-400">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-400">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedTaskAsync
    summary: <span data-ttu-id="ead19-401">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-401">Project documents only.</span></span> <span data-ttu-id="ead19-402">現在選択されているタスクの Id を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-402">Get the current selected Task's Id.</span></span>
    name: 'getSelectedTaskAsync(options, callback)'
    fullName: 'getSelectedTaskAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-403">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-403">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-404">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-404">Optional.</span></span> <span data-ttu-id="ead19-405">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-405">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-406">.</span><span class="sxs-lookup"><span data-stu-id="ead19-406"></span></span> <span data-ttu-id="ead19-407">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-407">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedTaskAsync_1
    summary: <span data-ttu-id="ead19-408">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-408">Project documents only.</span></span> <span data-ttu-id="ead19-409">現在選択されているタスクの Id を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-409">Get the current selected Task's Id.</span></span>
    name: getSelectedTaskAsync(callback)
    fullName: getSelectedTaskAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-410">例</span><span class="sxs-lookup"><span data-stu-id="ead19-410">Examples</span></span>

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets task properties by calling getTaskAsync.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-411">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-411">Optional.</span></span> <span data-ttu-id="ead19-412">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-412">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-413">.</span><span class="sxs-lookup"><span data-stu-id="ead19-413"></span></span> <span data-ttu-id="ead19-414">result `value`のプロパティは、文字列としてのリソースの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-414">The `value` property of the result is the GUID of the resource as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedViewAsync
    summary: <span data-ttu-id="ead19-415">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-415">Project documents only.</span></span> <span data-ttu-id="ead19-416">現在選択されているビューの種類 (例) を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-416">Get the current selected View Type (Ex.</span></span> <span data-ttu-id="ead19-417">ガント) とビュー名。</span><span class="sxs-lookup"><span data-stu-id="ead19-417">Gantt) and View Name.</span></span>
    name: 'getSelectedViewAsync(options, callback)'
    fullName: 'getSelectedViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-418">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-418">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-419">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-419">Optional.</span></span> <span data-ttu-id="ead19-420">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-420">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-421">.</span><span class="sxs-lookup"><span data-stu-id="ead19-421"></span></span> <span data-ttu-id="ead19-422">result `value`のプロパティには、次のプロパティが`viewName`含まれます:-ビューの名前 (projectviewtypes 定数)。</span><span class="sxs-lookup"><span data-stu-id="ead19-422">The `value` property of the result contains the following properties: `viewName` - The name of the view, as a ProjectViewTypes constant.</span></span> <span data-ttu-id="ead19-423">`viewType`-ビューの種類 (projectviewtypes 定数の整数値として)。</span><span class="sxs-lookup"><span data-stu-id="ead19-423">`viewType` - The type of view, as the integer value of a ProjectViewTypes constant.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getSelectedViewAsync_1
    summary: <span data-ttu-id="ead19-424">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-424">Project documents only.</span></span> <span data-ttu-id="ead19-425">現在選択されているビューの種類 (例) を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-425">Get the current selected View Type (Ex.</span></span> <span data-ttu-id="ead19-426">ガント) とビュー名。</span><span class="sxs-lookup"><span data-stu-id="ead19-426">Gantt) and View Name.</span></span>
    name: getSelectedViewAsync(callback)
    fullName: getSelectedViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-427">例</span><span class="sxs-lookup"><span data-stu-id="ead19-427">Examples</span></span>

          ```javascript
          // The following code example calls adds a ViewSelectionChanged event handler that
          // calls getSelectedViewAsync to get the name and type of the active view in the document.
          // The example assumes your add-in has a reference to the jQuery library and that
          // the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      Office.context.document.addHandlerAsync(
                          Office.EventType.ViewSelectionChanged,
                          getActiveView);
                      getActiveView();
                  });
              };

              // Get the active view's name and type.
              function getActiveView() {
                  Office.context.document.getSelectedViewAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var output = String.format(
                                  'View name: {0}<br/>View type: {1}',
                                  result.value.viewName, viewType);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-428">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-428">Optional.</span></span> <span data-ttu-id="ead19-429">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-429">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-430">.</span><span class="sxs-lookup"><span data-stu-id="ead19-430"></span></span> <span data-ttu-id="ead19-431">result `value`のプロパティには、次のプロパティが`viewName`含まれます:-ビューの名前 (projectviewtypes 定数)。</span><span class="sxs-lookup"><span data-stu-id="ead19-431">The `value` property of the result contains the following properties: `viewName` - The name of the view, as a ProjectViewTypes constant.</span></span> <span data-ttu-id="ead19-432">`viewType`-ビューの種類 (projectviewtypes 定数の整数値として)。</span><span class="sxs-lookup"><span data-stu-id="ead19-432">`viewType` - The type of view, as the integer value of a ProjectViewTypes constant.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskAsync
    summary: '<span data-ttu-id="ead19-433">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-433">Project documents only.</span></span> <span data-ttu-id="ead19-434">指定した taskId のタスク名、WSS タスク Id、および ResourceNames を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-434">Get the Task Name, WSS Task Id, and ResourceNames for given taskId.</span></span>'
    name: 'getTaskAsync(taskId, options, callback)'
    fullName: 'getTaskAsync(taskId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: <span data-ttu-id="ead19-435">タスク Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-435">Either a string or value of the Task Id.</span></span>
          type:
            - string
        - id: options
          description: '<span data-ttu-id="ead19-436">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-436">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-437">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-437">Optional.</span></span> <span data-ttu-id="ead19-438">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-438">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-439">.</span><span class="sxs-lookup"><span data-stu-id="ead19-439"></span></span> <span data-ttu-id="ead19-440">result `value`のプロパティには、次のプロパティが`taskName`含まれます:-タスクの名前。</span><span class="sxs-lookup"><span data-stu-id="ead19-440">The `value` property of the result contains the following properties: `taskName` - The name of the task.</span></span> <span data-ttu-id="ead19-441">`wssTaskId`-同期された SharePoint タスクリスト内のタスクの ID。</span><span class="sxs-lookup"><span data-stu-id="ead19-441">`wssTaskId` - The ID of the task in the synchronized SharePoint task list.</span></span> <span data-ttu-id="ead19-442">プロジェクトが SharePoint タスク リストと同期されていない場合、値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="ead19-442">If the project is not synchronized with a SharePoint task list, the value is 0.</span></span> <span data-ttu-id="ead19-443">`resourceNames`-タスクに割り当てられているリソースの名前のコンマ区切りのリスト。</span><span class="sxs-lookup"><span data-stu-id="ead19-443">`resourceNames` - The comma-separated list of the names of resources that are assigned to the task.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskAsync_1
    summary: '<span data-ttu-id="ead19-444">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-444">Project documents only.</span></span> <span data-ttu-id="ead19-445">指定した taskId のタスク名、WSS タスク Id、および ResourceNames を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-445">Get the Task Name, WSS Task Id, and ResourceNames for given taskId.</span></span>'
    name: 'getTaskAsync(taskId, callback)'
    fullName: 'getTaskAsync(taskId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-446">例</span><span class="sxs-lookup"><span data-stu-id="ead19-446">Examples</span></span>

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the task GUID of the currently
          // selected task. Then it calls getTaskAsync to get the properties for the task that are
          // available from the JavaScript API for Office.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: <span data-ttu-id="ead19-447">タスク Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-447">Either a string or value of the Task Id.</span></span>
          type:
            - string
        - id: callback
          description: '<span data-ttu-id="ead19-448">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-448">Optional.</span></span> <span data-ttu-id="ead19-449">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-449">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-450">.</span><span class="sxs-lookup"><span data-stu-id="ead19-450"></span></span> <span data-ttu-id="ead19-451">result `value`のプロパティには、次のプロパティが`taskName`含まれます:-タスクの名前。</span><span class="sxs-lookup"><span data-stu-id="ead19-451">The `value` property of the result contains the following properties: `taskName` - The name of the task.</span></span> <span data-ttu-id="ead19-452">`wssTaskId`-同期された SharePoint タスクリスト内のタスクの ID。</span><span class="sxs-lookup"><span data-stu-id="ead19-452">`wssTaskId` - The ID of the task in the synchronized SharePoint task list.</span></span> <span data-ttu-id="ead19-453">プロジェクトが SharePoint タスク リストと同期されていない場合、値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="ead19-453">If the project is not synchronized with a SharePoint task list, the value is 0.</span></span> <span data-ttu-id="ead19-454">`resourceNames`-タスクに割り当てられているリソースの名前のコンマ区切りのリスト。</span><span class="sxs-lookup"><span data-stu-id="ead19-454">`resourceNames` - The comma-separated list of the names of resources that are assigned to the task.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskByIndexAsync
    summary: |-
      <span data-ttu-id="ead19-455">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-455">Project documents only.</span></span> <span data-ttu-id="ead19-456">タスクコレクション内の指定されたインデックスを持つタスクの GUID を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-456">Get the GUID of the task that has the specified index in the task collection.</span></span>

      <span data-ttu-id="ead19-457">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-457">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'getTaskByIndexAsync(taskIndex, options, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskIndex
          description: <span data-ttu-id="ead19-458">The index of the task in the collection of tasks for the project.</span><span class="sxs-lookup"><span data-stu-id="ead19-458">The index of the task in the collection of tasks for the project.</span></span>
          type:
            - number
        - id: options
          description: '<span data-ttu-id="ead19-459">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-459">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-460">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-460">Optional.</span></span> <span data-ttu-id="ead19-461">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-461">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-462">.</span><span class="sxs-lookup"><span data-stu-id="ead19-462"></span></span> <span data-ttu-id="ead19-463">結果`value`のプロパティは、文字列としてのタスクの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-463">The `value` property of the result is the GUID of the task as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getTaskByIndexAsync_1
    summary: |-
      <span data-ttu-id="ead19-464">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-464">Project documents only.</span></span> <span data-ttu-id="ead19-465">タスクコレクション内の指定されたインデックスを持つタスクの GUID を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-465">Get the GUID of the task that has the specified index in the task collection.</span></span>

      <span data-ttu-id="ead19-466">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-466">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'getTaskByIndexAsync(taskIndex, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-467">例</span><span class="sxs-lookup"><span data-stu-id="ead19-467">Examples</span></span>

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the
          // maximum index in the project's task collection, and then
          // calls getTaskByIndexAsync to get the GUID for each task.
          // The example assumes that your add-in has a reference to the
          // jQuery library and that the following page controls are defined
          // in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskIndex
          description: <span data-ttu-id="ead19-468">The index of the task in the collection of tasks for the project.</span><span class="sxs-lookup"><span data-stu-id="ead19-468">The index of the task in the collection of tasks for the project.</span></span>
          type:
            - number
        - id: callback
          description: '<span data-ttu-id="ead19-469">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-469">Optional.</span></span> <span data-ttu-id="ead19-470">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-470">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-471">.</span><span class="sxs-lookup"><span data-stu-id="ead19-471"></span></span> <span data-ttu-id="ead19-472">結果`value`のプロパティは、文字列としてのタスクの GUID です。</span><span class="sxs-lookup"><span data-stu-id="ead19-472">The `value` property of the result is the GUID of the task as a string.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getTaskFieldAsync
    summary: <span data-ttu-id="ead19-473">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-473">Project documents only.</span></span> <span data-ttu-id="ead19-474">提供されたタスク Id のタスクフィールドを取得します。 (例</span><span class="sxs-lookup"><span data-stu-id="ead19-474">Get task field for provided task Id. (Ex.</span></span> <span data-ttu-id="ead19-475">StartDate)。</span><span class="sxs-lookup"><span data-stu-id="ead19-475">StartDate).</span></span>
    name: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: <span data-ttu-id="ead19-476">タスク Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-476">Either a string or value of the Task Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-477">タスクフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-477">Task Fields.</span></span>
          type:
            - number
        - id: options
          description: '<span data-ttu-id="ead19-478">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-478">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-479">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-479">Optional.</span></span> <span data-ttu-id="ead19-480">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-480">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-481">.</span><span class="sxs-lookup"><span data-stu-id="ead19-481"></span></span> <span data-ttu-id="ead19-482">result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="ead19-482">The `value` property of the result contains the `fieldValue` property, which represents the value of the specified field.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskFieldAsync_1
    summary: <span data-ttu-id="ead19-483">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-483">Project documents only.</span></span> <span data-ttu-id="ead19-484">提供されたタスク Id のタスクフィールドを取得します。 (例</span><span class="sxs-lookup"><span data-stu-id="ead19-484">Get task field for provided task Id. (Ex.</span></span> <span data-ttu-id="ead19-485">StartDate)。</span><span class="sxs-lookup"><span data-stu-id="ead19-485">StartDate).</span></span>
    name: 'getTaskFieldAsync(taskId, fieldId, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-486">例</span><span class="sxs-lookup"><span data-stu-id="ead19-486">Examples</span></span>

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected task.
              function getTaskFields(taskGuid) {
                  var output = '';
                  var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];
                  var fieldValues = ['Priority: ', '% Complete: '];
                  var index = 0;
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // Get the field value. If the call is successful, then get the next field.
                      else {
                          Office.context.document.getTaskFieldAsync(
                              taskGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: <span data-ttu-id="ead19-487">タスク Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-487">Either a string or value of the Task Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-488">タスクフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-488">Task Fields.</span></span>
          type:
            - number
        - id: callback
          description: '<span data-ttu-id="ead19-489">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-489">Optional.</span></span> <span data-ttu-id="ead19-490">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-490">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-491">.</span><span class="sxs-lookup"><span data-stu-id="ead19-491"></span></span> <span data-ttu-id="ead19-492">result `value`のプロパティには、指定`fieldValue`されたフィールドの値を表すプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="ead19-492">The `value` property of the result contains the `fieldValue` property, which represents the value of the specified field.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getWSSUrlAsync
    summary: '<span data-ttu-id="ead19-493">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-493">Project documents only.</span></span> <span data-ttu-id="ead19-494">タスクリストの WSS Url とリスト名を取得します。 MPP も同期されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-494">Get the WSS Url and list name for the Tasks List, the MPP is synced too.</span></span>'
    name: 'getWSSUrlAsync(options, callback)'
    fullName: 'getWSSUrlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="ead19-495">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-495">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-496">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-496">Optional.</span></span> <span data-ttu-id="ead19-497">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-497">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-498">.</span><span class="sxs-lookup"><span data-stu-id="ead19-498"></span></span> <span data-ttu-id="ead19-499">結果`value`のプロパティには、次のプロパティが`listName`含まれます:-同期された SharePoint タスクリストの名前。</span><span class="sxs-lookup"><span data-stu-id="ead19-499">The `value` property of the result contains the following properties: `listName` - the name of the synchronized SharePoint task list.</span></span> <span data-ttu-id="ead19-500">`serverUrl`-同期された SharePoint タスクリストの URL。</span><span class="sxs-lookup"><span data-stu-id="ead19-500">`serverUrl` - the URL of the synchronized SharePoint task list.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getWSSUrlAsync_1
    summary: '<span data-ttu-id="ead19-501">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-501">Project documents only.</span></span> <span data-ttu-id="ead19-502">タスクリストの WSS Url とリスト名を取得します。 MPP も同期されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-502">Get the WSS Url and list name for the Tasks List, the MPP is synced too.</span></span>'
    name: getWSSUrlAsync(callback)
    fullName: getWSSUrlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="ead19-503">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-503">Optional.</span></span> <span data-ttu-id="ead19-504">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-504">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-505">.</span><span class="sxs-lookup"><span data-stu-id="ead19-505"></span></span> <span data-ttu-id="ead19-506">結果`value`のプロパティには、次のプロパティが`listName`含まれます:-同期された SharePoint タスクリストの名前。</span><span class="sxs-lookup"><span data-stu-id="ead19-506">The `value` property of the result contains the following properties: `listName` - the name of the synchronized SharePoint task list.</span></span> <span data-ttu-id="ead19-507">`serverUrl`-同期された SharePoint タスクリストの URL。</span><span class="sxs-lookup"><span data-stu-id="ead19-507">`serverUrl` - the URL of the synchronized SharePoint task list.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.goToByIdAsync
    summary: <span data-ttu-id="ead19-508">ドキュメント内の指定されたオブジェクトまたは場所に移動します。</span><span class="sxs-lookup"><span data-stu-id="ead19-508">Goes to the specified object or location in the document.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-509">**要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span><span class="sxs-lookup"><span data-stu-id="ead19-509">**Requirement set**: [Not in a set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span></span>

      <span data-ttu-id="ead19-510">PowerPoint では、マスター表示で document.gotobyidasync メソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="ead19-510">PowerPoint doesn't support the goToByIdAsync method in Master Views.</span></span>

      <span data-ttu-id="ead19-511">selectionMode オプションが原因で発生する動作は、ホストによって異なります。</span><span class="sxs-lookup"><span data-stu-id="ead19-511">The behavior caused by the selectionMode option varies by host:</span></span>

      <span data-ttu-id="ead19-512">Excel の場合`Office.SelectionMode.Selected` : バインド内のすべてのコンテンツ、または名前付きアイテムを選択します。</span><span class="sxs-lookup"><span data-stu-id="ead19-512">In Excel: `Office.SelectionMode.Selected` selects all content in the binding, or named item.</span></span> <span data-ttu-id="ead19-513">Office.SelectionMode.None では、テキスト バインドの場合は、セルを選択します。マトリックス バインド、テーブル バインド、および名前付きアイテムの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。</span><span class="sxs-lookup"><span data-stu-id="ead19-513">Office.SelectionMode.None for text bindings, selects the cell; for matrix bindings, table bindings, and named items, selects the first data cell (not first cell in header row for tables).</span></span>

      <span data-ttu-id="ead19-514">PowerPoint では`Office.SelectionMode.Selected` 、スライドのタイトルまたは最初のテキストボックスを選択します。</span><span class="sxs-lookup"><span data-stu-id="ead19-514">In PowerPoint: `Office.SelectionMode.Selected` selects the slide title or first textbox on the slide.</span></span> <span data-ttu-id="ead19-515">`Office.SelectionMode.None`何も選択しません。</span><span class="sxs-lookup"><span data-stu-id="ead19-515">`Office.SelectionMode.None` doesn't select anything.</span></span>

      <span data-ttu-id="ead19-516">Word では`Office.SelectionMode.Selected` 、バインド内のすべてのコンテンツを選択します。</span><span class="sxs-lookup"><span data-stu-id="ead19-516">In Word: `Office.SelectionMode.Selected` selects all content in the binding.</span></span> <span data-ttu-id="ead19-517">Office.SelectionMode.None では、テキスト バインドの場合はテキストの最初までカーソルを移動します。マトリックス バインドとテーブル バインドの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。</span><span class="sxs-lookup"><span data-stu-id="ead19-517">Office.SelectionMode.None for text bindings, moves the cursor to the beginning of the text; for matrix bindings and table bindings, selects the first data cell (not first cell in header row for tables).</span></span>
    name: 'goToByIdAsync(id, goToType, options, callback)'
    fullName: 'goToByIdAsync(id, goToType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="ead19-518">移動先のオブジェクトまたは場所の識別子です。</span><span class="sxs-lookup"><span data-stu-id="ead19-518">The identifier of the object or location to go to.</span></span>
          type:
            - string | number
        - id: goToType
          description: <span data-ttu-id="ead19-519">移動先の場所の型です。</span><span class="sxs-lookup"><span data-stu-id="ead19-519">The type of the location to go to.</span></span>
          type:
            - office.Office.GoToType
        - id: options
          description: <span data-ttu-id="ead19-520">移動先の場所を選択するかどうかのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-520">Provides options for whether to select the location that is navigated to.</span></span>
          type:
            - office.Office.GoToByIdOptions
        - id: callback
          description: '<span data-ttu-id="ead19-521">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-521">Optional.</span></span> <span data-ttu-id="ead19-522">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-522">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-523">.</span><span class="sxs-lookup"><span data-stu-id="ead19-523"></span></span> <span data-ttu-id="ead19-524">結果`value`のプロパティは現在のビューです。</span><span class="sxs-lookup"><span data-stu-id="ead19-524">The `value` property of the result is the current view.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.goToByIdAsync_1
    summary: <span data-ttu-id="ead19-525">ドキュメント内の指定されたオブジェクトまたは場所に移動します。</span><span class="sxs-lookup"><span data-stu-id="ead19-525">Goes to the specified object or location in the document.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-526">**要件セット**:[セットに含まれない](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span><span class="sxs-lookup"><span data-stu-id="ead19-526">**Requirement set**: [Not in a set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)</span></span>

      <span data-ttu-id="ead19-527">PowerPoint では、マスター表示で document.gotobyidasync メソッドはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="ead19-527">PowerPoint doesn't support the goToByIdAsync method in Master Views.</span></span>

      <span data-ttu-id="ead19-528">selectionMode オプションが原因で発生する動作は、ホストによって異なります。</span><span class="sxs-lookup"><span data-stu-id="ead19-528">The behavior caused by the selectionMode option varies by host:</span></span>

      <span data-ttu-id="ead19-529">Excel の場合`Office.SelectionMode.Selected` : バインド内のすべてのコンテンツ、または名前付きアイテムを選択します。</span><span class="sxs-lookup"><span data-stu-id="ead19-529">In Excel: `Office.SelectionMode.Selected` selects all content in the binding, or named item.</span></span> <span data-ttu-id="ead19-530">Office.SelectionMode.None では、テキスト バインドの場合は、セルを選択します。マトリックス バインド、テーブル バインド、および名前付きアイテムの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。</span><span class="sxs-lookup"><span data-stu-id="ead19-530">Office.SelectionMode.None for text bindings, selects the cell; for matrix bindings, table bindings, and named items, selects the first data cell (not first cell in header row for tables).</span></span>

      <span data-ttu-id="ead19-531">PowerPoint では`Office.SelectionMode.Selected` 、スライドのタイトルまたは最初のテキストボックスを選択します。</span><span class="sxs-lookup"><span data-stu-id="ead19-531">In PowerPoint: `Office.SelectionMode.Selected` selects the slide title or first textbox on the slide.</span></span> <span data-ttu-id="ead19-532">`Office.SelectionMode.None`何も選択しません。</span><span class="sxs-lookup"><span data-stu-id="ead19-532">`Office.SelectionMode.None` doesn't select anything.</span></span>

      <span data-ttu-id="ead19-533">Word では`Office.SelectionMode.Selected` 、バインド内のすべてのコンテンツを選択します。</span><span class="sxs-lookup"><span data-stu-id="ead19-533">In Word: `Office.SelectionMode.Selected` selects all content in the binding.</span></span> <span data-ttu-id="ead19-534">Office.SelectionMode.None では、テキスト バインドの場合はテキストの最初までカーソルを移動します。マトリックス バインドとテーブル バインドの場合は、最初のデータ セルを選択します (テーブルの見出し行の最初のセルではありません)。</span><span class="sxs-lookup"><span data-stu-id="ead19-534">Office.SelectionMode.None for text bindings, moves the cursor to the beginning of the text; for matrix bindings and table bindings, selects the first data cell (not first cell in header row for tables).</span></span>

      #### <a name="examples"></a><span data-ttu-id="ead19-535">例</span><span class="sxs-lookup"><span data-stu-id="ead19-535">Examples</span></span>

      ```javascript
      // Go to a binding by id (Word and Excel)
      // The following example shows how to:
      // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.
      // 2. Specify that binding as the binding to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value on the add-in's page.
      function gotoBinding() {
          // Create a new table binding for the selected table.
          Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
          if (asyncResult.status == "failed") {
                    showMessage("Action failed with error: " + asyncResult.error.message);
                }
                else {
                    showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
                }
          });

          // Go to binding by id.
          Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to a table in a spreadsheet (Excel)
      // The following example shows how to:
      // 1. Specify a table by name as the table to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToTable() {
          Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to the currently selected slide by id (PowerPoint)
      // The following example shows how to:
      // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.
      // 2. Specify the returned id as the slide to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value of the stringified JSON object returned by asyncResult.value,
      //    which contains information about the selected slides, on the add-in's page.
      var firstSlideId = 0;
      function gotoSelectedSlide() {
          //Get currently selected slide's id
          Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  firstSlideId = asyncResult.value.slides[0].id;
                  app.showNotification(JSON.stringify(asyncResult.value));
              }
          });
          //Go to slide by id.
          Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  app.showNotification("Navigation successful");
              }
          });
      }

      // Go to slide by index (PowerPoint)
      // The following example shows how to:
      // 1. Specify the index of the first, last, previous, or next slide to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToSlideByIndex() {
          var goToFirst = Office.Index.First;
          var goToLast = Office.Index.Last;
          var goToPrevious = Office.Index.Previous;
          var goToNext = Office.Index.Next;

          Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }
      ```
    name: 'goToByIdAsync(id, goToType, callback)'
    fullName: 'goToByIdAsync(id, goToType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="ead19-536">移動先のオブジェクトまたは場所の識別子です。</span><span class="sxs-lookup"><span data-stu-id="ead19-536">The identifier of the object or location to go to.</span></span>
          type:
            - string | number
        - id: goToType
          description: <span data-ttu-id="ead19-537">移動先の場所の型です。</span><span class="sxs-lookup"><span data-stu-id="ead19-537">The type of the location to go to.</span></span>
          type:
            - office.Office.GoToType
        - id: callback
          description: '<span data-ttu-id="ead19-538">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-538">Optional.</span></span> <span data-ttu-id="ead19-539">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-539">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-540">.</span><span class="sxs-lookup"><span data-stu-id="ead19-540"></span></span> <span data-ttu-id="ead19-541">結果`value`のプロパティは現在のビューです。</span><span class="sxs-lookup"><span data-stu-id="ead19-541">The `value` property of the result is the current view.</span></span>'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.removeHandlerAsync
    summary: <span data-ttu-id="ead19-542">指定したイベントの種類のイベントハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="ead19-542">Removes an event handler for the specified event type.</span></span>
    remarks: '<span data-ttu-id="ead19-543">**要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span><span class="sxs-lookup"><span data-stu-id="ead19-543">**Requirement set**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span></span>'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: <span data-ttu-id="ead19-544">イベントの種類。</span><span class="sxs-lookup"><span data-stu-id="ead19-544">The event type.</span></span> <span data-ttu-id="ead19-545">ドキュメントの場合は、' ドキュメント. selectionchanged ' または ' ドキュメント. activeviewchanged ' のいずれかです。</span><span class="sxs-lookup"><span data-stu-id="ead19-545">For document can be 'Document.SelectionChanged' or 'Document.ActiveViewChanged'.</span></span>
          type:
            - Office.EventType
        - id: options
          description: <span data-ttu-id="ead19-546">削除するイベントハンドラーを決めるためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-546">Provides options to determine which event handler or handlers are removed.</span></span>
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: '<span data-ttu-id="ead19-547">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-547">Optional.</span></span> <span data-ttu-id="ead19-548">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-548">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-549">.</span><span class="sxs-lookup"><span data-stu-id="ead19-549"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.removeHandlerAsync_1
    summary: <span data-ttu-id="ead19-550">指定したイベントの種類のイベントハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="ead19-550">Removes an event handler for the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-551">**要件セット**: [documentevents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span><span class="sxs-lookup"><span data-stu-id="ead19-551">**Requirement set**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)</span></span>

      #### <a name="examples"></a><span data-ttu-id="ead19-552">例</span><span class="sxs-lookup"><span data-stu-id="ead19-552">Examples</span></span>

      ```javascript
      // The following example removes the event handler named 'MyHandler'.
      function removeSelectionChangedEventHandler() {
          Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
      }

      function MyHandler(eventArgs) {
          doSomethingWithDocument(eventArgs.document);
      }
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the
      // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.
      // When a resource is selected in a resource view, the handler displays the
      // resource GUID. When the handler is removed, the GUID is not displayed.
      // The example assumes that your add-in has a reference to the jQuery library and
      // that the following page control is defined in the content div in the page body:
      // <input id="remove-handler" type="button" value="Remove handler" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
                  $('#remove-handler').click(removeEventHandler);
              });
          };

          // Remove the event handler.
          function removeEventHandler() {
              Office.context.document.removeHandlerAsync(
                  Office.EventType.ResourceSelectionChanged,
                  {handler:getResourceGuid,
                  asyncContext:'The handler is removed.'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#remove-handler').attr('disabled', 'disabled');
                          $('#message').html(result.asyncContext);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: <span data-ttu-id="ead19-553">イベントの種類。</span><span class="sxs-lookup"><span data-stu-id="ead19-553">The event type.</span></span> <span data-ttu-id="ead19-554">ドキュメントの場合は、' ドキュメント. selectionchanged ' または ' ドキュメント. activeviewchanged ' のいずれかです。</span><span class="sxs-lookup"><span data-stu-id="ead19-554">For document can be 'Document.SelectionChanged' or 'Document.ActiveViewChanged'.</span></span>
          type:
            - Office.EventType
        - id: callback
          description: '<span data-ttu-id="ead19-555">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-555">Optional.</span></span> <span data-ttu-id="ead19-556">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-556">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-557">.</span><span class="sxs-lookup"><span data-stu-id="ead19-557"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setResourceFieldAsync
    summary: |-
      <span data-ttu-id="ead19-558">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-558">Project documents only.</span></span> <span data-ttu-id="ead19-559">指定されたリソース Id のリソースフィールドを設定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-559">Set resource field for specified resource Id.</span></span>

      <span data-ttu-id="ead19-560">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-560">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: <span data-ttu-id="ead19-561">リソース Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-561">Either a string or value of the Resource Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-562">リソースフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-562">Resource Fields.</span></span>
          type:
            - number
        - id: fieldValue
          description: <span data-ttu-id="ead19-563">ターゲットフィールドの値。</span><span class="sxs-lookup"><span data-stu-id="ead19-563">Value of the target field.</span></span>
          type:
            - string | number | boolean | object
        - id: options
          description: '<span data-ttu-id="ead19-564">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-564">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-565">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-565">Optional.</span></span> <span data-ttu-id="ead19-566">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-566">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-567">.</span><span class="sxs-lookup"><span data-stu-id="ead19-567"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setResourceFieldAsync_1
    summary: |-
      <span data-ttu-id="ead19-568">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-568">Project documents only.</span></span> <span data-ttu-id="ead19-569">指定されたリソース Id のリソースフィールドを設定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-569">Set resource field for specified resource Id.</span></span>

      <span data-ttu-id="ead19-570">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-570">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-571">例</span><span class="sxs-lookup"><span data-stu-id="ead19-571">Examples</span></span>

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's
          // currently selected in a resource view. Then it sets two resource field values by calling
          // setResourceFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync
          // method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setResourceInfo);
                  });
              };

              // Get the GUID of the resource, and then get the resource fields.
              function setResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          setResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected resource.
              function setResourceFields(resourceGuid) {
                  var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];
                  var fieldValues = [.28, 'Notes for the resource.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setResourceFieldAsync(
                          resourceGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: <span data-ttu-id="ead19-572">リソース Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-572">Either a string or value of the Resource Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-573">リソースフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-573">Resource Fields.</span></span>
          type:
            - number
        - id: fieldValue
          description: <span data-ttu-id="ead19-574">ターゲットフィールドの値。</span><span class="sxs-lookup"><span data-stu-id="ead19-574">Value of the target field.</span></span>
          type:
            - string | number | boolean | object
        - id: callback
          description: '<span data-ttu-id="ead19-575">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-575">Optional.</span></span> <span data-ttu-id="ead19-576">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-576">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-577">.</span><span class="sxs-lookup"><span data-stu-id="ead19-577"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setSelectedDataAsync
    summary: <span data-ttu-id="ead19-578">指定されたデータを現在の選択範囲に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="ead19-578">Writes the specified data into the current selection.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-579">**要件セット**: [htmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)</span><span class="sxs-lookup"><span data-stu-id="ead19-579">**Requirement sets**: [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)</span></span><!-- --><span data-ttu-id="ead19-580">、(を使用する場合)`Office.CoercionType.Html`</span><span class="sxs-lookup"><span data-stu-id="ead19-580">, (when using `Office.CoercionType.Html`</span></span><!-- --><span data-ttu-id="ead19-581">)、 [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#imagecoercion) (使用時)`Office.CoercionType.Image`</span><span class="sxs-lookup"><span data-stu-id="ead19-581">), [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#imagecoercion) (when using `Office.CoercionType.Image`</span></span><!-- --><span data-ttu-id="ead19-582">)、 [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用時)`Office.CoercionType.Matrix`</span><span class="sxs-lookup"><span data-stu-id="ead19-582">), [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (when using `Office.CoercionType.Matrix`</span></span><!-- --><span data-ttu-id="ead19-583">)、 [ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(使用時)`Office.CoercionType.Ooxml`</span><span class="sxs-lookup"><span data-stu-id="ead19-583">), [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (when using `Office.CoercionType.Ooxml`</span></span><!-- --><span data-ttu-id="ead19-584">)、[選択](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span><span class="sxs-lookup"><span data-stu-id="ead19-584">), [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span></span><!-- --><span data-ttu-id="ead19-585">、 [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (を使用する場合)`Office.CoercionType.Table`</span><span class="sxs-lookup"><span data-stu-id="ead19-585">, [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (when using `Office.CoercionType.Table`</span></span><!-- --><span data-ttu-id="ead19-586">)、 [textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (を使用する場合)`Office.CoercionType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-586">), [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (when using `Office.CoercionType.Text`</span></span><!-- --><span data-ttu-id="ead19-587">)</span><span class="sxs-lookup"><span data-stu-id="ead19-587"></span></span>

      <span data-ttu-id="ead19-588">**アプリケーション固有の動作**</span><span class="sxs-lookup"><span data-stu-id="ead19-588">**Application-specific behaviors**</span></span>

      <span data-ttu-id="ead19-589">選択範囲にデータを書き込むときには、次のアプリケーション固有のアクションが適用されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-589">The following application-specific actions apply when writing data to a selection.</span></span>

      <table> <tr> <td><span data-ttu-id="ead19-590">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-590">Word</span></span></td> <td><span data-ttu-id="ead19-591">選択範囲がなく、挿入ポイントが有効な位置にある場合は、指定`data`されたが挿入ポイントに挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-591">If there is no selection and the insertion point is at a valid location, the specified `data` is inserted at the insertion point</span></span></td> <td><span data-ttu-id="ead19-592">が`data`文字列の場合、指定したテキストが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-592">If `data` is a string, the specified text is inserted.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-593">が`data`配列の配列 ("matrix") または TableData オブジェクトの場合は、新しい Word の表が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-593">If `data` is an array of arrays ("matrix") or a TableData object, a new Word table is inserted.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-594">が`data` html の場合は、指定された html が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-594">If `data` is HTML, the specified HTML is inserted.</span></span> <span data-ttu-id="ead19-595">(**重要**: 挿入する HTML のいずれかが無効な場合は、Word でエラーは発生しません。</span><span class="sxs-lookup"><span data-stu-id="ead19-595">(**Important**: If any of the HTML you insert is invalid, Word won't raise an error.</span></span> <span data-ttu-id="ead19-596">Word は、できるだけ多くの HTML を挿入し、無効なデータを省略します。</span><span class="sxs-lookup"><span data-stu-id="ead19-596">Word will insert as much of the HTML as it can and omits any invalid data).</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-597">Office `data` Open xml の場合、指定した xml が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-597">If `data` is Office Open XML, the specified XML is inserted.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-598">が`data` base64 でエンコードされたイメージストリームの場合、指定したイメージが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-598">If `data` is a base64 encoded image stream, the specified image is inserted.</span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-599">選択範囲がある場合</span><span class="sxs-lookup"><span data-stu-id="ead19-599">If there is a selection</span></span></td> <td><span data-ttu-id="ead19-600">これは、上記と同じ規則`data`に従って、次のように置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="ead19-600">It will be replaced with the specified `data` following the same rules as above.</span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-601">画像の挿入</span><span class="sxs-lookup"><span data-stu-id="ead19-601">Insert images</span></span></td> <td><span data-ttu-id="ead19-602">挿入された画像はインラインで配置されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-602">Inserted images are placed inline.</span></span> <span data-ttu-id="ead19-603">imageLeft パラメーターと imageTop パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-603">The imageLeft and imageTop parameters are ignored.</span></span> <span data-ttu-id="ead19-604">画像の縦横比は常に固定されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-604">The image aspect ratio is always locked.</span></span> <span data-ttu-id="ead19-605">imageWidth パラメーターと imageHeight パラメーターのいずれか 1 つのみが指定された場合、もう一方の値がスケーリングされて自動的に元の縦横比が維持されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-605">If only one of the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect ratio.</span></span></td> </tr>

      <tr> <td><span data-ttu-id="ead19-606">Excel</span><span class="sxs-lookup"><span data-stu-id="ead19-606">Excel</span></span></td> <td><span data-ttu-id="ead19-607">単一のセルが選択されている場合</span><span class="sxs-lookup"><span data-stu-id="ead19-607">If a single cell is selected</span></span></td> <td><span data-ttu-id="ead19-608">が`data`文字列の場合、指定したテキストが現在のセルの値として挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-608">If `data` is a string, the specified text is inserted as the value of the current cell.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-609">が`data`配列の配列 ("matrix") の場合は、指定された行と列のセットが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</span><span class="sxs-lookup"><span data-stu-id="ead19-609">If `data` is an array of arrays ("matrix"), the specified set of rows and columns are inserted, if no other data in surrounding cells will be overwritten.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-610">が`data` TableData オブジェクトの場合、指定された行とヘッダーを持つ新しい Excel テーブルが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</span><span class="sxs-lookup"><span data-stu-id="ead19-610">If `data` is a TableData object, a new Excel table with the specified set of rows and headers is inserted, if no other data in surrounding cells will be overwritten.</span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-611">複数のセルが選択されている場合</span><span class="sxs-lookup"><span data-stu-id="ead19-611">If multiple cells are selected</span></span></td> <td>If the shape does not match the shape of `data`<!-- --><span data-ttu-id="ead19-612">、エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-612">, an error is returned.</span></span></td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- --><span data-ttu-id="ead19-613">、選択されているセルの値が更新されます。`data`</span><span class="sxs-lookup"><span data-stu-id="ead19-613">, the values of the selected cells are updated based on the values in `data`</span></span><!-- --><span data-ttu-id="ead19-614">.</span><span class="sxs-lookup"><span data-stu-id="ead19-614"></span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-615">画像の挿入</span><span class="sxs-lookup"><span data-stu-id="ead19-615">Insert images</span></span></td> <td><span data-ttu-id="ead19-616">挿入された画像は浮動になります。</span><span class="sxs-lookup"><span data-stu-id="ead19-616">Inserted images are floating.</span></span> <span data-ttu-id="ead19-617">位置パラメーターの imageLeft と imageTop は、現在選択されているセルからの相対位置になります。</span><span class="sxs-lookup"><span data-stu-id="ead19-617">The position imageLeft and imageTop parameters are relative to currently selected cell(s).</span></span> <span data-ttu-id="ead19-618">imageLeft と imageTop は負の値にすることもでき、その場合は、画像がワークシート内に収まるようにするために Excel によって再調整される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ead19-618">Negative imageLeft and imageTop values are allowed and possibly readjusted by Excel to position the image inside a worksheet.</span></span> <span data-ttu-id="ead19-619">画像の縦横比は、 imageWidth と imageHeight パラメーターの両方が指定されない限り固定されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-619">Image aspect ratio is locked unless both imageWidth and imageHeight parameters are provided.</span></span> <span data-ttu-id="ead19-620">imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-620">If only one of the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect ratio.</span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-621">その他すべてのケース</span><span class="sxs-lookup"><span data-stu-id="ead19-621">All other cases</span></span></td> <td><span data-ttu-id="ead19-622">エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-622">An error is returned.</span></span></td> </tr>

      <tr> <td><span data-ttu-id="ead19-623">Excel Online</span><span class="sxs-lookup"><span data-stu-id="ead19-623">Excel Online</span></span></td> <td><span data-ttu-id="ead19-624">上記の excel で説明されている動作に加えて、これらの制限は excel Online でのデータの書き込み時に適用されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-624">In addition to the behaviors described for Excel above, these limits apply when writing data in Excel Online</span></span></td> <td><span data-ttu-id="ead19-625">この`data`パラメーターを使用してワークシートに書き込むセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。</span><span class="sxs-lookup"><span data-stu-id="ead19-625">The total number of cells you can write to a worksheet with the `data` parameter can't exceed 20,000 in a single call to this method.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-626">`cellFormat`パラメーターに渡される書式設定グループの数が100を超えることはできません。</span><span class="sxs-lookup"><span data-stu-id="ead19-626">The number of formatting groups passed to the `cellFormat` parameter can't exceed 100.</span></span> <span data-ttu-id="ead19-627">1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットから構成されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-627">A single formatting group consists of a set of formatting applied to a specified range of cells.</span></span></td> </tr>

      <tr> <td><span data-ttu-id="ead19-628">PowerPoint</span><span class="sxs-lookup"><span data-stu-id="ead19-628">PowerPoint</span></span></td> <td><span data-ttu-id="ead19-629">画像の挿入</span><span class="sxs-lookup"><span data-stu-id="ead19-629">Insert image</span></span></td> <td><span data-ttu-id="ead19-630">挿入された画像は浮動になります。</span><span class="sxs-lookup"><span data-stu-id="ead19-630">Inserted images are floating.</span></span> <span data-ttu-id="ead19-631">position imageLeft および imagetop パラメーターは省略可能ですが、指定した場合は両方とも存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ead19-631">The position imageLeft and imageTop parameters are optional but if provided, both should be present.</span></span> <span data-ttu-id="ead19-632">1 つの値しか指定されない場合、それは無視されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-632">If a single value is provided, it will be ignored.</span></span> <span data-ttu-id="ead19-633">imageLeft と imageTop は負の値にすることもでき、その場合は、画像がスライドの外に配置される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ead19-633">Negative imageLeft and imageTop values are allowed and can position an image outside of a slide.</span></span> <span data-ttu-id="ead19-634">オプションのパラメーターが指定されず、スライドにプレースホルダがある場合は、画像によってスライドのプレースホルダが置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="ead19-634">If no optional parameter is given and slide has a placeholder, the image will replace the placeholder in the slide.</span></span> <span data-ttu-id="ead19-635">画像の縦横比は、 imageWidth パラメーターと imageHeight パラメーターの両方が指定されない限り固定されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-635">Image aspect ratio will be locked unless both imageWidth and imageHeight parameters are provided.</span></span> <span data-ttu-id="ead19-636">imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-636">If only one of the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect ratio.</span></span></td> </tr> </table>

      <span data-ttu-id="ead19-637">[CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。</span><span class="sxs-lookup"><span data-stu-id="ead19-637">The possible values for the [Office.CoercionType](xref:office.Office.CoercionType) parameter vary by the host.</span></span>

      <table> <tr> <th><span data-ttu-id="ead19-638">ホスト</span><span class="sxs-lookup"><span data-stu-id="ead19-638">Host</span></span></th> <th><span data-ttu-id="ead19-639">サポートされる coercionType</span><span class="sxs-lookup"><span data-stu-id="ead19-639">Supported coercionType</span></span></th> </tr> <tr> <td><span data-ttu-id="ead19-640">Excel、PowerPoint、Project、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-640">Excel, PowerPoint, Project, and Word</span></span></td> <td><span data-ttu-id="ead19-641">`Office.CoercionType.Text`表す</span><span class="sxs-lookup"><span data-stu-id="ead19-641">`Office.CoercionType.Text` (string)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-642">Excel および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-642">Excel and Word</span></span></td> <td><span data-ttu-id="ead19-643">`Office.CoercionType.Matrix`(配列の配列)</span><span class="sxs-lookup"><span data-stu-id="ead19-643">`Office.CoercionType.Matrix` (array of arrays)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-644">Access、Excel、Word</span><span class="sxs-lookup"><span data-stu-id="ead19-644">Access, Excel, and Word</span></span></td> <td><span data-ttu-id="ead19-645">`Office.CoercionType.Table`(TableData オブジェクト)</span><span class="sxs-lookup"><span data-stu-id="ead19-645">`Office.CoercionType.Table` (TableData object)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-646">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-646">Word</span></span></td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td><span data-ttu-id="ead19-647">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-647">Word</span></span></td> <td><span data-ttu-id="ead19-648">`Office.CoercionType.Ooxml`(Office Open XML)</span><span class="sxs-lookup"><span data-stu-id="ead19-648">`Office.CoercionType.Ooxml` (Office Open XML)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-649">PowerPoint、PowerPoint Online</span><span class="sxs-lookup"><span data-stu-id="ead19-649">PowerPoint and PowerPoint Online</span></span></td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td><span data-ttu-id="ead19-650">Excel、PowerPoint、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-650">Excel, PowerPoint, and Word</span></span></td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a><span data-ttu-id="ead19-651">例</span><span class="sxs-lookup"><span data-stu-id="ead19-651">Examples</span></span>

      ```javascript
      // The following example sets the selected text or cell to "Hello World!", 
      // and if that fails, displays the value of the error.message property.
      function writeText() {
          Office.context.document.setSelectedDataAsync("Hello World!",
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write
      // to a selection. The following example writes data as an array of three rows of two columns, 
      // specifying the coercionType as `Matrix` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeMatrix() {
          Office.context.document.setSelectedDataAsync(
              [["Red", "Rojo"], ["Green", "Verde"], ["Blue", "Azul"]],
              {coercionType: Office.CoercionType.Matrix}
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // The following example writes data as a one column table with a header and four rows, 
      // specifying the coercionType as `Table` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeTable() {
          // Build table.
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];

          // Write table.
          Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},
              function (result) {
                  var error = result.error
                  if (result.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`
      // as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.context.document.setSelectedDataAsync(
              "<b>Hello</b> World!", {coercionType: Office.CoercionType.Html}, function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write('Error: ' + asyncResult.error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType
      // parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertPictureAtSelection(base64EncodedImageStr) {

          Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {
              coercionType: Office.CoercionType.Image,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 100,
              imageHeight: 100
          },
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          });
      }

      // In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the 
      // coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertSvgAtSelection(base64EncodedImageStr) {
          Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {
              coercionType: Office.CoercionType.XmlSvg,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 400
          },
              function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      console.log(asyncResult.error.message);
                  }
              });
      }
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            <span data-ttu-id="ead19-652">設定するデータを指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-652">The data to be set.</span></span> <span data-ttu-id="ead19-653">文字列または[CoercionType](xref:office.Office.CoercionType)の値、2d 配列、TableData オブジェクトのいずれかを指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-653">Either a string or [Office.CoercionType](xref:office.Office.CoercionType) value, 2d array or TableData object.</span></span>

            <span data-ttu-id="ead19-654">渡された値が`data`である場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="ead19-654">If the value passed for `data` is:</span></span>

            - <span data-ttu-id="ead19-655">文字列: プレーン テキスト、または string に強制的に変換できるその他の値が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-655">A string: Plain text or anything that can be coerced to a string will be inserted.</span></span> <span data-ttu-id="ead19-656">Excel では、選択したセルに数式を追加する有効な数式としてデータを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="ead19-656">In Excel, you can also specify data as a valid formula to add that formula to the selected cell.</span></span> <span data-ttu-id="ead19-657">例えば、data を "=SUM(A1:A5)" と設定すると、指定の範囲内の値が集計されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-657">For example, setting data to "=SUM(A1:A5)" will total the values in the specified range.</span></span> <span data-ttu-id="ead19-658">ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="ead19-658">However, when you set a formula on the bound cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell.</span></span> <span data-ttu-id="ead19-659">選択したセルで Document.getSelectedDataAsync メソッドを呼び出してそのデータを読み取ると、このメソッドは (数式の結果である) セルに表示されたデータのみを返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-659">If you call the Document.getSelectedDataAsync method on the selected cell to read its data, the method can return only the data displayed in the cell (the formula's result).</span></span>

            - <span data-ttu-id="ead19-660">配列の配列 ("matrix"): ヘッダーなしの表形式データが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-660">An array of arrays ("matrix"): Tabular data without headers will be inserted.</span></span> <span data-ttu-id="ead19-661">たとえば、2つの列に3つの行のデータを書き込むには、次のよう\[ \[な配列を渡します。 "\]R1C1 \["、"R1C2"、"\]R2C1 \["、"R2C2"、"\]\]R3C1"、"R3C2"。</span><span class="sxs-lookup"><span data-stu-id="ead19-661">For example, to write data to three rows in two columns, you can pass an array like this: \[\["R1C1", "R1C2"\], \["R2C1", "R2C2"\], \["R3C1", "R3C2"\]\].</span></span> <span data-ttu-id="ead19-662">3つの行からなる1つの列を記述するには\[ \[、次の\]よう\[な配列を\]渡し\[ます。 "R1C1"、"R2C1"、"R3C1"\]\]</span><span class="sxs-lookup"><span data-stu-id="ead19-662">To write a single column of three rows, pass an array like this: \[\["R1C1"\], \["R2C1"\], \["R3C1"\]\]</span></span>

            <span data-ttu-id="ead19-663">Excel では、データを、選択したセルに追加する有効な数式を含む配列の配列として指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="ead19-663">In Excel, you can also specify data as an array of arrays that contains valid formulas to add them to the selected cells.</span></span> <span data-ttu-id="ead19-664">たとえば、他のデータが上書きされない場合は、 \[ \[データを "= SUM (a1: a5)", "= AVERAGE (a1: a5\] \] )" に設定すると、選択範囲に2つの数式が追加されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-664">For example if no other data will be overwritten, setting data to \[\["=SUM(A1:A5)","=AVERAGE(A1:A5)"\]\] will add those two formulas to the selection.</span></span> <span data-ttu-id="ead19-665">Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.</span><span class="sxs-lookup"><span data-stu-id="ead19-665">Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.</span></span>

            - <span data-ttu-id="ead19-666">TableData オブジェクト: ヘッダー付きのテーブルが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-666">A TableData object: A table with headers will be inserted.</span></span> <span data-ttu-id="ead19-667">excel では、data パラメーターに渡す TableData オブジェクトに数式を指定すると、excel の "集計列" 機能によって期待した結果が得られない場合があります。これにより、列内の数式は自動的に複製されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-667">In Excel, if you specify formulas in the TableData object you pass for the data parameter, you might not get the results you expect due to the "calculated columns" feature of Excel, which automatically duplicates formulas within a column.</span></span> <span data-ttu-id="ead19-668">この問題を回避するには、選択`data`したテーブルに数式が含まれている場合は、TableData オブジェクトではなく配列の配列としてデータを指定し、coercionType または "matrix" として指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-668">To work around this when you want to write `data` that contains formulas to a selected table, try specifying the data as an array of arrays (instead of a TableData object), and specify the coercionType as Microsoft.Office.Matrix or "matrix".</span></span> <span data-ttu-id="ead19-669">ただし、この手法では、次のいずれかの条件が満たされている場合にのみ、"計算列" 機能がブロックされます。 (1) 列のすべてのセルに対して、または (2) 列に2つ以上の数式が既に存在します。</span><span class="sxs-lookup"><span data-stu-id="ead19-669">However, this technique will block the "calculated columns" feature only when one of the following conditions is met: (1) you are writing to all the cells of the column, or (2) there are already at least two different formulas in the column.</span></span>
          type:
            - 'string | TableData | any[][]'
        - id: options
          description: <span data-ttu-id="ead19-670">選択範囲にデータを挿入する方法のオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-670">Provides options for how to insert data to the selection.</span></span>
          type:
            - office.Office.SetSelectedDataOptions
        - id: callback
          description: '<span data-ttu-id="ead19-671">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-671">Optional.</span></span> <span data-ttu-id="ead19-672">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-672">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-673">.</span><span class="sxs-lookup"><span data-stu-id="ead19-673"></span></span> <span data-ttu-id="ead19-674">取得するオブジェクトまたはデータがないため、AsyncResult プロパティは常に undefined を返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-674">The AsyncResult.value property always returns undefined because there is no object or data to retrieve.</span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setSelectedDataAsync_1
    summary: <span data-ttu-id="ead19-675">指定されたデータを現在の選択範囲に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="ead19-675">Writes the specified data into the current selection.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-676">**要件セット**: [htmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)</span><span class="sxs-lookup"><span data-stu-id="ead19-676">**Requirement sets**: [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)</span></span><!-- --><span data-ttu-id="ead19-677">、(を使用する場合)`Office.CoercionType.Html`</span><span class="sxs-lookup"><span data-stu-id="ead19-677">, (when using `Office.CoercionType.Html`</span></span><!-- --><span data-ttu-id="ead19-678">)、 [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#imagecoercion) (使用時)`Office.CoercionType.Image`</span><span class="sxs-lookup"><span data-stu-id="ead19-678">), [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#imagecoercion) (when using `Office.CoercionType.Image`</span></span><!-- --><span data-ttu-id="ead19-679">)、 [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (使用時)`Office.CoercionType.Matrix`</span><span class="sxs-lookup"><span data-stu-id="ead19-679">), [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (when using `Office.CoercionType.Matrix`</span></span><!-- --><span data-ttu-id="ead19-680">)、 [ooxmlcoercion 型変換](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)(使用時)`Office.CoercionType.Ooxml`</span><span class="sxs-lookup"><span data-stu-id="ead19-680">), [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (when using `Office.CoercionType.Ooxml`</span></span><!-- --><span data-ttu-id="ead19-681">)、[選択](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span><span class="sxs-lookup"><span data-stu-id="ead19-681">), [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)</span></span><!-- --><span data-ttu-id="ead19-682">、 [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (を使用する場合)`Office.CoercionType.Table`</span><span class="sxs-lookup"><span data-stu-id="ead19-682">, [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (when using `Office.CoercionType.Table`</span></span><!-- --><span data-ttu-id="ead19-683">)、 [textcoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (を使用する場合)`Office.CoercionType.Text`</span><span class="sxs-lookup"><span data-stu-id="ead19-683">), [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (when using `Office.CoercionType.Text`</span></span><!-- --><span data-ttu-id="ead19-684">)</span><span class="sxs-lookup"><span data-stu-id="ead19-684"></span></span>

      <span data-ttu-id="ead19-685">**アプリケーション固有の動作**</span><span class="sxs-lookup"><span data-stu-id="ead19-685">**Application-specific behaviors**</span></span>

      <span data-ttu-id="ead19-686">選択範囲にデータを書き込むときには、次のアプリケーション固有のアクションが適用されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-686">The following application-specific actions apply when writing data to a selection.</span></span>

      <table> <tr> <td><span data-ttu-id="ead19-687">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-687">Word</span></span></td> <td><span data-ttu-id="ead19-688">選択範囲がなく、挿入ポイントが有効な位置にある場合は、指定`data`されたが挿入ポイントに挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-688">If there is no selection and the insertion point is at a valid location, the specified `data` is inserted at the insertion point</span></span></td> <td><span data-ttu-id="ead19-689">が`data`文字列の場合、指定したテキストが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-689">If `data` is a string, the specified text is inserted.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-690">が`data`配列の配列 ("matrix") または TableData オブジェクトの場合は、新しい Word の表が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-690">If `data` is an array of arrays ("matrix") or a TableData object, a new Word table is inserted.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-691">が`data` html の場合は、指定された html が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-691">If `data` is HTML, the specified HTML is inserted.</span></span> <span data-ttu-id="ead19-692">(**重要**: 挿入する HTML のいずれかが無効な場合は、Word でエラーは発生しません。</span><span class="sxs-lookup"><span data-stu-id="ead19-692">(**Important**: If any of the HTML you insert is invalid, Word won't raise an error.</span></span> <span data-ttu-id="ead19-693">Word は、できるだけ多くの HTML を挿入し、無効なデータを省略します。</span><span class="sxs-lookup"><span data-stu-id="ead19-693">Word will insert as much of the HTML as it can and omits any invalid data).</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-694">Office `data` Open xml の場合、指定した xml が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-694">If `data` is Office Open XML, the specified XML is inserted.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-695">が`data` base64 でエンコードされたイメージストリームの場合、指定したイメージが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-695">If `data` is a base64 encoded image stream, the specified image is inserted.</span></span></td></tr></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-696">選択範囲がある場合</span><span class="sxs-lookup"><span data-stu-id="ead19-696">If there is a selection</span></span></td> <td><span data-ttu-id="ead19-697">これは、上記と同じ規則`data`に従って、次のように置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="ead19-697">It will be replaced with the specified `data` following the same rules as above.</span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-698">画像の挿入</span><span class="sxs-lookup"><span data-stu-id="ead19-698">Insert images</span></span></td> <td><span data-ttu-id="ead19-699">挿入された画像はインラインで配置されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-699">Inserted images are placed inline.</span></span> <span data-ttu-id="ead19-700">imageLeft パラメーターと imageTop パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-700">The imageLeft and imageTop parameters are ignored.</span></span> <span data-ttu-id="ead19-701">画像の縦横比は常に固定されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-701">The image aspect ratio is always locked.</span></span> <span data-ttu-id="ead19-702">imageWidth パラメーターと imageHeight パラメーターのいずれか 1 つのみが指定された場合、もう一方の値がスケーリングされて自動的に元の縦横比が維持されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-702">If only one of the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect ratio.</span></span></td> </tr>

      <tr> <td><span data-ttu-id="ead19-703">Excel</span><span class="sxs-lookup"><span data-stu-id="ead19-703">Excel</span></span></td> <td><span data-ttu-id="ead19-704">単一のセルが選択されている場合</span><span class="sxs-lookup"><span data-stu-id="ead19-704">If a single cell is selected</span></span></td> <td><span data-ttu-id="ead19-705">が`data`文字列の場合、指定したテキストが現在のセルの値として挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-705">If `data` is a string, the specified text is inserted as the value of the current cell.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-706">が`data`配列の配列 ("matrix") の場合は、指定された行と列のセットが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</span><span class="sxs-lookup"><span data-stu-id="ead19-706">If `data` is an array of arrays ("matrix"), the specified set of rows and columns are inserted, if no other data in surrounding cells will be overwritten.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-707">が`data` TableData オブジェクトの場合、指定された行とヘッダーを持つ新しい Excel テーブルが挿入されます (周囲のセルに含まれるデータが上書きされる場合は除く)。</span><span class="sxs-lookup"><span data-stu-id="ead19-707">If `data` is a TableData object, a new Excel table with the specified set of rows and headers is inserted, if no other data in surrounding cells will be overwritten.</span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-708">複数のセルが選択されている場合</span><span class="sxs-lookup"><span data-stu-id="ead19-708">If multiple cells are selected</span></span></td><td>If the shape does not match the shape of `data`<!-- --><span data-ttu-id="ead19-709">、エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-709">, an error is returned.</span></span></td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- --><span data-ttu-id="ead19-710">、選択されているセルの値が更新されます。`data`</span><span class="sxs-lookup"><span data-stu-id="ead19-710">, the values of the selected cells are updated based on the values in `data`</span></span><!-- --><span data-ttu-id="ead19-711">.</span><span class="sxs-lookup"><span data-stu-id="ead19-711"></span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-712">画像の挿入</span><span class="sxs-lookup"><span data-stu-id="ead19-712">Insert images</span></span></td> <td><span data-ttu-id="ead19-713">挿入された画像は浮動になります。</span><span class="sxs-lookup"><span data-stu-id="ead19-713">Inserted images are floating.</span></span> <span data-ttu-id="ead19-714">位置パラメーターの imageLeft と imageTop は、現在選択されているセルからの相対位置になります。</span><span class="sxs-lookup"><span data-stu-id="ead19-714">The position imageLeft and imageTop parameters are relative to currently selected cell(s).</span></span> <span data-ttu-id="ead19-715">imageLeft と imageTop は負の値にすることもでき、その場合は、画像がワークシート内に収まるようにするために Excel によって再調整される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ead19-715">Negative imageLeft and imageTop values are allowed and possibly readjusted by Excel to position the image inside a worksheet.</span></span> <span data-ttu-id="ead19-716">画像の縦横比は、 imageWidth と imageHeight パラメーターの両方が指定されない限り固定されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-716">Image aspect ratio is locked unless both imageWidth and imageHeight parameters are provided.</span></span> <span data-ttu-id="ead19-717">imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-717">If only one of the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect ratio.</span></span></td> </tr> <tr> <td></td> <td><span data-ttu-id="ead19-718">その他すべてのケース</span><span class="sxs-lookup"><span data-stu-id="ead19-718">All other cases</span></span></td> <td><span data-ttu-id="ead19-719">エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-719">An error is returned.</span></span></td> </tr>

      <tr> <td><span data-ttu-id="ead19-720">Excel Online</span><span class="sxs-lookup"><span data-stu-id="ead19-720">Excel Online</span></span></td> <td><span data-ttu-id="ead19-721">上記の excel で説明されている動作に加えて、これらの制限は excel Online でのデータの書き込み時に適用されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-721">In addition to the behaviors described for Excel above, these limits apply when writing data in Excel Online</span></span></td> <td><span data-ttu-id="ead19-722">この`data`パラメーターを使用してワークシートに書き込むセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。</span><span class="sxs-lookup"><span data-stu-id="ead19-722">The total number of cells you can write to a worksheet with the `data` parameter can't exceed 20,000 in a single call to this method.</span></span></td> </tr> <tr> <td></td> <td></td> <td><span data-ttu-id="ead19-723">`cellFormat`パラメーターに渡される書式設定グループの数が100を超えることはできません。</span><span class="sxs-lookup"><span data-stu-id="ead19-723">The number of formatting groups passed to the `cellFormat` parameter can't exceed 100.</span></span> <span data-ttu-id="ead19-724">1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットから構成されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-724">A single formatting group consists of a set of formatting applied to a specified range of cells.</span></span></td> </tr>

      <tr> <td><span data-ttu-id="ead19-725">PowerPoint</span><span class="sxs-lookup"><span data-stu-id="ead19-725">PowerPoint</span></span></td> <td><span data-ttu-id="ead19-726">画像の挿入</span><span class="sxs-lookup"><span data-stu-id="ead19-726">Insert image</span></span></td> <td><span data-ttu-id="ead19-727">挿入された画像は浮動になります。</span><span class="sxs-lookup"><span data-stu-id="ead19-727">Inserted images are floating.</span></span> <span data-ttu-id="ead19-728">position imageLeft および imagetop パラメーターは省略可能ですが、指定した場合は両方とも存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ead19-728">The position imageLeft and imageTop parameters are optional but if provided, both should be present.</span></span> <span data-ttu-id="ead19-729">1 つの値しか指定されない場合、それは無視されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-729">If a single value is provided, it will be ignored.</span></span> <span data-ttu-id="ead19-730">imageLeft と imageTop は負の値にすることもでき、その場合は、画像がスライドの外に配置される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ead19-730">Negative imageLeft and imageTop values are allowed and can position an image outside of a slide.</span></span> <span data-ttu-id="ead19-731">オプションのパラメーターが指定されず、スライドにプレースホルダがある場合は、画像によってスライドのプレースホルダが置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="ead19-731">If no optional parameter is given and slide has a placeholder, the image will replace the placeholder in the slide.</span></span> <span data-ttu-id="ead19-732">画像の縦横比は、 imageWidth パラメーターと imageHeight パラメーターの両方が指定されない限り固定されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-732">Image aspect ratio will be locked unless both imageWidth and imageHeight parameters are provided.</span></span> <span data-ttu-id="ead19-733">imageWidth パラメーターと imageHeight パラメーターのいずれか一方が指定されている場合、もう一方の値は、元の縦横比を維持するように自動調整されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-733">If only one of the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect ratio.</span></span></td> </tr> </table>

      <span data-ttu-id="ead19-734">[CoercionType](xref:office.Office.CoercionType)パラメーターに指定できる値は、ホストによって異なります。</span><span class="sxs-lookup"><span data-stu-id="ead19-734">The possible values for the [Office.CoercionType](xref:office.Office.CoercionType) parameter vary by the host.</span></span>

      <table> <tr> <th><span data-ttu-id="ead19-735">ホスト</span><span class="sxs-lookup"><span data-stu-id="ead19-735">Host</span></span></th> <th><span data-ttu-id="ead19-736">サポートされる coercionType</span><span class="sxs-lookup"><span data-stu-id="ead19-736">Supported coercionType</span></span></th> </tr> <tr> <td><span data-ttu-id="ead19-737">Excel、PowerPoint、Project、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-737">Excel, PowerPoint, Project, and Word</span></span></td> <td><span data-ttu-id="ead19-738">`Office.CoercionType.Text`表す</span><span class="sxs-lookup"><span data-stu-id="ead19-738">`Office.CoercionType.Text` (string)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-739">Excel および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-739">Excel and Word</span></span></td> <td><span data-ttu-id="ead19-740">`Office.CoercionType.Matrix`(配列の配列)</span><span class="sxs-lookup"><span data-stu-id="ead19-740">`Office.CoercionType.Matrix` (array of arrays)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-741">Access、Excel、Word</span><span class="sxs-lookup"><span data-stu-id="ead19-741">Access, Excel, and Word</span></span></td> <td><span data-ttu-id="ead19-742">`Office.CoercionType.Table`(TableData オブジェクト)</span><span class="sxs-lookup"><span data-stu-id="ead19-742">`Office.CoercionType.Table` (TableData object)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-743">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-743">Word</span></span></td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td><span data-ttu-id="ead19-744">Word</span><span class="sxs-lookup"><span data-stu-id="ead19-744">Word</span></span></td> <td><span data-ttu-id="ead19-745">`Office.CoercionType.Ooxml`(Office Open XML)</span><span class="sxs-lookup"><span data-stu-id="ead19-745">`Office.CoercionType.Ooxml` (Office Open XML)</span></span></td> </tr> <tr> <td><span data-ttu-id="ead19-746">PowerPoint、PowerPoint Online</span><span class="sxs-lookup"><span data-stu-id="ead19-746">PowerPoint and PowerPoint Online</span></span></td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td><span data-ttu-id="ead19-747">Excel、PowerPoint、および Word</span><span class="sxs-lookup"><span data-stu-id="ead19-747">Excel, PowerPoint, and Word</span></span></td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            <span data-ttu-id="ead19-748">設定するデータを指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-748">The data to be set.</span></span> <span data-ttu-id="ead19-749">文字列または[CoercionType](xref:office.Office.CoercionType)の値、2d 配列、TableData オブジェクトのいずれかを指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-749">Either a string or [Office.CoercionType](xref:office.Office.CoercionType) value, 2d array or TableData object.</span></span>

            <span data-ttu-id="ead19-750">渡された値が`data`である場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="ead19-750">If the value passed for `data` is:</span></span>

            - <span data-ttu-id="ead19-751">文字列: プレーン テキスト、または string に強制的に変換できるその他の値が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-751">A string: Plain text or anything that can be coerced to a string will be inserted.</span></span> <span data-ttu-id="ead19-752">Excel では、選択したセルに数式を追加する有効な数式としてデータを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="ead19-752">In Excel, you can also specify data as a valid formula to add that formula to the selected cell.</span></span> <span data-ttu-id="ead19-753">例えば、data を "=SUM(A1:A5)" と設定すると、指定の範囲内の値が集計されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-753">For example, setting data to "=SUM(A1:A5)" will total the values in the specified range.</span></span> <span data-ttu-id="ead19-754">ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="ead19-754">However, when you set a formula on the bound cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell.</span></span> <span data-ttu-id="ead19-755">選択したセルで Document.getSelectedDataAsync メソッドを呼び出してそのデータを読み取ると、このメソッドは (数式の結果である) セルに表示されたデータのみを返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-755">If you call the Document.getSelectedDataAsync method on the selected cell to read its data, the method can return only the data displayed in the cell (the formula's result).</span></span>

            - <span data-ttu-id="ead19-756">配列の配列 ("matrix"): ヘッダーなしの表形式データが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-756">An array of arrays ("matrix"): Tabular data without headers will be inserted.</span></span> <span data-ttu-id="ead19-757">たとえば、2つの列に3つの行のデータを書き込むには、次のよう\[ \[な配列を渡します。 "\]R1C1 \["、"R1C2"、"\]R2C1 \["、"R2C2"、"\]\]R3C1"、"R3C2"。</span><span class="sxs-lookup"><span data-stu-id="ead19-757">For example, to write data to three rows in two columns, you can pass an array like this: \[\["R1C1", "R1C2"\], \["R2C1", "R2C2"\], \["R3C1", "R3C2"\]\].</span></span> <span data-ttu-id="ead19-758">3つの行からなる1つの列を記述するには\[ \[、次の\]よう\[な配列を\]渡し\[ます。 "R1C1"、"R2C1"、"R3C1"\]\]</span><span class="sxs-lookup"><span data-stu-id="ead19-758">To write a single column of three rows, pass an array like this: \[\["R1C1"\], \["R2C1"\], \["R3C1"\]\]</span></span>

            <span data-ttu-id="ead19-759">Excel では、データを、選択したセルに追加する有効な数式を含む配列の配列として指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="ead19-759">In Excel, you can also specify data as an array of arrays that contains valid formulas to add them to the selected cells.</span></span> <span data-ttu-id="ead19-760">たとえば、他のデータが上書きされない場合は、 \[ \[データを "= SUM (a1: a5)", "= AVERAGE (a1: a5\] \] )" に設定すると、選択範囲に2つの数式が追加されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-760">For example if no other data will be overwritten, setting data to \[\["=SUM(A1:A5)","=AVERAGE(A1:A5)"\]\] will add those two formulas to the selection.</span></span> <span data-ttu-id="ead19-761">Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.</span><span class="sxs-lookup"><span data-stu-id="ead19-761">Just as when setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after they have been set - you can only read the formulas' results.</span></span>

            - <span data-ttu-id="ead19-762">TableData オブジェクト: ヘッダー付きのテーブルが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-762">A TableData object: A table with headers will be inserted.</span></span> <span data-ttu-id="ead19-763">excel では、data パラメーターに渡す TableData オブジェクトに数式を指定すると、excel の "集計列" 機能によって期待した結果が得られない場合があります。これにより、列内の数式は自動的に複製されます。</span><span class="sxs-lookup"><span data-stu-id="ead19-763">In Excel, if you specify formulas in the TableData object you pass for the data parameter, you might not get the results you expect due to the "calculated columns" feature of Excel, which automatically duplicates formulas within a column.</span></span> <span data-ttu-id="ead19-764">この問題を回避するには、選択`data`したテーブルに数式が含まれている場合は、TableData オブジェクトではなく配列の配列としてデータを指定し、coercionType または "matrix" として指定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-764">To work around this when you want to write `data` that contains formulas to a selected table, try specifying the data as an array of arrays (instead of a TableData object), and specify the coercionType as Microsoft.Office.Matrix or "matrix".</span></span> <span data-ttu-id="ead19-765">ただし、この手法では、次のいずれかの条件が満たされている場合にのみ、"計算列" 機能がブロックされます。 (1) 列のすべてのセルに対して、または (2) 列に2つ以上の数式が既に存在します。</span><span class="sxs-lookup"><span data-stu-id="ead19-765">However, this technique will block the "calculated columns" feature only when one of the following conditions is met: (1) you are writing to all the cells of the column, or (2) there are already at least two different formulas in the column.</span></span>
          type:
            - 'string | TableData | any[][]'
        - id: callback
          description: '<span data-ttu-id="ead19-766">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-766">Optional.</span></span> <span data-ttu-id="ead19-767">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-767">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-768">.</span><span class="sxs-lookup"><span data-stu-id="ead19-768"></span></span> <span data-ttu-id="ead19-769">取得するオブジェクトまたはデータがないため、AsyncResult プロパティは常に undefined を返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-769">The AsyncResult.value property always returns undefined because there is no object or data to retrieve.</span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setTaskFieldAsync
    summary: |-
      <span data-ttu-id="ead19-770">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-770">Project documents only.</span></span> <span data-ttu-id="ead19-771">指定したタスク Id のタスクフィールドを設定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-771">Set task field for specified task Id.</span></span>

      <span data-ttu-id="ead19-772">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-772">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: <span data-ttu-id="ead19-773">タスク Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-773">Either a string or value of the Task Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-774">タスクフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-774">Task Fields.</span></span>
          type:
            - number
        - id: fieldValue
          description: <span data-ttu-id="ead19-775">ターゲットフィールドの値。</span><span class="sxs-lookup"><span data-stu-id="ead19-775">Value of the target field.</span></span>
          type:
            - string | number | boolean | object
        - id: options
          description: '<span data-ttu-id="ead19-776">コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="ead19-776">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="ead19-777">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-777">Optional.</span></span> <span data-ttu-id="ead19-778">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-778">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-779">.</span><span class="sxs-lookup"><span data-stu-id="ead19-779"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setTaskFieldAsync_1
    summary: |-
      <span data-ttu-id="ead19-780">プロジェクトドキュメントのみ。</span><span class="sxs-lookup"><span data-stu-id="ead19-780">Project documents only.</span></span> <span data-ttu-id="ead19-781">指定したタスク Id のタスクフィールドを設定します。</span><span class="sxs-lookup"><span data-stu-id="ead19-781">Set task field for specified task Id.</span></span>

      <span data-ttu-id="ead19-782">**重要**: この API は、Windows デスクトップの Project 2016 でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="ead19-782">**Important**: This API works only in Project 2016 on Windows desktop.</span></span>
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-783">例</span><span class="sxs-lookup"><span data-stu-id="ead19-783">Examples</span></span>

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's
          // currently selected in a task view. Then it sets two task field values by calling
          // setTaskFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the
          // addHandlerAsync method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function setTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          setTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected task.
              function setTaskFields(taskGuid) {
                  var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];
                  var fieldValues = [true, 'Notes for the task.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setTaskFieldAsync(
                          taskGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: <span data-ttu-id="ead19-784">タスク Id の文字列または値。</span><span class="sxs-lookup"><span data-stu-id="ead19-784">Either a string or value of the Task Id.</span></span>
          type:
            - string
        - id: fieldId
          description: <span data-ttu-id="ead19-785">タスクフィールド</span><span class="sxs-lookup"><span data-stu-id="ead19-785">Task Fields.</span></span>
          type:
            - number
        - id: fieldValue
          description: <span data-ttu-id="ead19-786">ターゲットフィールドの値。</span><span class="sxs-lookup"><span data-stu-id="ead19-786">Value of the target field.</span></span>
          type:
            - string | number | boolean | object
        - id: callback
          description: '<span data-ttu-id="ead19-787">省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ead19-787">Optional.</span></span> <span data-ttu-id="ead19-788">コールバックが戻るときに呼び出される関数で、唯一のパラメーターの型が[Office AsyncResult](xref:office.Office.AsyncResult)である。</span><span class="sxs-lookup"><span data-stu-id="ead19-788">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="ead19-789">.</span><span class="sxs-lookup"><span data-stu-id="ead19-789"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.bindings
    summary: <span data-ttu-id="ead19-790">ドキュメントに定義されているバインドへのアクセスを提供するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-790">Gets an object that provides access to the bindings defined in the document.</span></span>
    remarks: |-
      <span data-ttu-id="ead19-791">Document オブジェクトをスクリプトで直接インスタンス化することはありません。</span><span class="sxs-lookup"><span data-stu-id="ead19-791">You don't instantiate the Document object directly in your script.</span></span> <span data-ttu-id="ead19-792">To call members of the Document object to interact with the current document or worksheet, use `Office.context.document` in your script.</span><span class="sxs-lookup"><span data-stu-id="ead19-792">To call members of the Document object to interact with the current document or worksheet, use `Office.context.document` in your script.</span></span>

      #### <a name="examples"></a><span data-ttu-id="ead19-793">例</span><span class="sxs-lookup"><span data-stu-id="ead19-793">Examples</span></span>

      ```javascript
      function displayAllBindings() {
          Office.context.document.bindings.getAllAsync(function (asyncResult) {
              var bindingString = '';
              for (var i in asyncResult.value) {
                  bindingString += asyncResult.value[i].id + '\n';
              }
              write('Existing bindings: ' + bindingString);
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bindings: Bindings;'
      return:
        type:
          - office.Office.Bindings
  - uid: office.Office.Document.customXmlParts
    summary: <span data-ttu-id="ead19-794">ドキュメント内のカスタム XML パーツを表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-794">Gets an object that represents the custom XML parts in the document.</span></span>
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customXmlParts: CustomXmlParts;'
      return:
        type:
          - office.Office.CustomXmlParts
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-795">例</span><span class="sxs-lookup"><span data-stu-id="ead19-795">Examples</span></span>

          ```javascript
          function getCustomXmlParts(){
              Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {
                  write('Retrieved ' + asyncResult.value.length + ' custom XML parts');
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Document.mode
    summary: <span data-ttu-id="ead19-796">ドキュメントのモードを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-796">Gets the mode the document is in.</span></span>
    name: mode
    fullName: mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: DocumentMode;'
      return:
        type:
          - office.Office.DocumentMode
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-797">例</span><span class="sxs-lookup"><span data-stu-id="ead19-797">Examples</span></span>

          ```javascript
          function displayDocumentMode() {
              write(Office.context.document.mode);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
          ```javascript
          // The following example initializes the add-in and then gets properties of the
          // Document object that are available in the context of a Project document.
          // A Project document is the opened, active project. To access members of the
          // ProjectDocument object, use the Office.context.document object as shown in
          // the code examples for ProjectDocument methods and events.
          // The example assumes your add-in has a reference to the jQuery library and
          // that the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information about the document.
                      showDocumentProperties();
                  });
              };

              // Get the document mode and the URL of the active project.
              function showDocumentProperties() {
                  var output = String.format(
                      'The document mode is {0}.<br/>The URL of the active project is {1}.',
                      Office.context.document.mode,
                      Office.context.document.url);
                  $('#message').html(output);
              }
          })();
          ```
  - uid: office.Office.Document.settings
    summary: <span data-ttu-id="ead19-798">現在のドキュメントのコンテンツ アプリまたは作業ウィンドウ アプリの保存されているカスタム設定を表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-798">Gets an object that represents the saved custom settings of the content or task pane add-in for the current document.</span></span>
    name: settings
    fullName: settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'settings: Settings;'
      return:
        type:
          - office.Office.Settings
  - uid: office.Office.Document.url
    summary: <span data-ttu-id="ead19-799">ホスト アプリケーションが現在開いているドキュメントの URL を取得します。</span><span class="sxs-lookup"><span data-stu-id="ead19-799">Gets the URL of the document that the host application currently has open.</span></span> <span data-ttu-id="ead19-800">URL が利用できない場合は null を返します。</span><span class="sxs-lookup"><span data-stu-id="ead19-800">Returns null if the URL is unavailable.</span></span>
    name: url
    fullName: url
    langs:
      - typeScript
    type: property
    syntax:
      content: 'url: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ead19-801">例</span><span class="sxs-lookup"><span data-stu-id="ead19-801">Examples</span></span>

          ```javascript
          function displayDocumentUrl() {
              write(Office.context.document.url);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```