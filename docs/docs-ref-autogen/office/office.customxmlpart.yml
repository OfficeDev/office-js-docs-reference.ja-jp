### YamlMime:UniversalReference
ms.openlocfilehash: 37c90a37febea89c9fa6c20870c5963f0f760b8d
ms.sourcegitcommit: a36161c2113d94680dc68150d024e68bdf0390fa
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 10/10/2018
ms.locfileid: "25458853"
items:
- uid: office.Office.CustomXmlPart
  summary: '[Office.CustomXmlParts](xref:office.Office.CustomXmlParts)コレクション内の 1 つの CustomXMLPart を表します。'
  remarks: >-
    <table><tr><td>要件の設定</td><td>CustomXmlParts</td></tr></table>


    **サポートの詳細**


    大文字 Y の次のマトリックスでは、対応する Office ホスト アプリケーションでこのインターフェイスがサポートされていることを示します。 空のセルでは、Office ホスト アプリケーションでこのインターフェイスをサポートしないことを示します。


    Office ホスト アプリケーションとサーバーの要件の詳細については、 [Office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)を参照してください<!-- -->。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th></tr> <tr><td><strong>単語</strong></td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: Office.CustomXmlPart
  fullName: office.Office.CustomXmlPart
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlPart.addHandlerAsync
  - office.Office.CustomXmlPart.builtIn
  - office.Office.CustomXmlPart.deleteAsync
  - office.Office.CustomXmlPart.getNodesAsync
  - office.Office.CustomXmlPart.getXmlAsync
  - office.Office.CustomXmlPart.id
  - office.Office.CustomXmlPart.namespaceManager
  - office.Office.CustomXmlPart.removeHandlerAsync
- uid: office.Office.CustomXmlPart.addHandlerAsync
  summary: 指定されたイベントの種類を使用してオブジェクトにイベント ハンドラーを追加します。
  remarks: >-
    各イベント ハンドラー関数の名前が重複しない限り、指定されたイベントの種類の複数のイベント ハンドラーを追加できます。

    #### <a name="examples"></a>例


    ```javascript

    // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeDeletedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                write("A node has been deleted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeInsertedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                write("A node has been inserted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeReplacedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                write("A node has been replaced.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.CustomXmlPart.addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: 追加するイベントの種類を指定します。 として CustomXmlPart オブジェクトでは、イベントの種類のパラメーターを指定できます`Office.EventType.NodeDeleted` <!-- -->、 `Office.EventType.NodeInserted` <!-- -->、および`Office.EventType.NodeReplaced` <!-- -->。
      type:
      - Office.EventType
    - id: handler
      description: 型[Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)が唯一のパラメーターは、イベント ハンドラー関数を追加するに<!-- -->、 [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->、または[Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)
      type:
      - '(result: any) => void'
    - id: options
      description: 任意の型を変更せずに、コールバックで使用するためのコンテキスト データを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.builtIn
  summary: 。 カスタム XML 部分が組み込まれている場合は true。それ以外の場合は、false。
  name: builtIn
  fullName: office.Office.CustomXmlPart.builtIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'builtIn: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showXMLPartBuiltIn() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.builtIn);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.deleteAsync
  summary: カスタム XML パーツを削除します。
  name: deleteAsync(options, callback)
  fullName: office.Office.CustomXmlPart.deleteAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction deleteXMLPart() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.deleteAsync(function (eventArgs) {\n            write(\"The XML Part has been deleted.\");\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: options
      description: 任意の型を変更せずに、コールバックで使用するためのコンテキスト データを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.getNodesAsync
  summary: 指定された XPath に一致するこのカスタム XML パーツ内の CustomXmlNodes を非同期に取得します。
  name: getNodesAsync(xPath, options, callback)
  fullName: office.Office.CustomXmlPart.getNodesAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: xPath
      description: 取得するノードを指定する XPath 式。必須。
      type:
      - string
    - id: options
      description: 任意の型を変更せずに、コールバックで使用するためのコンテキスト データを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。 `value` 、結果のプロパティは、xPath パラメーターに渡される XPath 式で指定されたノードを表す CustomXmlNode オブジェクトの配列。
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlPart.getXmlAsync
  summary: このカスタム XML パーツ内の XML を非同期的に取得します。
  name: getXmlAsync(options, callback)
  fullName: office.Office.CustomXmlPart.getXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showXMLPartInnerXML() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getXmlAsync({}, function (eventArgs) {\n            write(eventArgs.value);\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: options
      description: 任意の型を変更せずに、コールバックで使用するためのコンテキスト データを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。 `value` 、結果のプロパティは、CustomXmlPart オブジェクトを参照先の XML を含む文字列です。
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlPart.id
  summary: CustomXMLPart の GUID を取得します。
  name: id
  fullName: office.Office.CustomXmlPart.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showXMLPartBuiltId() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.id);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.namespaceManager
  summary: 一連の名前空間のプレフィックス マッピングを取得 ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) 現在の CustomXmlPart に対して使用します。
  name: namespaceManager
  fullName: office.Office.CustomXmlPart.namespaceManager
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceManager: CustomXmlPrefixMappings;'
    return:
      type:
      - office.Office.CustomXmlPrefixMappings
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction setXMLPartNamespaceManagerNamespace() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.namespaceManager.addNamespaceAsync(\"myPrefix\", \"myNamespace\");\n    });\n}\n```"
- uid: office.Office.CustomXmlPart.removeHandlerAsync
  summary: 指定されたイベントの種類のイベント ハンドラーを削除します。
  name: removeHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.CustomXmlPart.removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction removeNodeInsertedEventHandler() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\",\n        function (result) {\n            var xmlPart = result.value;\n            xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});\n    });\n}\n```"
    parameters:
    - id: eventType
      description: 削除するイベントの種類を指定します。 として CustomXmlPart オブジェクトでは、イベントの種類のパラメーターを指定できます`Office.EventType.NodeDeleted` <!-- -->、 `Office.EventType.NodeInserted` <!-- -->、および`Office.EventType.NodeReplaced` <!-- -->。
      type:
      - Office.EventType
    - id: handler
      description: 削除するハンドラーの名前。
      type:
      - '(result: any) => void'
    - id: options
      description: どのイベント ハンドラーまたはハンドラーを削除するオプションを提供します。
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。
      type:
      - '(result: AsyncResult<void>) => void'
