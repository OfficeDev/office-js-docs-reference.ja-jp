### YamlMime:UniversalReference
ms.openlocfilehash: f323ce2a7e2510f4309a37a7123c51dcbb36d5e4
ms.sourcegitcommit: b0b614f5315ab2e5c1e0ea51c687498f87684a07
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/15/2019
ms.locfileid: "30055613"
items:
- uid: office.Office.TableBinding
  summary: バインドを行と列の 2 次元で、必要に応じてヘッダーと共に表します。
  remarks: >-
    <table><tr><td>要件セット</td><td>TableBindings</td></tr></table>


    `id` tablebinding オブジェクトは、プロパティ、 `type`プロパティ、 `getDataAsync`メソッド、および`setDataAsync`メソッドを Office の[Binding](xref:office.Office.Binding)オブジェクトから継承します。


    Excel の場合は、テーブルバインドを確立した後、ユーザーがテーブルに追加する新しい各行ごとに、自動的にバインドに追加され、行数が増加することに注意してください。
  name: Office.TableBinding
  fullName: Office.TableBinding
  langs:
  - typeScript
  type: interface
  extends:
  - 'Binding '
  package: office
  children:
  - office.Office.TableBinding.addColumnsAsync
  - office.Office.TableBinding.addColumnsAsync_1
  - office.Office.TableBinding.addRowsAsync
  - office.Office.TableBinding.addRowsAsync_1
  - office.Office.TableBinding.clearFormatsAsync
  - office.Office.TableBinding.clearFormatsAsync_1
  - office.Office.TableBinding.deleteAllDataValuesAsync
  - office.Office.TableBinding.deleteAllDataValuesAsync_1
  - office.Office.TableBinding.getFormatsAsync
  - office.Office.TableBinding.getFormatsAsync_1
  - office.Office.TableBinding.setFormatsAsync
  - office.Office.TableBinding.setFormatsAsync_1
  - office.Office.TableBinding.setTableOptionsAsync
  - office.Office.TableBinding.setTableOptionsAsync_1
  - office.Office.TableBinding.columnCount
  - office.Office.TableBinding.hasHeaders
  - office.Office.TableBinding.rowCount
- uid: office.Office.TableBinding.addColumnsAsync
  summary: 指定されたデータを、追加の列としてテーブルに追加します。
  remarks: >-
    データおよびヘッダーの値を指定する1つ以上の列を追加するには、TableData オブジェクトを data パラメーターとして渡します。 データだけを指定して1つ以上の列を追加するには、data パラメーターとして配列の配列 ("matrix") を渡します。


    addcolumns async 操作の成功または失敗はアトミックです。 つまり、[列の追加] 操作のすべてが成功するか、または完全にロールバックされます (また、コールバックに返される AsyncResult. status プロパティはエラーを報告します)。


    - data 引数として渡す配列の各行には、更新するテーブルと同じ行数を指定する必要があります。 含まれていない場合は、操作全体が失敗します。


    - 配列内の各行とセルは、その行またはセルをテーブル内の新しく追加される列に正常に追加する必要があります。何らかの理由によって、行またはセルを設定できなかった場合は、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Excel Online の追加コメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>

    #### <a name="examples"></a>例


    ```javascript

    // The following example adds a single column with three rows to a bound table with the id "myTable"

    // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,

    // the table being updated must have three rows.


    // Add a column to a binding of type table by passing a TableData object.

    function addColumns() {
        var myTable = new Office.TableData();
        myTable.headers = [["Cities"]];
        myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }


    // The following example adds a single column with three rows to a bound table with the id myTable

    // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.

    // To succeed, the table being updated must have three rows.


    // Add a column to a binding of type table by passing an array of arrays.

    function addColumns() {
        var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }

    ```
  name: addColumnsAsync(tableData, options, callback)
  fullName: addColumnsAsync(tableData, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: テーブルに追加する1つ以上のデータ列を含む配列 ("matrix") または TableData オブジェクト。 必須です。
      type:
      - TableData | any[][]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addColumnsAsync_1
  summary: 指定されたデータを、追加の列としてテーブルに追加します。
  remarks: >-
    データおよびヘッダーの値を指定する1つ以上の列を追加するには、TableData オブジェクトを data パラメーターとして渡します。 データだけを指定して1つ以上の列を追加するには、data パラメーターとして配列の配列 ("matrix") を渡します。


    addcolumns async 操作の成功または失敗はアトミックです。 つまり、[列の追加] 操作のすべてが成功するか、または完全にロールバックされます (また、コールバックに返される AsyncResult. status プロパティはエラーを報告します)。


    - data 引数として渡す配列の各行には、更新するテーブルと同じ行数を指定する必要があります。 含まれていない場合は、操作全体が失敗します。


    - 配列内の各行とセルは、その行またはセルをテーブル内の新しく追加される列に正常に追加する必要があります。何らかの理由によって、行またはセルを設定できなかった場合は、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Excel Online の追加コメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: addColumnsAsync(tableData, callback)
  fullName: addColumnsAsync(tableData, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: テーブルに追加する1つ以上のデータ列を含む配列 ("matrix") または TableData オブジェクト。 必須です。
      type:
      - TableData | any[][]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync
  summary: 指定されたデータを、追加の行としてテーブルに追加します。
  remarks: >-
    tablebinding.addrowsasync 操作の成功または失敗はアトミックです。 つまり、[列の追加] 操作のすべてが成功するか、または完全にロールバックされます (また、コールバックに返される AsyncResult. status プロパティはエラーを報告します)。


    - data 引数として渡す配列の各行には、更新するテーブルと同じ列数を指定する必要があります。 含まれていない場合は、操作全体が失敗します。


    - 配列内の各列とセルは、新しく追加された行のテーブルに、その列またはセルを正常に追加する必要があります。 何らかの理由で任意の列またはセルが設定されていない場合、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Excel Online の追加コメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>

    #### <a name="examples"></a>例


    ```javascript

    function addRowsToTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.addRowsAsync([["6", "k"], ["7", "j"]]);
        });
    }

    ```
  name: addRowsAsync(rows, options, callback)
  fullName: addRowsAsync(rows, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: 配列の配列 ("matrix")、またはテーブルに追加する1つまたは複数の行を含む TableData オブジェクト。 必須です。
      type:
      - TableData | any[][]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync_1
  summary: 指定されたデータを、追加の行としてテーブルに追加します。
  remarks: >-
    tablebinding.addrowsasync 操作の成功または失敗はアトミックです。 つまり、[列の追加] 操作のすべてが成功するか、または完全にロールバックされます (また、コールバックに返される AsyncResult. status プロパティはエラーを報告します)。


    - data 引数として渡す配列の各行には、更新するテーブルと同じ列数を指定する必要があります。 含まれていない場合は、操作全体が失敗します。


    - 配列内の各列とセルは、新しく追加された行のテーブルに、その列またはセルを正常に追加する必要があります。 何らかの理由で任意の列またはセルが設定されていない場合、操作全体が失敗します。


    - TableData オブジェクトを data 引数として渡す場合は、ヘッダー行の数が更新するテーブルの行数と一致している必要があります。


    Excel Online の追加コメント: data パラメーターに渡される TableData オブジェクト内のセルの合計数は、このメソッドに対する単一の呼び出しでは2万を超えることはできません。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: addRowsAsync(rows, callback)
  fullName: addRowsAsync(rows, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: 配列の配列 ("matrix")、またはテーブルに追加する1つまたは複数の行を含む TableData オブジェクト。 必須です。
      type:
      - TableData | any[][]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync
  summary: バインド テーブルの書式設定をクリアします。
  remarks: >-
    詳細については、「 [Excel 用アドインのテーブルの書式設定](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)」を参照してください。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>

    #### <a name="examples"></a>例


    ```javascript

    // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":

    Office.select("bindings#myBinding").clearFormatsAsync();

    ```
  name: clearFormatsAsync(options, callback)
  fullName: clearFormatsAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync_1
  summary: バインド テーブルの書式設定をクリアします。
  remarks: >-
    詳細については、「 [Excel 用アドインのテーブルの書式設定](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)」を参照してください。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: clearFormatsAsync(callback)
  fullName: clearFormatsAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync
  summary: テーブル内のヘッダー行以外の行と値をすべて削除し、ホスト アプリケーションに応じて適切にシフトします。
  remarks: >-
    Excel では、テーブルにヘッダー行が含まれていない場合、このメソッドはテーブルそのものを削除します。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>

    #### <a name="examples"></a>例


    ```javascript

    function deleteAllRowsFromTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.deleteAllDataValuesAsync();
        });
    }

    ```
  name: deleteAllDataValuesAsync(options, callback)
  fullName: deleteAllDataValuesAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync_1
  summary: テーブル内のヘッダー行以外の行と値をすべて削除し、ホスト アプリケーションに応じて適切にシフトします。
  remarks: >-
    Excel では、テーブルにヘッダー行が含まれていない場合、このメソッドはテーブルそのものを削除します。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: deleteAllDataValuesAsync(callback)
  fullName: deleteAllDataValuesAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.getFormatsAsync
  summary: 表内の指定された項目の書式設定を取得します。
  remarks: >-
    **返される形式構造**


    戻り値の配列内の各 JavaScript オブジェクトの形式は次のとおりです。`{cells:{ cell_range }, format:{ format_definition }}`


    この`cells:`プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。


    **cells プロパティでサポートされている範囲**


    <table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>i 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>


    この`format:`プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する&gt;値を指定し&gt;ます&gt; ([セルの書式設定] または [ホームの書式設定セル] を右クリックします)。
  name: getFormatsAsync(cellReference, formats, options, callback)
  fullName: getFormatsAsync(cellReference, formats, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: 書式設定を取得するセルの範囲を指定する名前と値のペアを含むオブジェクトリテラル。
      type:
      - any
    - id: formats
      description: 取得する書式プロパティを指定する配列。
      type:
      - any[]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。 result `value`のプロパティは、対応するセルの書式設定を指定する1つまたは複数の JavaScript オブジェクトを含む配列です。
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.getFormatsAsync_1
  summary: 表内の指定された項目の書式設定を取得します。
  remarks: >-
    **返される形式構造**


    戻り値の配列内の各 JavaScript オブジェクトの形式は次のとおりです。`{cells:{ cell_range }, format:{ format_definition }}`


    この`cells:`プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。


    **cells プロパティでサポートされている範囲**


    <table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>i 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>


    この`format:`プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する&gt;値を指定し&gt;ます&gt; ([セルの書式設定] または [ホームの書式設定セル] を右クリックします)。
  name: getFormatsAsync(cellReference, formats, callback)
  fullName: getFormatsAsync(cellReference, formats, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: 書式設定を取得するセルの範囲を指定する名前と値のペアを含むオブジェクトリテラル。
      type:
      - any
    - id: formats
      description: 取得する書式プロパティを指定する配列。
      type:
      - any[]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。 result `value`のプロパティは、対応するセルの書式設定を指定する1つまたは複数の JavaScript オブジェクトを含む配列です。
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.setFormatsAsync
  summary: 表内の指定されたアイテムおよびデータに書式を設定します。
  remarks: "**cellFormat パラメーターを指定する**\n\nセルの書式設定値 (幅、高さ、フォント、背景、配置など) を設定または変更するには、cellformat パラメーターを使用します。 cellformat パラメーターとして渡す値は、対象とするセルを指定する1つまたは複数の JavaScript オブジェクト (`cells:`<!-- -->) と、それらに適用する書式`format:`<!-- -->() を含む配列です。\n\ncellformat 配列内の各 JavaScript オブジェクトには、次の形式があります。`{cells:{ cell_range }, format:{ format_definition }}`\n\nこの`cells:`プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。\n\n**cells プロパティでサポートされている範囲**\n\n<table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>i 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>\n\nこの`format:`プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する&gt;値を指定し&gt;ます&gt; ([セルの書式設定] または [ホームの書式設定セル] を右クリックします)。\n\n`format:`プロパティの値は、JavaScript オブジェクトリテラルの1つ以上のプロパティの名前と値のペアのリストとして指定します。 property name では設定する書式設定プロパティの名前を指定し、value ではプロパティの値を指定します。 フォントの色とサイズの両方など、特定の書式の複数の値を指定できます。\n\n3 つの `format:` プロパティ値を指定する例を次に示します。\n\n`//Set cells: font color to green and size to 15 points.`\n\n`format: {fontColor : \"green\", fontSize : 15}`\n\n`//Set cells: border to dotted blue.`\n\n`format: {borderStyle: \"dotted\", borderColor: \"blue\"}`\n\n`//Set cells: background to red and alignment to centered.`\n\n`format: {backgroundColor: \"red\", alignHorizontal: \"center\"}`\n\n数値の書式を指定するには、 `numberFormat:`プロパティで \"code\" 文字列の表示形式を指定します。 指定できる数値書式文字列は、[セルの書式設定] ダイアログボックスの [数値] タブの [ユーザー設定] カテゴリを使用して、Excel で設定できる値に対応しています。 次の使用例は、小数点以下2桁のパーセンテージとして数値を書式設定する方法を示します。\n\n`format: {numberFormat:\"0.00%\"}`\n\n詳細については、「how to [Create a custom number format](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->」を参照してください。\n\nデータを書き込むときにテーブルの書式設定を行うに`Document.setSelectedDataAsync`は、引数 tableoptions および cellformat を`TableBinding.setDataAsync`使用します。またはメソッドを使用します。\n\n`Document.setSelectedDataAsync`およびメソッドのオプションのパラメーターを使用し`TableBinding.setDataAsync`て書式設定を行うと、初めてデータを書き込むときにのみ書式設定が行われます。 データの書き込み後に書式設定を変更するには、次のメソッドを使用します。\n\n- フォントの色やスタイルなどのセルの書式を更新するに`TableBinding.setFormatsAsync`は、メソッド (このメソッド) を使用します。\n\n- 縞模様 (行) やフィルターボタンなどのテーブルオプションを更新する`TableBinding.setTableOptions`には、メソッドを使用します。\n\n- 書式設定をクリアするに`TableBinding.clearFormats`は、メソッドを使用します。\n\n詳細および例については、「<!-- --> [Excel 用アドインでテーブルの書式を設定する方法](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)」を参照してください。\n\n**サポートの詳細**\n\n次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。\n\noffice ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。\n\n*サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Specifying a single target\n// The following example shows a cellFormat value that sets the font color of the header row to red.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: Office.Table.Headers, format: {fontColor: \"red\"}}], \n    function (asyncResult){});\n\n// Specifying multiple targets\n// The setFormatsAsync method can support formatting multiple targets within the bound table in a \n// single function call. To do that, you pass a list of objects in the cellFormat array \n// for each target that you want to format.\n// For example, the following line of code will set the font color of the first row yellow, \n// and the fourth cell in the third row to have a white border and bold text.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n\n// Additional remarks for Excel Online\n// The number of formatting groups passed to the cellFormat parameter can't exceed 100. \n// A single formatting group consists of a set of formatting applied to a specified range of cells. \n// For example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n```"
  name: setFormatsAsync(cellFormat, options, callback)
  fullName: setFormatsAsync(cellFormat, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: 対象とするセルとその書式設定を指定する1つまたは複数の JavaScript オブジェクトを含む配列。
      type:
      - any[]
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setFormatsAsync_1
  summary: 表内の指定されたアイテムおよびデータに書式を設定します。
  remarks: >-
    **cellFormat パラメーターを指定する**


    セルの書式設定値 (幅、高さ、フォント、背景、配置など) を設定または変更するには、cellformat パラメーターを使用します。 cellformat パラメーターとして渡す値は、対象とするセルを指定する1つまたは複数の JavaScript オブジェクト (`cells:`<!-- -->) と、それらに適用する書式`format:`<!-- -->() を含む配列です。


    cellformat 配列内の各 JavaScript オブジェクトには、次の形式があります。`{cells:{ cell_range }, format:{ format_definition }}`


    この`cells:`プロパティは、次のいずれかの値を使用して書式設定する範囲を指定します。


    **cells プロパティでサポートされている範囲**


    <table> <tr> <th>cells の範囲の設定</th> <th>説明</th> </tr> <tr> <td>`{row: n}`</td> <td>テーブル内のデータの0から始まる n 番目の行の範囲を指定します。</td> </tr> <tr> <td>`{column: n}`</td> <td>テーブル内のデータの0から始まる n 番目の列である範囲を指定します。</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>i 行とテーブルの j 番目列である単一のセルを指定します。</td> </tr> <tr> <td>`Office.Table.All`</td> <td>列見出し、データ、集計 (もしあれば) を含むテーブル全体を指定します。</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>テーブル内のデータのみ (見出しと集計を含まない) を指定します。</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>見出し行のみを指定します。</td> </tr> </table>


    この`format:`プロパティは、Excel の [セルの書式設定] ダイアログボックスで使用可能な設定のサブセットに対応する&gt;値を指定し&gt;ます&gt; ([セルの書式設定] または [ホームの書式設定セル] を右クリックします)。


    `format:`プロパティの値は、JavaScript オブジェクトリテラルの1つ以上のプロパティの名前と値のペアのリストとして指定します。 property name では設定する書式設定プロパティの名前を指定し、value ではプロパティの値を指定します。 フォントの色とサイズの両方など、特定の書式の複数の値を指定できます。


    3 つの `format:` プロパティ値を指定する例を次に示します。


    `//Set cells: font color to green and size to 15 points.`


    `format: {fontColor : "green", fontSize : 15}`


    `//Set cells: border to dotted blue.`


    `format: {borderStyle: "dotted", borderColor: "blue"}`


    `//Set cells: background to red and alignment to centered.`


    `format: {backgroundColor: "red", alignHorizontal: "center"}`


    数値の書式を指定するには、 `numberFormat:`プロパティで "code" 文字列の表示形式を指定します。 指定できる数値書式文字列は、[セルの書式設定] ダイアログボックスの [数値] タブの [ユーザー設定] カテゴリを使用して、Excel で設定できる値に対応しています。 次の使用例は、小数点以下2桁のパーセンテージとして数値を書式設定する方法を示します。


    `format: {numberFormat:"0.00%"}`


    詳細については、「how to [Create a custom number format](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->」を参照してください。


    データを書き込むときにテーブルの書式設定を行うに`Document.setSelectedDataAsync`は、引数 tableoptions および cellformat を`TableBinding.setDataAsync`使用します。またはメソッドを使用します。


    `Document.setSelectedDataAsync`およびメソッドのオプションのパラメーターを使用し`TableBinding.setDataAsync`て書式設定を行うと、初めてデータを書き込むときにのみ書式設定が行われます。 データの書き込み後に書式設定を変更するには、次のメソッドを使用します。


    - フォントの色やスタイルなどのセルの書式を更新するに`TableBinding.setFormatsAsync`は、メソッド (このメソッド) を使用します。


    - 縞模様 (行) やフィルターボタンなどのテーブルオプションを更新する`TableBinding.setTableOptions`には、メソッドを使用します。


    - 書式設定をクリアするに`TableBinding.clearFormats`は、メソッドを使用します。


    詳細および例については、「<!-- --> [Excel 用アドインでテーブルの書式を設定する方法](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)」を参照してください。


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: setFormatsAsync(cellFormat, callback)
  fullName: setFormatsAsync(cellFormat, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: 対象とするセルとその書式設定を指定する1つまたは複数の JavaScript オブジェクトを含む配列。
      type:
      - any[]
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync
  summary: バインド テーブルにおけるテーブル書式設定オプションを更新します。
  remarks: "<table> <tr><td>ホスト</td><td>Excel</td></tr> <tr><td>要件セット</td><td>セットには指定できない</td></tr> </table>\n\ndocument.gotobyidasync メソッドに渡されたコールバック関数で、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。\n\n<table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>書式を設定するときに取得するデータまたはオブジェクトがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>\n\n**サポートの詳細**\n\n次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。\n\noffice ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。\n\n*サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example shows how to:\n// 1. Create an object literal that specifies the table formatting options to update on the bound table.\n// 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object\n//    with formatting setting as the tableOptions parameter.\nfunction updateTableFormatting(){\n    var tableOptions = {bandedRows: true, filterButton: false, style: \"TableStyleMedium3\"}; \n\n    Office.select(\"bindings#myBinding\").setTableOptionsAsync(tableOptions, function(asyncResult){});\n}\n```"
  name: setTableOptionsAsync(tableOptions, options, callback)
  fullName: setTableOptionsAsync(tableOptions, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: 適用するテーブルオプションを定義するプロパティの名前と値のペアのリストを含むオブジェクトリテラル。
      type:
      - any
    - id: options
      description: コールバックで使用するために、変更されていない任意の型のコンテキストデータを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync_1
  summary: バインド テーブルにおけるテーブル書式設定オプションを更新します。
  remarks: >-
    <table> <tr><td>ホスト</td><td>Excel</td></tr> <tr><td>要件セット</td><td>セットには指定できない</td></tr> </table>


    document.gotobyidasync メソッドに渡されたコールバック関数で、AsyncResult オブジェクトのプロパティを使用して、次の情報を返すことができます。


    <table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>書式を設定するときに取得するデータまたはオブジェクトがないため、常に undefined を返します。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>


    **サポートの詳細**


    次の表で、大文字 Y は、このメソッドは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのメソッドをサポートしないことを示します。


    office ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: setTableOptionsAsync(tableOptions, callback)
  fullName: setTableOptionsAsync(tableOptions, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: 適用するテーブルオプションを定義するプロパティの名前と値のペアのリストを含むオブジェクトリテラル。
      type:
      - any
    - id: callback
      description: 省略可能。 コールバックが戻るときに呼び出される関数で、唯一のパラメーターは、型が[Office](xref:office.Office.AsyncResult)<!-- -->であるということです。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.columnCount
  summary: tablebinding 内の列数を表す整数値を取得します。
  remarks: "**サポートの詳細**\n\n次の表で、大文字 Y は、このプロパティは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのプロパティをサポートしないことを示します。\n\noffice ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。\n\n*サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showBindingColumnCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Column: \" + asyncResult.value.columnCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnCount: number;'
    return:
      type:
      - number
- uid: office.Office.TableBinding.hasHeaders
  summary: テーブルにヘッダーがある場合は True。それ以外の場合は false。
  remarks: "**サポートの詳細**\n\n次の表で、大文字 Y は、このプロパティは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのプロパティをサポートしないことを示します。\n\noffice ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。\n\n*サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showBindingHasHeaders() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Binding has headers: \" + asyncResult.value.hasHeaders);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: hasHeaders
  fullName: hasHeaders
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hasHeaders: boolean;'
    return:
      type:
      - boolean
- uid: office.Office.TableBinding.rowCount
  summary: tablebinding 内の行の数を表す整数値を取得します。
  remarks: "excel 2013 と excel Online で1行を選択して空のテーブルを挿入すると ([挿入] タブの表を使用して)、両方の Office ホストアプリケーションは、ヘッダーの1行を作成し、その後に1つの空白行を作成します。 ただし、アドインのスクリプトによって、新しく挿入されたテーブルのバインドが作成される場合 (たとえば、 [Office.](xref:office.Office.Bindings)<!-- -->addfromselectionasync メソッドを使用する場合)、rowCount プロパティの値がチェックされる場合、返される値は異なります。excel 2013 または excel Online でスプレッドシートが開かれているかどうかによって異なります。\n\n- デスクトップ上の Excel では、rowCount は0を返します (ヘッダーに続く空の行は計算されません)。\n\n- Excel Online では、rowCount は1を返します (ヘッダーに続く空の行はカウントされます)。\n\nスクリプトでこの違いを回避するには、rowCount = = 1 かどうかを確認して、行にすべての空の文字列が含まれているかどうかを確認します。\n\nAccess 用コンテンツアドインでは、パフォーマンス上の理由から rowCount プロパティは常に-1 を返します。\n\n**サポートの詳細**\n\n次の表で、大文字 Y は、このプロパティは、対応する Office ホスト アプリケーションでサポートされていることを示します。空のセルは、Office ホスト アプリケーションでこのプロパティをサポートしないことを示します。\n\noffice ホストアプリケーションとサーバーの要件の詳細については、「 [office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->」を参照してください。\n\n*サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>接続</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>シート</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>段落</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showBindingRowCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Rows: \" + asyncResult.value.rowCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowCount: number;'
    return:
      type:
      - number
