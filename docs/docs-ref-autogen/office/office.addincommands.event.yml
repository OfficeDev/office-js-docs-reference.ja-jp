### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Event
    summary: イベントオブジェクトは、UI レスコマンドボタンによって呼び出されるアドイン関数にパラメーターとして渡されます。 オブジェクトにより、アドインはどのボタンがクリックされたかを識別し、その処理を行ったホストにシグナルを送ることができます。
    remarks: |-
      詳細なサポート情報については、「[アドインコマンドの要件セット](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets)」を参照してください。

      **[最小のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: 制限付き** [Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: 新規作成または読み取り
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Event.completed
      - office.Office.AddinCommands.Event.source
  - uid: office.Office.AddinCommands.Event.completed
    summary: |-
      アドインが、アドイン コマンド ボタンまたはイベント ハンドラーによりトリガーされた処理を完了したことを示します。

      このメソッドは、xsi: type 属性を ExecuteFunction に設定した Action 要素で定義されたアドインコマンドによって呼び出された、関数の最後で呼び出される必要があります。 このメソッドを呼び出すと、関数が終了したことと、関数の呼び出しに関連するすべての状態をクリーンアップできることがホスト クライアントに通知されます。 たとえば、ユーザーがこのメソッドを呼び出す前に Outlook を終了すると、関数が実行中であることが Outlook により警告されます。

      このメソッドは、イベントの処理が完了した後、Office.context.mailbox.addHandlerAsync 経由で追加されたイベント ハンドラーで呼び出される必要があります。

      \[[API set: Mailbox 1.3](/office/dev/add-ins/reference/javascript-api-for-office)\]
    remarks: |-
      **[最小のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: 制限付き** [Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: 新規作成または読み取り

      メールボックスプレビューで`options` `options`パラメーターがサポートされている間、メールボックス1.3 にパラメーターはありません。

      #### <a name="examples"></a>例

      ```javascript
      function processItem (event) {
          // Do some processing

          event.completed();
      }

      // In the following example, the checkMessage function has
      // been registered as an event handler for ItemSend.
      function checkMessage(event) {
          // Get the item being sent
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK"
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in result.value
              if (result.value.indexOf('BLOCK') != -1) {
                  // Value is found, stop send
                  event.completed({allowEvent = false});
              } else {
                  // Value wasn't found, allow send
                  event.completed({allowEvent = true});
              }
          });
      }
      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: { allowEvent: boolean }): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 allowevent: ブール値。 completed メソッドがイベントハンドラーの完了を通知するために使用される場合、この値は、処理されたイベントが実行を続行するか、またはキャンセルされることを示します。 たとえば、itemsend イベントを処理するアドインは、allowevent = false を設定して、メッセージの送信を取り消すことができます。'
          type:
            - '{ allowEvent: boolean }'
  - uid: office.Office.AddinCommands.Event.source
    summary: この関数の呼び出しをトリガーしたコントロールに関する情報。
    remarks: |-
      このプロパティは、「メールボックス1.3 以降の[要件セット](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)」の Outlook でのみサポートされています。

      #### <a name="examples"></a>例

      ```javascript
      // In this example, consider a button defined in an add-in manifest as follows:
      //<Control xsi:type="Button" id="eventTestButton">
      //    <Label resid="eventButtonLabel" />
      //    <Tooltip resid="eventButtonTooltip" />
      //    <Supertip>
      //        <Title resid="eventSuperTipTitle" />
      //        <Description resid="eventSuperTipDescription" />
      //    </Supertip>
      //    <Icon>
      //        <bt:Image size="16" resid="blue-icon-16" />
      //        <bt:Image size="32" resid="blue-icon-32" />
      //        <bt:Image size="80" resid="blue-icon-80" />
      //    </Icon>
      //    <Action xsi:type="ExecuteFunction">
      //        <FunctionName>testEventObject</FunctionName>
      //    </Action>
      //</Control>

      // The button has an id attribute set to eventTestButton, and will invoke
      // the testEventObject function defined in the add-in.
      // That function looks like this:
      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }
      ```
      ```javascript
      // Function is used by two buttons:
      // button1 and button2
      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }
      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - office.Office.AddinCommands.Source