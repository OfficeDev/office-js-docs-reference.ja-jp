### YamlMime:UniversalReference
items:
  - uid: office.OfficeExtension.LoadOption
    summary: <span data-ttu-id="676d4-101">読み込む必要のあるオブジェクトのプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="676d4-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="676d4-102">この負荷は sync () メソッドが実行されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="676d4-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="676d4-103">これにより、Office オブジェクトと、それに対応する JavaScript プロキシオブジェクトとの間で状態が同期されます。</span><span class="sxs-lookup"><span data-stu-id="676d4-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>
    remarks: |-
      <span data-ttu-id="676d4-104">Word では、プロパティとページング情報を指定する方法として、文字列リテラルを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="676d4-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="676d4-105">最初の 2 つの例は、段落コレクションの段落のテキストおよびフォント サイズのプロパティを要求するための推奨される方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="676d4-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>

      `context.load(paragraphs, 'text, font/size');`

      `paragraphs.load('text, font/size');`

      <span data-ttu-id="676d4-106">次に、オブジェクト表記 (ページングを含む) を使用する、類似の例を示します。</span><span class="sxs-lookup"><span data-stu-id="676d4-106">Here is a similar example using object notation (includes paging):</span></span>

      `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      <span data-ttu-id="676d4-107">select ステートメントのフォント オブジェクトで特定のプロパティを指定しない場合、すべてのフォント プロパティが読み込まれることを expand ステートメントが単独で示します。</span><span class="sxs-lookup"><span data-stu-id="676d4-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

      #### <a name="examples"></a><span data-ttu-id="676d4-108">例</span><span class="sxs-lookup"><span data-stu-id="676d4-108">Examples</span></span>

      ```javascript
      // This example shows how to get the paragraphs in the Word document
      // along with their text and font size properties.

      // Run a batch operation against the Word object model.
      Word.run(function (context) {
          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the text and font properties.
          // It is best practice to always specify the property set.
          // Otherwise, all properties are returned on the object.
          context.load(paragraphs, 'text, font/size');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              // Insert code that works with the paragraphs loaded by context.load().
          })
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: OfficeExtension.LoadOption
    fullName: OfficeExtension.LoadOption
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.OfficeExtension.LoadOption.expand
      - office.OfficeExtension.LoadOption.select
      - office.OfficeExtension.LoadOption.skip
      - office.OfficeExtension.LoadOption.top
  - uid: office.OfficeExtension.LoadOption.expand
    summary: '<span data-ttu-id="676d4-109">読み込むナビゲーションプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="676d4-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>'
    name: expand
    fullName: expand
    langs:
      - typeScript
    type: property
    syntax:
      content: 'expand?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.select
    summary: '<span data-ttu-id="676d4-110">読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="676d4-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>'
    name: select
    fullName: select
    langs:
      - typeScript
    type: property
    syntax:
      content: 'select?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.skip
    summary: '<span data-ttu-id="676d4-111">コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="676d4-111">Only usable on collection types.</span></span> <span data-ttu-id="676d4-112">コレクション内でスキップされ、結果に含まれていないアイテムの数を指定します。</span><span class="sxs-lookup"><span data-stu-id="676d4-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="676d4-113">top が指定されている場合、指定された数のアイテムをスキップした後、結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="676d4-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>'
    name: skip
    fullName: skip
    langs:
      - typeScript
    type: property
    syntax:
      content: 'skip?: number;'
      return:
        type:
          - number
  - uid: office.OfficeExtension.LoadOption.top
    summary: <span data-ttu-id="676d4-114">コレクション型でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="676d4-114">Only usable on collection types.</span></span> <span data-ttu-id="676d4-115">結果に含めることができるコレクション項目の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="676d4-115">Specifies the maximum number of collection items that can be included in the result.</span></span>
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'top?: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="676d4-116">例</span><span class="sxs-lookup"><span data-stu-id="676d4-116">Examples</span></span>

          ```javascript
          // This OneNote example shows how to get the page title and indentation level
          // of the top five pages in the current section.
          OneNote.run(function (context) {
              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;

              // Queue a command to load the pages.           
              pages.load({ "select":"title,pageLevel", "top":5, "skip":0 });
              return context.sync()
                  .then(function() {
                      // Iterate through the collection of pages.    
                      $.each(pages.items, function(index, page) {
                          // Show some properties.
                          console.log("Page title: " + page.title);
                          console.log("Indentation level: " + page.pageLevel);
                      });
                  }).catch(function(error) {
                      console.log("Error: " + error);
                      if (error instanceof OfficeExtension.Error) {
                          console.log("Debug info: " + JSON.stringify(error.debugInfo));
                      }
                  })
              });
          ```