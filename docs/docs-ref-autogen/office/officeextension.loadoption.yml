### YamlMime:UniversalReference
ms.openlocfilehash: 2bc30a82c50ce11d0aa784fccac3c9a4bc94dda9
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 09/20/2018
ms.locfileid: "24048465"
items:
- uid: office.OfficeExtension.LoadOption
  summary: オブジェクトのプロパティを読み込む必要があるかを指定します。 この負荷は、sync() メソッドが実行されるときに発生します。 これにより、Office のオブジェクトと対応する JavaScript プロキシ オブジェクトの状態が同期されます。
  remarks: >-
    単語、文字列リテラルを使用してプロパティを指定して、情報をページングの方法をお勧めは。 最初の 2 つの例では、段落のコレクション内の各段落のテキストとフォント サイズ プロパティを要求するための推奨される方法を示しています。


    `context.load(paragraphs, 'text, font/size');`


    `paragraphs.load('text, font/size');`


    次に、オブジェクト表記 (ページングを含む) を使用する、類似の例を示します。


    `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    select ステートメントのフォント オブジェクトで特定のプロパティを指定しない場合、すべてのフォント プロパティが読み込まれることを expand ステートメントが単独で示します。

    #### <a name="examples"></a>例


    ```javascript

    // This example shows how to get the paragraphs in the Word document

    // along with their text and font size properties.


    // Run a batch operation against the Word object model.

    Word.run(function (context) {
        // Create a proxy object for the paragraphs collection.
        var paragraphs = context.document.body.paragraphs;

        // Queue a commmand to load the text and font properties.
        // It is best practice to always specify the property set.
        // Otherwise, all properties are returned on the object.
        context.load(paragraphs, 'text, font/size');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            // Insert code that works with the paragraphs loaded by context.load().
        })
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: OfficeExtension.LoadOption
  fullName: office.OfficeExtension.LoadOption
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.OfficeExtension.LoadOption.expand
  - office.OfficeExtension.LoadOption.select
  - office.OfficeExtension.LoadOption.skip
  - office.OfficeExtension.LoadOption.top
- uid: office.OfficeExtension.LoadOption.expand
  summary: コンマで区切られた文字列、または文字列の配列では、読み込むナビゲーション プロパティを指定します。
  name: expand
  fullName: office.OfficeExtension.LoadOption.expand
  langs:
  - typeScript
  type: property
  syntax:
    content: 'expand?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.select
  summary: コンマで区切られた文字列、または文字列の配列では、読み込むプロパティを指定します。
  name: select
  fullName: office.OfficeExtension.LoadOption.select
  langs:
  - typeScript
  type: property
  syntax:
    content: 'select?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.skip
  summary: コレクション型でのみ使用可能です。 スキップし、結果には含まれませんが、コレクション内の項目数を指定します。 上部を指定すると、指定数のアイテムをスキップした後、結果セットが開始されます。
  name: skip
  fullName: office.OfficeExtension.LoadOption.skip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'skip?: number;'
    return:
      type:
      - number
- uid: office.OfficeExtension.LoadOption.top
  summary: コレクション型でのみ使用可能です。 結果に含めることができるコレクション アイテムの最大数を指定します。
  name: top
  fullName: office.OfficeExtension.LoadOption.top
  langs:
  - typeScript
  type: property
  syntax:
    content: 'top?: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
