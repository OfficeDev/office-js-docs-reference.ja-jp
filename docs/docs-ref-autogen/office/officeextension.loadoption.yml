### YamlMime:UniversalReference
ms.openlocfilehash: 2bc30a82c50ce11d0aa784fccac3c9a4bc94dda9
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 09/28/2018
ms.locfileid: "24048465"
items:
- uid: office.OfficeExtension.LoadOption
  summary: <span data-ttu-id="9e389-101">オブジェクトのプロパティを読み込む必要があるかを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e389-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="9e389-102">この負荷は、sync() メソッドが実行されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="9e389-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="9e389-103">これにより、Office のオブジェクトと対応する JavaScript プロキシ オブジェクトの状態が同期されます。</span><span class="sxs-lookup"><span data-stu-id="9e389-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>
  remarks: >-
    <span data-ttu-id="9e389-104">単語、文字列リテラルを使用してプロパティを指定して、情報をページングの方法をお勧めは。</span><span class="sxs-lookup"><span data-stu-id="9e389-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="9e389-105">最初の 2 つの例では、段落のコレクション内の各段落のテキストとフォント サイズ プロパティを要求するための推奨される方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e389-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>


    `context.load(paragraphs, 'text, font/size');`


    `paragraphs.load('text, font/size');`


    <span data-ttu-id="9e389-106">次に、オブジェクト表記 (ページングを含む) を使用する、類似の例を示します。</span><span class="sxs-lookup"><span data-stu-id="9e389-106">Here is a similar example using object notation (includes paging):</span></span>


    `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    <span data-ttu-id="9e389-107">select ステートメントのフォント オブジェクトで特定のプロパティを指定しない場合、すべてのフォント プロパティが読み込まれることを expand ステートメントが単独で示します。</span><span class="sxs-lookup"><span data-stu-id="9e389-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

    #### <a name="examples"></a><span data-ttu-id="9e389-108">例</span><span class="sxs-lookup"><span data-stu-id="9e389-108">Examples</span></span>


    ```javascript

    // This example shows how to get the paragraphs in the Word document

    // along with their text and font size properties.


    // Run a batch operation against the Word object model.

    Word.run(function (context) {
        // Create a proxy object for the paragraphs collection.
        var paragraphs = context.document.body.paragraphs;

        // Queue a commmand to load the text and font properties.
        // It is best practice to always specify the property set.
        // Otherwise, all properties are returned on the object.
        context.load(paragraphs, 'text, font/size');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            // Insert code that works with the paragraphs loaded by context.load().
        })
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: OfficeExtension.LoadOption
  fullName: office.OfficeExtension.LoadOption
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.OfficeExtension.LoadOption.expand
  - office.OfficeExtension.LoadOption.select
  - office.OfficeExtension.LoadOption.skip
  - office.OfficeExtension.LoadOption.top
- uid: office.OfficeExtension.LoadOption.expand
  summary: <span data-ttu-id="9e389-109">コンマで区切られた文字列、または文字列の配列では、読み込むナビゲーション プロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e389-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>
  name: expand
  fullName: office.OfficeExtension.LoadOption.expand
  langs:
  - typeScript
  type: property
  syntax:
    content: 'expand?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.select
  summary: <span data-ttu-id="9e389-110">コンマで区切られた文字列、または文字列の配列では、読み込むプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e389-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>
  name: select
  fullName: office.OfficeExtension.LoadOption.select
  langs:
  - typeScript
  type: property
  syntax:
    content: 'select?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.skip
  summary: <span data-ttu-id="9e389-111">コレクション型でのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="9e389-111">Only usable on collection types.</span></span> <span data-ttu-id="9e389-112">スキップし、結果には含まれませんが、コレクション内の項目数を指定します。</span><span class="sxs-lookup"><span data-stu-id="9e389-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="9e389-113">上部を指定すると、指定数のアイテムをスキップした後、結果セットが開始されます。</span><span class="sxs-lookup"><span data-stu-id="9e389-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: skip
  fullName: office.OfficeExtension.LoadOption.skip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'skip?: number;'
    return:
      type:
      - number
- uid: office.OfficeExtension.LoadOption.top
  summary: <span data-ttu-id="9e389-114">コレクション型でのみ使用可能です。</span><span class="sxs-lookup"><span data-stu-id="9e389-114">Only usable on collection types.</span></span> <span data-ttu-id="9e389-115">結果に含めることができるコレクション アイテムの最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="9e389-115">Specifies the maximum number of collection items that can be included in the result.</span></span>
  name: top
  fullName: office.OfficeExtension.LoadOption.top
  langs:
  - typeScript
  type: property
  syntax:
    content: 'top?: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"9e389-116\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"9e389-116\">Examples</span></span>\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
