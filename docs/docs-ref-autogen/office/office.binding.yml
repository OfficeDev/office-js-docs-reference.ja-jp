### YamlMime:UniversalReference
ms.openlocfilehash: c4c679765c2366dc8b95782f0855853d6568ed53
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 09/28/2018
ms.locfileid: "24049375"
items:
- uid: office.Office.Binding
  summary: <span data-ttu-id="24bdf-101">文書のセクションへのバインドを表します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-101">Represents a binding to a section of the document.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="24bdf-102">要件の設定</span><span class="sxs-lookup"><span data-stu-id="24bdf-102">Requirement Sets</span></span></td><td><span data-ttu-id="24bdf-103">MatrixBinding, TableBinding, TextBinding</span><span class="sxs-lookup"><span data-stu-id="24bdf-103">MatrixBinding, TableBinding, TextBinding</span></span></td></tr></table>


    <span data-ttu-id="24bdf-104">バインディング オブジェクトでは、種類に関係なくすべてのバインドが持つ機能を公開します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-104">The Binding object exposes the functionality possessed by all bindings regardless of type.</span></span>


    <span data-ttu-id="24bdf-105">バインディング オブジェクトを直接呼び出すことはありませんが。</span><span class="sxs-lookup"><span data-stu-id="24bdf-105">The Binding object is never called directly.</span></span> <span data-ttu-id="24bdf-106">それぞれの種類のバインディングを表すオブジェクトの抽象親クラスである: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->、 [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->、または[Office.TextBinding](xref:office.Office.TextBinding)<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-106">It is the abstract parent class of the objects that represent each type of binding: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->, or [Office.TextBinding](xref:office.Office.TextBinding)<!-- -->.</span></span> <span data-ttu-id="24bdf-107">バインド内のデータとの対話を可能にするバインディング オブジェクトの setDataAsync メソッドと、これらのオブジェクトのすべての 3 つが、getDataAsync を継承します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-107">All three of these objects inherit the getDataAsync and setDataAsync methods from the Binding object that enable to you interact with the data in the binding.</span></span> <span data-ttu-id="24bdf-108">それらのプロパティ値を照会するための id と型のプロパティを継承します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-108">They also inherit the id and type properties for querying those property values.</span></span> <span data-ttu-id="24bdf-109">さらに、MatrixBinding と結合テーブル結合オブジェクトは、行と列の数を数えるなどのマトリックスとテーブルに固有の機能の追加のメソッドを公開します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-109">Additionally, the MatrixBinding and TableBinding objects expose additional methods for matrix- and table-specific features, such as counting the number of rows and columns.</span></span>


    <span data-ttu-id="24bdf-110">**サポートの詳細**</span><span class="sxs-lookup"><span data-stu-id="24bdf-110">**Support details**</span></span>


    <span data-ttu-id="24bdf-111">大文字 Y の次のマトリックスでは、対応する Office ホスト アプリケーションでこのインターフェイスがサポートされていることを示します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-111">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="24bdf-112">空のセルでは、Office ホスト アプリケーションでこのインターフェイスをサポートしないことを示します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-112">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="24bdf-113">Office ホスト アプリケーションとサーバーの要件の詳細については、 [Office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)を参照してください<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-113">For more information about Office host application and server requirements, see [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="24bdf-114">*サポートされるホスト (プラットフォーム別)*</span><span class="sxs-lookup"><span data-stu-id="24bdf-114">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="24bdf-115">Windows デスクトップ版 Office</span><span class="sxs-lookup"><span data-stu-id="24bdf-115">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="24bdf-116">Office Online (ブラウザー)</span><span class="sxs-lookup"><span data-stu-id="24bdf-116">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="24bdf-117">Office for iPad</span><span class="sxs-lookup"><span data-stu-id="24bdf-117">Office for iPad</span></span> </th></tr> <tr><td><span data-ttu-id="24bdf-118"><strong>アクセス</strong></span><span class="sxs-lookup"><span data-stu-id="24bdf-118"><strong> Access </strong></span></span></td><td> </td><td> <span data-ttu-id="24bdf-119">Y</span><span class="sxs-lookup"><span data-stu-id="24bdf-119">Y</span></span> </td><td> </td></tr> <tr><td><span data-ttu-id="24bdf-120"><strong>Excel</strong></span><span class="sxs-lookup"><span data-stu-id="24bdf-120"><strong> Excel </strong></span></span></td><td> <span data-ttu-id="24bdf-121">Y</span><span class="sxs-lookup"><span data-stu-id="24bdf-121">Y</span></span> </td><td> <span data-ttu-id="24bdf-122">Y</span><span class="sxs-lookup"><span data-stu-id="24bdf-122">Y</span></span> </td><td> <span data-ttu-id="24bdf-123">Y</span><span class="sxs-lookup"><span data-stu-id="24bdf-123">Y</span></span> </td></tr> <tr><td><span data-ttu-id="24bdf-124"><strong>単語</strong></span><span class="sxs-lookup"><span data-stu-id="24bdf-124"><strong> Word </strong></span></span></td><td> <span data-ttu-id="24bdf-125">Y</span><span class="sxs-lookup"><span data-stu-id="24bdf-125">Y</span></span> </td><td> <span data-ttu-id="24bdf-126">Y</span><span class="sxs-lookup"><span data-stu-id="24bdf-126">Y</span></span> </td><td> <span data-ttu-id="24bdf-127">Y</span><span class="sxs-lookup"><span data-stu-id="24bdf-127">Y</span></span> </td></tr> </table>
  name: Office.Binding
  fullName: office.Office.Binding
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.Binding.addHandlerAsync
  - office.Office.Binding.document
  - office.Office.Binding.getDataAsync
  - office.Office.Binding.id
  - office.Office.Binding.removeHandlerAsync
  - office.Office.Binding.setDataAsync
  - office.Office.Binding.type
- uid: office.Office.Binding.addHandlerAsync
  summary: <span data-ttu-id="24bdf-128">指定された[Office.EventType](xref:office.Office.EventType)のオブジェクトにイベント ハンドラーを追加<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-128">Adds an event handler to the object for the specified [Office.EventType](xref:office.Office.EventType)<!-- -->.</span></span> <span data-ttu-id="24bdf-129">EventTypes がサポートされているは`Office.EventType.BindingDataChanged`と`Office.EventType.BindingSelectionChanged`。</span><span class="sxs-lookup"><span data-stu-id="24bdf-129">Supported EventTypes are `Office.EventType.BindingDataChanged` and `Office.EventType.BindingSelectionChanged`.</span></span>
  remarks: "<span data-ttu-id=\"24bdf-130\">各イベント ハンドラー関数の名前が重複しない限り、指定されたイベントの種類の複数のイベント ハンドラーを追加できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-130\">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"24bdf-131\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-131\">Examples</span></span>\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.Binding.addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="24bdf-132">イベントの種類。</span><span class="sxs-lookup"><span data-stu-id="24bdf-132">The event type.</span></span> <span data-ttu-id="24bdf-133">バインド」のことができます`Office.EventType.BindingDataChanged`または`Office.EventType.BindingSelectionChanged`。</span><span class="sxs-lookup"><span data-stu-id="24bdf-133">For bindings, it can be `Office.EventType.BindingDataChanged` or `Office.EventType.BindingSelectionChanged`.</span></span>
      type:
      - Office.EventType
    - id: handler
      description: <span data-ttu-id="24bdf-134">[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs)または[Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)の型が唯一のパラメーターは、イベント ハンドラー関数を追加するに<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-134">The event handler function to add, whose only parameter is of type[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) or [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.</span></span>
      type:
      - any
    - id: options
      description: <span data-ttu-id="24bdf-135">任意の型を変更せずに、コールバックで使用するためのコンテキスト データを保持するためのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-135">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="24bdf-136">省略可能。</span><span class="sxs-lookup"><span data-stu-id="24bdf-136">Optional.</span></span> <span data-ttu-id="24bdf-137">関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-137">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: office.Office.Binding.document
  summary: <span data-ttu-id="24bdf-138">バインディングに関連付けられているドキュメント オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-138">Get the Document object associated with the binding.</span></span>
  name: document
  fullName: office.Office.Binding.document
  langs:
  - typeScript
  type: property
  syntax:
    content: 'document: Office.Document;'
    return:
      type:
      - office.Office.Document
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"24bdf-139\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-139\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.getDataAsync
  summary: <span data-ttu-id="24bdf-140">バインド内に含まれるデータを返します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-140">Returns the data contained within the binding.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"24bdf-141\">要件の設定</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-141\">Requirement Sets</span></span></td><td><span data-ttu-id=\"24bdf-142\">MatrixBindings, TableBindings, TextBindings</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-142\">MatrixBindings, TableBindings, TextBindings</span></span></td></tr></table>\n\n<span data-ttu-id=\"24bdf-143\">MatrixBinding または結合テーブル結合から呼び出されると、startRow、startColumn、行数、および列数の省略可能なパラメーターが指定されている (連続した、有効な範囲を指定する) 場合、getDataAsync メソッドは、バインドされた値のサブセットを返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-143\">When called from a MatrixBinding or TableBinding, the getDataAsync method will return a subset of the bound values if the optional startRow, startColumn, rowCount, and columnCount parameters are specified (and they specify a contiguous and valid range).</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"24bdf-144\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-144\">Examples</span></span>\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  name: getDataAsync(options, callback)
  fullName: office.Office.Binding.getDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="24bdf-145">バインディングでデータを取得する方法に関するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-145">Provides options for how to get the data in a binding.</span></span>
      type:
      - office.Office.GetBindingDataOptions
    - id: callback
      description: <span data-ttu-id="24bdf-146">省略可能。</span><span class="sxs-lookup"><span data-stu-id="24bdf-146">Optional.</span></span> <span data-ttu-id="24bdf-147">関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-147">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="24bdf-148">`value` 、結果のプロパティは、指定したバインディングの値です。</span><span class="sxs-lookup"><span data-stu-id="24bdf-148">The `value` property of the result is the values in the specified binding.</span></span> <span data-ttu-id="24bdf-149">場合、`coercionType`パラメーターが指定されている (と、呼び出しが成功した)、CoercionType 列挙体のトピックで説明した形式でデータが返されます。</span><span class="sxs-lookup"><span data-stu-id="24bdf-149">If the `coercionType` parameter is specified (and the call is successful), the data is returned in the format described in the CoercionType enumeration topic.</span></span>
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Binding.id
  summary: <span data-ttu-id="24bdf-150">同じ[Office.Document](xref:office.Office.Document)オブジェクト内のバインディングのバインディングを一意に識別する文字列です。</span><span class="sxs-lookup"><span data-stu-id="24bdf-150">A string that uniquely identifies this binding among the bindings in the same [Office.Document](xref:office.Office.Document) object.</span></span>
  name: id
  fullName: office.Office.Binding.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"24bdf-151\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-151\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.removeHandlerAsync
  summary: <span data-ttu-id="24bdf-152">指定されたイベントの種類のバインドから、指定されたハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-152">Removes the specified handler from the binding for the specified event type.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="24bdf-153">要件の設定</span><span class="sxs-lookup"><span data-stu-id="24bdf-153">Requirement Sets</span></span></td><td><span data-ttu-id="24bdf-154">BindingEvents</span><span class="sxs-lookup"><span data-stu-id="24bdf-154">BindingEvents</span></span></td></tr></table>

    #### <span data-ttu-id="24bdf-155">例</span><span class="sxs-lookup"><span data-stu-id="24bdf-155">Examples</span></span>


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  name: removeHandlerAsync(eventType, options, callback)
  fullName: office.Office.Binding.removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="24bdf-156">イベントの種類。</span><span class="sxs-lookup"><span data-stu-id="24bdf-156">The event type.</span></span> <span data-ttu-id="24bdf-157">バインド」のことができます`Office.EventType.BindingDataChanged`または`Office.EventType.BindingSelectionChanged`。</span><span class="sxs-lookup"><span data-stu-id="24bdf-157">For bindings, it can be `Office.EventType.BindingDataChanged` or `Office.EventType.BindingSelectionChanged`.</span></span>
      type:
      - Office.EventType
    - id: options
      description: <span data-ttu-id="24bdf-158">どのイベント ハンドラーまたはハンドラーを削除するオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-158">Provides options to determine which event handler or handlers are removed.</span></span>
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: <span data-ttu-id="24bdf-159">省略可能。</span><span class="sxs-lookup"><span data-stu-id="24bdf-159">Optional.</span></span> <span data-ttu-id="24bdf-160">関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-160">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.setDataAsync
  summary: <span data-ttu-id="24bdf-161">指定されたバインド オブジェクトで表されるドキュメントのバインド セクションにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="24bdf-161">Writes data to the bound section of the document represented by the specified binding object.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"24bdf-162\">要件の設定</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-162\">Requirement Sets</span></span></td><td><span data-ttu-id=\"24bdf-163\">MatrixBindings, TableBindings, TextBindings</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-163\">MatrixBindings, TableBindings, TextBindings</span></span></td></tr></table>\n\n<span data-ttu-id=\"24bdf-164\">データに渡された値には、バインドに書き込まれるデータが含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-164\">The value passed for data contains the data to be written in the binding.</span></span> <span data-ttu-id=\"24bdf-165\">渡される値の種類は、次の表に示すような書き込まれますを決定します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-165\">The kind of value passed determines what will be written as described in the following table.</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"24bdf-166\">`data`値</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-166\">`data` value</span></span></th> <th><span data-ttu-id=\"24bdf-167\">書き込まれるデータ</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-167\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"24bdf-168\">文字列</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-168\">A string</span></span></td> <td><span data-ttu-id=\"24bdf-169\">プレーン テキストまたは文字列に変換できるものが書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-169\">Plain text or anything that can be coerced to a string will be written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-170\">配列の配列 (\"matrix\")</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-170\">An array of arrays (\"matrix\")</span></span></td> <td><span data-ttu-id=\"24bdf-171\">ヘッダーなしの表形式データが書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-171\">Tabular data without headers will be written.</span></span> <span data-ttu-id=\"24bdf-172\">たとえば、2 列 X 3 行のデータを書き込むには、次のような配列を渡します。`[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-172\">For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`.</span></span> <span data-ttu-id=\"24bdf-173\">記述するには次の 3 つの行の 1 つの列には、次のように配列を渡す: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-173\">To write a single column of three rows, pass an array like this: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-174\">[Office.TableData](xref:office.Office.TableData)オブジェクト</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-174\">An [Office.TableData](xref:office.Office.TableData) object</span></span></td> <td><span data-ttu-id=\"24bdf-175\">ヘッダー付きのテーブルが書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-175\">A table with headers will be written.</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"24bdf-176\">また、バインドにデータを書き込むときに、次のアプリケーション固有の処理が適用されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-176\">Additionally, these application-specific actions apply when writing data to a binding.</span></span> <span data-ttu-id=\"24bdf-177\">Word の次のようにバインディングを指定したデータが書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-177\">For Word, the specified data is written to the binding as follows:</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"24bdf-178\">`data`値</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-178\">`data` value</span></span></th> <th><span data-ttu-id=\"24bdf-179\">書き込まれるデータ</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-179\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"24bdf-180\">文字列</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-180\">A string</span></span></td> <td><span data-ttu-id=\"24bdf-181\">指定されたテキストが書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-181\">The specified text is written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-182\">配列の配列 (「マトリックス」) または[Office.TableData](xref:office.Office.TableData)オブジェクト</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-182\">An array of arrays (\"matrix\") or an [Office.TableData](xref:office.Office.TableData) object</span></span></td> <td><span data-ttu-id=\"24bdf-183\">HTML</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-183\">A Word table is written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-184\">HTML</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-184\">HTML</span></span></td> <td><span data-ttu-id=\"24bdf-185\">指定された HTML が書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-185\">The specified HTML is written.</span></span> <span data-ttu-id=\"24bdf-186\">場合は有効ではありませんを記述する HTML のいずれか、Word ではエラーが発生しません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-186\">If any of the HTML you write is invalid, Word will not raise an error.</span></span> <span data-ttu-id=\"24bdf-187\">でき、無効なデータを省略するだけの HTML の単語を書き込みます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-187\">Word will write as much of the HTML as it can and will omit any invalid data.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-188\">指定された XML が書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-188\">Office Open XML (\"Open XML\")</span></span></td> <td><span data-ttu-id=\"24bdf-189\">指定された XML が書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-189\">The specified the XML is written.</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"24bdf-190\">Excel の場合、次のようにバインディングを指定したデータが書き込まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-190\">For Excel, the specified data is written to the binding as follows:</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"24bdf-191\">`data`値</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-191\">`data` value</span></span></th> <th><span data-ttu-id=\"24bdf-192\">書き込まれるデータ</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-192\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"24bdf-193\">文字列</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-193\">A string</span></span></td> <td><span data-ttu-id=\"24bdf-194\">最初のバインドされたセルの値として指定したテキストが挿入されます。バインドされているセルに数式を追加するのには有効な数式を指定することもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-194\">The specified text is inserted as the value of the first bound cell.You can also specify a valid formula to add that formula to the bound cell.</span></span> <span data-ttu-id=\"24bdf-195\">たとえば、data を `\"=SUM(A1:A5)\"` と設定すると、指定の範囲内の値が集計されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-195\">For example, setting data to `\"=SUM(A1:A5)\"` will total the values in the specified range.</span></span> <span data-ttu-id=\"24bdf-196\">ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-196\">However, when you set a formula on the bound cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell.</span></span> <span data-ttu-id=\"24bdf-197\">バインドされたセルのデータを読み取ることで、Binding.getDataAsync メソッドを呼び出すと、このメソッドは (計算結果) のセルに表示されるデータのみを返すことができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-197\">If you call the Binding.getDataAsync method on the bound cell to read its data, the method can return only the data displayed in the cell (the formula's result).</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-198\">配列の配列 (「matrix」)、形状が指定されたバインドの形状と完全に一致する場合</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-198\">An array of arrays (\"matrix\"), and the shape exactly matches the shape of the binding specified</span></span></td> <td><span data-ttu-id=\"24bdf-199\">行と列のセットが書き込まれます。バインドされているセルに追加するのには有効な数式を含む配列の配列を指定することもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-199\">The set of rows and columns are written.You can also specify an array of arrays that contain valid formulas to add them to the bound cells.</span></span> <span data-ttu-id=\"24bdf-200\">データを設定するたとえば、`[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]`は 2 つのセルが含まれているバインディングにこれら 2 つの数式を追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-200\">For example, setting data to `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` will add those two formulas to a binding that contains two cells.</span></span> <span data-ttu-id=\"24bdf-201\">バインドされた単一のセルに数式を設定するときに読むことができません追加の数式などの既存の数式とのバインドからのと同様、`Binding.getDataAsync`メソッドにバインドされているセルに表示されるデータのみ返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-201\">Just as when setting a formula on a single bound cell, you can't read the added formulas (or any pre-existing formulas) from the binding with the `Binding.getDataAsync` method - it returns only the data displayed in the bound cells.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-202\">[Office.TableData](xref:office.Office.TableData)オブジェクト、およびテーブルの形状は、バインドされているテーブルを検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-202\">An [Office.TableData](xref:office.Office.TableData) object, and the shape of the table matches the bound table.</span></span></td> <td><span data-ttu-id=\"24bdf-p115\">周囲のセルに含まれるデータが上書きされる場合を除いて、指定された行やヘッダーのセットが書き込まれます。メモ:data パラメーターに渡す *TableData* オブジェクトに数式を指定する場合、予期したように結果を取得できないことがあります。これは、Excel の \"集計列\" が、列内の数式を自動的に複製するためです。バインドされたテーブルに数式が含まれる *data* を作成する場合にこの問題を回避するには、データを (TableData オブジェクトとしてではなく) 配列の配列として指定し、*coercionType* を Microsoft.Office.Matrix または \"matrix\" として指定してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-p115\">The specified set of rows and/or headers are written, if no other data in surrounding cells will be overwritten. Note: If you specify formulas in the TableData object you pass for the *data* parameter, you might not get the results you expect due to the \"calculated columns\" feature of Excel, which automatically duplicates formulas within a column. To work around this when you want to write *data* that contains formulas to a bound table, try specifying the data as an array of arrays (instead of a TableData object), and specify the *coercionType* as Microsoft.Office.Matrix or \"matrix\".</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"24bdf-206\">Excel のオンライン。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-206\">For Excel Online:</span></span>\n\n- <span data-ttu-id=\"24bdf-207\">データ パラメーターに渡された値のセルの合計数は、このメソッドを 1 回の呼び出しで 20,000 を超えることはできません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-207\">The total number of cells in the value passed to the data parameter can't exceed 20,000 in a single call to this method.</span></span>\n\n- <span data-ttu-id=\"24bdf-208\">cellFormat パラメーターに渡される書式設定グループの数が 100 を超えることはできません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-208\">The number of formatting groups passed to the cellFormat parameter can't exceed 100.</span></span> <span data-ttu-id=\"24bdf-209\">1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットで構成されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-209\">A single formatting group consists of a set of formatting applied to a specified range of cells.</span></span>\n\n<span data-ttu-id=\"24bdf-210\">上記以外の場合は、エラーが返されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-210\">In all other cases, an error is returned.</span></span>\n\n<span data-ttu-id=\"24bdf-211\">SetDataAsync メソッドは、テーブルまたはマトリックス バインドの startRow および startColumn の省略可能なパラメーターを指定すると、有効な範囲を指定する場合のサブセットのデータを記述します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-211\">The setDataAsync method will write data in a subset of a table or matrix binding if the optional startRow and startColumn parameters are specified, and they specify a valid range.</span></span>\n\n<span data-ttu-id=\"24bdf-212\">SetDataAsync メソッドに渡されるコールバック関数では、次の情報を返す AsyncResult オブジェクトのプロパティを使用できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-212\">In the callback function passed to the setDataAsync method, you can use the properties of the AsyncResult object to return the following information.</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"24bdf-213\">プロパティ</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-213\">Property</span></span></th> <th><span data-ttu-id=\"24bdf-214\">使用目的</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-214\">Use to...</span></span></th> </tr> <tr> <td><span data-ttu-id=\"24bdf-215\">AsyncResult.value</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-215\">AsyncResult.value</span></span></td> <td><span data-ttu-id=\"24bdf-216\">オブジェクトまたは取得するデータがないためには、undefined を返します常にします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-216\">Always returns undefined because there is no object or data to retrieve.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-217\">AsyncResult.status</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-217\">AsyncResult.status</span></span></td> <td><span data-ttu-id=\"24bdf-218\">操作の成功または失敗を判断します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-218\">Determine the success or failure of the operation.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-219\">AsyncResult.error</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-219\">AsyncResult.error</span></span></td> <td><span data-ttu-id=\"24bdf-220\">操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-220\">Access an Error object that provides error information if the operation failed.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"24bdf-221\">AsyncResult.asyncContext</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-221\">AsyncResult.asyncContext</span></span></td> <td><span data-ttu-id=\"24bdf-222\">変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-222\">A user-defined item of any type that is returned in the AsyncResult object without being altered.</span></span></td> </tr> </table>\n#### <span data-ttu-id=\"24bdf-223\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-223\">Examples</span></span>\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  name: setDataAsync(data, options, callback)
  fullName: office.Office.Binding.setDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        <span data-ttu-id="24bdf-224">現在の選択範囲に設定するデータ。</span><span class="sxs-lookup"><span data-stu-id="24bdf-224">The data to be set in the current selection.</span></span> <span data-ttu-id="24bdf-225">ホストで使用可能なデータ型: 文字列: Excel、Excel のオンライン、単語、および Word のオンラインのみの配列の配列: Excel および Word で[Office.TableData](xref:office.Office.TableData)のみ<!-- -->: Access、Excel、および単語のみ</span><span class="sxs-lookup"><span data-stu-id="24bdf-225">Possible data types by host: string: Excel, Excel Online, Word, and Word Online only array of arrays: Excel and Word only[Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel, and Word only</span></span>


        <span data-ttu-id="24bdf-226">HTML: の Word し、Word のオンラインのみ</span><span class="sxs-lookup"><span data-stu-id="24bdf-226">HTML: Word and Word Online only</span></span>


        <span data-ttu-id="24bdf-227">Office オープン XML: 単語のみ</span><span class="sxs-lookup"><span data-stu-id="24bdf-227">Office Open XML: Word only</span></span>
      type:
      - TableData | any
    - id: options
      description: <span data-ttu-id="24bdf-228">バインディングでデータを設定する方法についてのオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-228">Provides options for how to set the data in a binding.</span></span>
      type:
      - office.Office.SetBindingDataOptions
    - id: callback
      description: <span data-ttu-id="24bdf-229">省略可能。</span><span class="sxs-lookup"><span data-stu-id="24bdf-229">Optional.</span></span> <span data-ttu-id="24bdf-230">関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="24bdf-230">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.type
  summary: <span data-ttu-id="24bdf-231">バインドの種類を取得します。</span><span class="sxs-lookup"><span data-stu-id="24bdf-231">Gets the type of the binding.</span></span>
  name: type
  fullName: office.Office.Binding.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type:
      - Office.BindingType
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"24bdf-232\">例</span><span class=\"sxs-lookup\"><span data-stu-id=\"24bdf-232\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
