### YamlMime:UniversalReference
ms.openlocfilehash: fcf26d6eea62aa1cc703f4171bd792c185fb60fc
ms.sourcegitcommit: b05ee546d9dfbc914c8d1c594d9b206b04780bbc
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 11/22/2018
ms.locfileid: "26646105"
items:
- uid: office.Office.Binding
  summary: 文書のセクションへのバインドを表します。
  remarks: >-
    <table><tr><td>要件の設定</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


    バインディング オブジェクトでは、種類に関係なくすべてのバインドが持つ機能を公開します。


    バインディング オブジェクトを直接呼び出すことはありませんが。 それぞれの種類のバインディングを表すオブジェクトの抽象親クラスである: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->、 [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->、または[Office.TextBinding](xref:office.Office.TextBinding)<!-- -->。 バインド内のデータとの対話を可能にするバインディング オブジェクトの setDataAsync メソッドと、これらのオブジェクトのすべての 3 つが、getDataAsync を継承します。 それらのプロパティ値を照会するための id と型のプロパティを継承します。 さらに、MatrixBinding と結合テーブル結合オブジェクトは、行と列の数を数えるなどのマトリックスとテーブルに固有の機能の追加のメソッドを公開します。


    **サポートの詳細**


    大文字 Y の次のマトリックスでは、対応する Office ホスト アプリケーションでこのインターフェイスがサポートされていることを示します。 空のセルでは、Office ホスト アプリケーションでこのインターフェイスをサポートしないことを示します。


    Office ホスト アプリケーションとサーバーの要件の詳細については、 [Office アドインを実行するための要件](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)を参照してください<!-- -->。


    *サポートされるホスト (プラットフォーム別)* <table> <tr><th> </th><th> Windows デスクトップ版 Office </th><th> Office Online (ブラウザー) </th><th> Office for iPad </th><th> Office for Mac? </th></tr> <tr><td><strong>アクセス</strong></td><td> </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong>単語</strong></td><td> Y </td><td> Y </td><td> Y </td><td> Y </td></tr> </table>
  name: Office.Binding
  fullName: Office.Binding
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.Binding.addHandlerAsync
  - office.Office.Binding.document
  - office.Office.Binding.getDataAsync
  - office.Office.Binding.id
  - office.Office.Binding.removeHandlerAsync
  - office.Office.Binding.setDataAsync
  - office.Office.Binding.type
- uid: office.Office.Binding.addHandlerAsync
  summary: 指定された[Office.EventType](xref:office.Office.EventType)のオブジェクトにイベント ハンドラーを追加<!-- -->。 EventTypes がサポートされているは`Office.EventType.BindingDataChanged`と`Office.EventType.BindingSelectionChanged` <!-- -->。
  remarks: "各イベント ハンドラー関数の名前が重複しない限り、指定されたイベントの種類の複数のイベント ハンドラーを追加できます。\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: イベントの種類。 バインド」のことができます`Office.EventType.BindingDataChanged`または`Office.EventType.BindingSelectionChanged` <!-- -->。
      type:
      - Office.EventType
    - id: handler
      description: '[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs)または[Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)の型が唯一のパラメーターは、イベント ハンドラー関数を追加するに<!-- -->。'
      type:
      - any
    - id: options
      description: 任意の型を変更せずに、コールバックで使用するためのコンテキスト データを保持するためのオプションを提供します。
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: office.Office.Binding.document
  summary: バインディングに関連付けられているドキュメント オブジェクトを取得します。
  name: document
  fullName: document
  langs:
  - typeScript
  type: property
  syntax:
    content: 'document: Office.Document;'
    return:
      type:
      - office.Office.Document
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.getDataAsync
  summary: バインド内に含まれるデータを返します。
  remarks: "<table><tr><td>要件の設定</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>\n\nMatrixBinding または結合テーブル結合から呼び出されると、startRow、startColumn、行数、および列数の省略可能なパラメーターが指定されている (連続した、有効な範囲を指定する) 場合、getDataAsync メソッドは、バインドされた値のサブセットを返します。\n#### <a name=\"examples\"></a>例\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  name: getDataAsync(options, callback)
  fullName: getDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: バインディングでデータを取得する方法に関するオプションを提供します。
      type:
      - office.Office.GetBindingDataOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。 `value` 、結果のプロパティは、指定したバインディングの値です。 場合、`coercionType`パラメーターが指定されている (と、呼び出しが成功した)、CoercionType 列挙体のトピックで説明した形式でデータが返されます。
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Binding.id
  summary: 同じ[Office.Document](xref:office.Office.Document)オブジェクト内のバインディングのバインディングを一意に識別する文字列です。
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.removeHandlerAsync
  summary: 指定されたイベントの種類のバインドから、指定されたハンドラーを削除します。
  remarks: >-
    <table><tr><td>要件の設定</td><td>BindingEvents</td></tr></table>

    #### 例


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  name: removeHandlerAsync(eventType, options, callback)
  fullName: removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: イベントの種類。 バインド」のことができます`Office.EventType.BindingDataChanged`または`Office.EventType.BindingSelectionChanged` <!-- -->。
      type:
      - Office.EventType
    - id: options
      description: どのイベント ハンドラーまたはハンドラーを削除するオプションを提供します。
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.setDataAsync
  summary: 指定されたバインド オブジェクトで表されるドキュメントのバインド セクションにデータを書き込みます。
  remarks: "<table><tr><td>要件の設定</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>\n\nデータに渡された値には、バインドに書き込まれるデータが含まれています。 渡される値の種類は、次の表に示すような書き込まれますを決定します。\n\n<table> <tr> <th>`data`値</th> <th>書き込まれるデータ</th> </tr> <tr> <td>文字列</td> <td>プレーン テキストまたは文字列に変換できるものが書き込まれます。</td> </tr> <tr> <td>配列の配列 (\"matrix\")</td> <td>ヘッダーなしの表形式データが書き込まれます。 などの 2 つの列の 3 つの行にデータの書き込みを渡すことができますこのような配列: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]` <!-- -->。 記述するには次の 3 つの行の 1 つの列には、次のように配列を渡す: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]` <!-- -->。</td> </tr> <tr> <td>[Office.TableData](xref:office.Office.TableData)オブジェクト</td> <td>ヘッダー付きのテーブルが書き込まれます。</td> </tr> </table>\n\nまた、バインドにデータを書き込むときに、次のアプリケーション固有の処理が適用されます。 Word の次のようにバインディングを指定したデータが書き込まれます。\n\n<table> <tr> <th>`data`値</th> <th>書き込まれるデータ</th> </tr> <tr> <td>文字列</td> <td>指定されたテキストが書き込まれます。</td> </tr> <tr> <td>配列の配列 (「マトリックス」) または[Office.TableData](xref:office.Office.TableData)オブジェクト</td> <td>HTML</td> </tr> <tr> <td>HTML</td> <td>指定された HTML が書き込まれます。 場合は有効ではありませんを記述する HTML のいずれか、Word ではエラーが発生しません。 でき、無効なデータを省略するだけの HTML の単語を書き込みます。</td> </tr> <tr> <td>指定された XML が書き込まれます。</td> <td>指定された XML が書き込まれます。</td> </tr> </table>\n\nExcel の場合、次のようにバインディングを指定したデータが書き込まれます。\n\n<table> <tr> <th>`data`値</th> <th>書き込まれるデータ</th> </tr> <tr> <td>文字列</td> <td>最初のバインドされたセルの値として指定したテキストが挿入されます。バインドされているセルに数式を追加するのには有効な数式を指定することもできます。 たとえば、data を `\"=SUM(A1:A5)\"` と設定すると、指定の範囲内の値が集計されます。 ただし、バインドされたセルで数式を設定する場合、その後、バインドされたセルからは追加された数式 (または既存の数式) を読み取ることができません。 バインドされたセルのデータを読み取ることで、Binding.getDataAsync メソッドを呼び出すと、このメソッドは (計算結果) のセルに表示されるデータのみを返すことができます。</td> </tr> <tr> <td>配列の配列 (「matrix」)、形状が指定されたバインドの形状と完全に一致する場合</td> <td>行と列のセットが書き込まれます。バインドされているセルに追加するのには有効な数式を含む配列の配列を指定することもできます。 データを設定するたとえば、`[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]`は 2 つのセルが含まれているバインディングにこれら 2 つの数式を追加します。 バインドされた単一のセルに数式を設定するときに読むことができません追加の数式などの既存の数式とのバインドからのと同様、`Binding.getDataAsync`メソッドにバインドされているセルに表示されるデータのみ返します。</td> </tr> <tr> <td>[Office.TableData](xref:office.Office.TableData)オブジェクト、およびテーブルの形状は、バインドされているテーブルを検索します。</td> <td>周囲のセルに含まれるデータが上書きされる場合を除いて、指定された行やヘッダーのセットが書き込まれます。メモ:data パラメーターに渡す *TableData* オブジェクトに数式を指定する場合、予期したように結果を取得できないことがあります。これは、Excel の \"集計列\" が、列内の数式を自動的に複製するためです。バインドされたテーブルに数式が含まれる *data* を作成する場合にこの問題を回避するには、データを (TableData オブジェクトとしてではなく) 配列の配列として指定し、*coercionType* を Microsoft.Office.Matrix または \"matrix\" として指定してください。</td> </tr> </table>\n\nExcel のオンライン。\n\n- データ パラメーターに渡された値のセルの合計数は、このメソッドを 1 回の呼び出しで 20,000 を超えることはできません。\n\n- cellFormat パラメーターに渡される書式設定グループの数が 100 を超えることはできません。 1 つの書式設定グループは、指定のセル範囲に適用される書式設定のセットで構成されます。\n\n上記以外の場合は、エラーが返されます。\n\nSetDataAsync メソッドは、テーブルまたはマトリックス バインドの startRow および startColumn の省略可能なパラメーターを指定すると、有効な範囲を指定する場合のサブセットのデータを記述します。\n\nSetDataAsync メソッドに渡されるコールバック関数では、次の情報を返す AsyncResult オブジェクトのプロパティを使用できます。\n\n<table> <tr> <th>プロパティ</th> <th>使用目的</th> </tr> <tr> <td>AsyncResult.value</td> <td>オブジェクトまたは取得するデータがないためには、undefined を返します常にします。</td> </tr> <tr> <td>AsyncResult.status</td> <td>操作の成功または失敗を判断します。</td> </tr> <tr> <td>AsyncResult.error</td> <td>操作が失敗した場合、エラーに関する情報を提供する Error オブジェクトにアクセスします。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>変更されずに AsyncResult オブジェクトで返される任意の型のユーザー定義項目。</td> </tr> </table>\n#### 例\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  name: setDataAsync(data, options, callback)
  fullName: setDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        現在の選択範囲に設定するデータ。 ホストで使用可能なデータの種類:


        文字列: Excel、Excel のオンライン、単語、および単語オンラインのみ


        配列の配列: Excel および Word でのみ


        [Office.TableData](xref:office.Office.TableData)<!-- -->: Access、Excel、および単語のみ


        HTML: の Word し、Word のオンラインのみ


        Office オープン XML: 単語のみ
      type:
      - TableData | any
    - id: options
      description: バインディングでデータを設定する方法についてのオプションを提供します。
      type:
      - office.Office.SetBindingDataOptions
    - id: callback
      description: 省略可能。 関数コールバックが返されるときに呼び出されます[Office.AsyncResult](xref:office.Office.AsyncResult)の種類が唯一のパラメーターは、<!-- -->。
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.type
  summary: バインドの種類を取得します。
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type:
      - Office.BindingType
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
