### YamlMime:TSType
name: OneNote.TableCell
uid: onenote!OneNote.TableCell:class
package: onenote!
fullName: OneNote.TableCell
summary: >-
  OneNote テーブル内のセルを表します。


  \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: cellIndex
  uid: onenote!OneNote.TableCell#cellIndex:member
  package: onenote!
  fullName: cellIndex
  summary: >-
    その行のセルのインデックスを取得します。 読み取り専用です。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellIndex: number;'
    return:
      type: number
- name: context
  uid: onenote!OneNote.TableCell#context:member
  package: onenote!
  fullName: context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これにより、アドインのプロセスがホスト アプリケーションのプロセスOfficeに接続されます。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="onenote!OneNote.RequestContext:class" />
- name: id
  uid: onenote!OneNote.TableCell#id:member
  package: onenote!
  fullName: id
  summary: >-
    セルの ID を取得します。 読み取り専用です。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: paragraphs
  uid: onenote!OneNote.TableCell#paragraphs:member
  package: onenote!
  fullName: paragraphs
  summary: >-
    TableCell に含まれる Paragraph オブジェクトのコレクションを取得します。 読み取り専用です。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly paragraphs: OneNote.ParagraphCollection;'
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
- name: parentRow
  uid: onenote!OneNote.TableCell#parentRow:member
  package: onenote!
  fullName: parentRow
  summary: >-
    セルの親行を取得します。 読み取り専用です。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentRow: OneNote.TableRow;'
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
- name: rowIndex
  uid: onenote!OneNote.TableCell#rowIndex:member
  package: onenote!
  fullName: rowIndex
  summary: >-
    テーブルのセル行のインデックスを取得します。 読み取り専用です。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type: number
- name: shadingColor
  uid: onenote!OneNote.TableCell#shadingColor:member
  package: onenote!
  fullName: shadingColor
  summary: >-
    セルの網かけの色を取得および設定します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'shadingColor: string;'
    return:
      type: string
methods:
- name: appendHtml(html)
  uid: onenote!OneNote.TableCell#appendHtml:member(1)
  package: onenote!
  fullName: appendHtml(html)
  summary: >-
    指定された HTML を TableCell の一番下に追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendHtml(html: string): void;'
    parameters:
    - id: html
      description: 追加する HTML 文字列です。 [「OneNote アドイン JavaScript](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) API でサポートされる HTML」を参照してください。
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two and add \"Hello\".\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                cell.appendHtml(\"<p>Hello</p>\");\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: appendImage(base64EncodedImage, width, height)
  uid: onenote!OneNote.TableCell#appendImage:member(1)
  package: onenote!
  fullName: appendImage(base64EncodedImage, width, height)
  summary: >-
    指定した Image をテーブル セルに追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendImage(base64EncodedImage: string, width: number, height: number): OneNote.Image;'
    parameters:
    - id: base64EncodedImage
      description: 追加する HTML 文字列です。
      type: string
    - id: width
      description: 省略可能。 ポイント単位の幅。 既定値は null で、イメージの幅が使用されます。
      type: number
    - id: height
      description: 省略可能。 ポイント単位の高さ。 既定値は null で、イメージの高さが使用されます。
      type: number
    return:
      type: <xref uid="onenote!OneNote.Image:class" />
      description: ''
- name: appendRichText(paragraphText)
  uid: onenote!OneNote.TableCell#appendRichText:member(1)
  package: onenote!
  fullName: appendRichText(paragraphText)
  summary: >-
    指定したテキストをテーブル セルに追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendRichText(paragraphText: string): OneNote.RichText;'
    parameters:
    - id: paragraphText
      description: 追加する HTML 文字列です。
      type: string
    return:
      type: <xref uid="onenote!OneNote.RichText:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    var appendedRichText = null;\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two and add \"Hello\".\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                appendedRichText = cell.appendRichText(\"Hello\");\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: appendTable(rowCount, columnCount, values)
  uid: onenote!OneNote.TableCell#appendTable:member(1)
  package: onenote!
  fullName: appendTable(rowCount, columnCount, values)
  summary: >-
    指定された数の行と列を含むテーブルをテーブル セルに追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendTable(rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
    parameters:
    - id: rowCount
      description: 必須。 表の行数。
      type: number
    - id: columnCount
      description: 必須。 表の列数。
      type: number
    - id: values
      description: 省略可能な 2 次元配列。 対応する文字列が配列で指定されている場合、セルに設定されます。
      type: string[][]
    return:
      type: <xref uid="onenote!OneNote.Table:class" />
      description: ''
- name: clear()
  uid: onenote!OneNote.TableCell#clear:member(1)
  package: onenote!
  fullName: clear()
  summary: >-
    セルの内容をクリアします。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: load(option)
  uid: onenote!OneNote.TableCell#load:member(1)
  package: onenote!
  fullName: load(option)
  summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。
  remarks: >-
    このシグネチャに加えて、このメソッドには次のシグネチャがあります。


    `load(option?: string | string[]): OneNote.TableCell` - where option は、コンマで区切られた文字列、または読み込むプロパティを指定する文字列の配列です。


    `load(option?: { select?: string; expand?: string; }): OneNote.TableCell` - option.select は読み込むプロパティを指定するコンマ区切りの文字列で、options.expand は読み込むナビゲーション プロパティを指定するコンマ区切りの文字列です。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.TableCell` - コレクションの種類でのみ使用できます。 これは、前の署名に似ています。 Option.top 結果に含めるコレクション アイテムの最大数を指定します。 Option.skip は、結果に含まれていないスキップするアイテムの数を指定します。 この option.top 指定すると、指定した数のアイテムをスキップした後、結果セットが開始されます。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: OneNote.Interfaces.TableCellLoadOptions): OneNote.TableCell;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="onenote!OneNote.Interfaces.TableCellLoadOptions:interface" />
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
- name: load(propertyNames)
  uid: onenote!OneNote.TableCell#load:member(2)
  package: onenote!
  fullName: load(propertyNames)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.TableCell;'
    parameters:
    - id: propertyNames
      description: 読み込むプロパティを指定するコンマ区切り文字列または文字列の配列。
      type: string | string[]
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: "\n\n#### <a name=\"examples\"></a>例\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                \n                // Queue a command to load the table cell.\n                ctx.load(cell);\n                ctx.sync().then(function() {\n                    console.log(\"Cell Id: \" + cell.id);\n                    console.log(\"Cell Index: \" + cell.cellIndex);\n                    console.log(\"Cell's Row Index: \" + cell.rowIndex);\n                });\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nParentTable, ParentRow, Paragraphs\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                \n                // Queue a command to load parentTable, parentRow and paragraphs of the table cell.\n                ctx.load(cell, \"parentTable, parentRow, paragraphs\");\n                \n                ctx.sync().then(function() {\n                    console.log(\"Parent Table Id: \" + cell.parentTable.id);\n                    console.log(\"Parent Row Id: \" + cell.parentRow.id);\n                    var paragraphs = cell.paragraphs;\n                    \n                    for (var i = 0; i < paragraphs.items.length; i++) {\n                        console.log(\"Paragraph Id: \" + paragraphs.items[i].id);\n                    }\n                });\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: onenote!OneNote.TableCell#load:member(3)
  package: onenote!
  fullName: load(propertyNamesAndPaths)
  summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.TableCell;'
    parameters:
    - id: propertyNamesAndPaths
      description: propertyNamesAndPaths.select は、読み込むプロパティを指定するコンマ区切りの文字列で、propertyNamesAndPaths.expand は、読み込むナビゲーション プロパティを指定するコンマ区切りの文字列です。
      type: '{ select?: string; expand?: string; }'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
- name: set(properties, options)
  uid: onenote!OneNote.TableCell#set:member(1)
  package: onenote!
  fullName: set(properties, options)
  summary: オブジェクトの複数のプロパティを同時に設定します。 適切なプロパティを持つプレーン オブジェクト、または同じ種類の別の API オブジェクトを渡します。
  remarks: >-
    このメソッドには、次の追加の署名があります。


    `set(properties: OneNote.TableCell): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.TableCellUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: メソッドが呼び出されるオブジェクトのプロパティと同型的に構造化されたプロパティを持つ JavaScript オブジェクト。
      type: <xref uid="onenote!OneNote.Interfaces.TableCellUpdateData:interface" />
    - id: options
      description: properties オブジェクトが読み取り専用プロパティを設定しようとすると、エラーを抑制するオプションを提供します。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: onenote!OneNote.TableCell#set:member(2)
  package: onenote!
  fullName: set(properties)
  summary: 既存の読み込まれたオブジェクトに基づいて、オブジェクト上の複数のプロパティを同時に設定します。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: OneNote.TableCell): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="onenote!OneNote.TableCell:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: onenote!OneNote.TableCell#toJSON:member(1)
  package: onenote!
  fullName: toJSON()
  summary: API オブジェクトを渡す際に、より有用な出力を提供するために `toJSON()` JavaScript メソッドをオーバーライドします。 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->、順番に、渡 `toJSON` されるオブジェクトのメソッドを呼び出します。元の OneNote.TableCell オブジェクトが API オブジェクトであるのに対し、メソッドはプレーンな JavaScript オブジェクト (次のように入力) `toJSON` を返します。 `OneNote.Interfaces.TableCellData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを含む。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): OneNote.Interfaces.TableCellData;'
    return:
      type: <xref uid="onenote!OneNote.Interfaces.TableCellData:interface" />
      description: ''
- name: track()
  uid: onenote!OneNote.TableCell#track:member(1)
  package: onenote!
  fullName: track()
  summary: ドキュメントの環境変更に基づいて自動的に調整する目的でオブジェクトを追跡します。 これは context.trackedObjects.add(thisObject) 呼び出しの省略形です。 ".sync" 呼び出し間で、かつ ".run" バッチの連続実行の外でこのオブジェクトを使用しているとき、オブジェクトであるプロパティを設定したか、あるメソッドを呼び出したときに "InvalidObjectPath" エラーが表示される場合、オブジェクトを最初に作成したときに、追跡対象オブジェクトの集まりにそのオブジェクトを追加しておく必要がありました。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): OneNote.TableCell;'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
- name: untrack()
  uid: onenote!OneNote.TableCell#untrack:member(1)
  package: onenote!
  fullName: untrack()
  summary: 前に追跡されていた場合、このオブジェクトに関連付けられているメモリを解放します。 これは context.trackedObjects.remove(thisObject) 呼び出しの省略形です。 追跡対象オブジェクトが多いとホスト アプリケーションの動作が遅くなります。追加したオブジェクトが不要になったら、必ずそれを解放してください。 メモリ リリースを有効にするには、"context.sync()" を先に呼び出す必要があります。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): OneNote.TableCell;'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 8564407a1246f9419be0ed1743010f56654f8710
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51320042"
