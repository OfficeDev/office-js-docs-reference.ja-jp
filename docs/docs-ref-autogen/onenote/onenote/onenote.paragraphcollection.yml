### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    summary: |-
      Paragraph オブジェクトのコレクションを表します。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.ParagraphCollection
    fullName: OneNote.ParagraphCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.ParagraphCollection#context:member'
      - 'onenote!OneNote.ParagraphCollection#count:member'
      - 'onenote!OneNote.ParagraphCollection#getItem:member(1)'
      - 'onenote!OneNote.ParagraphCollection#getItemAt:member(1)'
      - 'onenote!OneNote.ParagraphCollection#items:member'
      - 'onenote!OneNote.ParagraphCollection#load:member(1)'
      - 'onenote!OneNote.ParagraphCollection#load:member(2)'
      - 'onenote!OneNote.ParagraphCollection#load:member(3)'
      - 'onenote!OneNote.ParagraphCollection#toJSON:member(1)'
      - 'onenote!OneNote.ParagraphCollection#track:member(1)'
      - 'onenote!OneNote.ParagraphCollection#untrack:member(1)'
  - uid: 'onenote!OneNote.ParagraphCollection#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.ParagraphCollection#count:member'
    summary: |-
      ページ内の段落の数を返します。 読み取り専用です。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'onenote!OneNote.ParagraphCollection#getItem:member(1)'
    summary: |-
      ID やコレクション内のインデックスで、Paragraph オブジェクトを取得します。 読み取り専用です。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number | string): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
      parameters:
        - id: index
          description: Paragraph オブジェクト の ID、またはコレクション内の Paragraph オブジェクトのインデックスの場所です。
          type:
            - number | string
  - uid: 'onenote!OneNote.ParagraphCollection#getItemAt:member(1)'
    summary: |-
      コレクション内での位置を基に段落を取得します。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;

              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the type and richText.text property of this paragraph.
              firstParagraph.load("id,type");


              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Write text from paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: index
          description: 取得するオブジェクトのインデックス値。 0 を起点とする番号になります。
          type:
            - number
  - uid: 'onenote!OneNote.ParagraphCollection#items:member'
    summary: このコレクション内に読み込まれた子アイテムを取得します。
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: OneNote.Paragraph[];'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection#items~0:complex'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。
    remarks: |-
      このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。

      `load(option?: string | string[]): OneNote.ParagraphCollection`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。

      `load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 Top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.ParagraphCollection#load~0:complex'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(2)'
    summary: オブジェクトの指定されたプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る前に、`context.sync()` を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItem(0);
              var paragraphs = pageContent.outline.paragraphs;
              
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      var firstParagraph = paragraphs.items[0];
                      // Write text from first paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its outline's paragraphs.
              var outlinePageContents = ;
              var paragraphs = ;
              var richTextParagraphs = ;
              // Queue a command to load the id and type of each page content in the outline.
              pageContents.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Load all page contents of type Outline
                      $.each(pageContents.items, function(index, pageContent) {
                          if(pageContent.type == 'Outline')
                          {
                              pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');
                              outlinePageContents.push(pageContent);
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Load all rich text paragraphs across outlines
                      $.each(outlinePageContents, function(index, outlinePageContent) {
                          var outline = outlinePageContent.outline;
                          paragraphs = paragraphs.concat(outline.paragraphs.items);
                      });
                      $.each(paragraphs, function(index, paragraph) {
                          if(paragraph.type == 'RichText')
                          {
                              richTextParagraphs.push(paragraph);
                              paragraph.load("id,richText/text");
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Display all rich text paragraphs to the console
                      $.each(richTextParagraphs, function(index, richTextParagraph) {
                          var richText = richTextParagraph.richText;
                          console.log(
                              "Paragraph found with richtext content : " + 
                              richText.text + " and richtext id : " + richText.id);
                      });
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'onenote!OneNote.ParagraphCollection#toJSON:member(1)'
    summary: '`toJSON()`API オブジェクトが渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->`toJSON`その後、渡されたオブジェクトのメソッドを呼び出します。元の `OneNote.ParagraphCollection` オブジェクトは API オブジェクトであるのに対し、 `toJSON` メソッドはプレーンな JavaScript オブジェクト (として入力されます) を返します。`OneNote.Interfaces.ParagraphCollectionData`<!-- -->) を使用して、コレクションのアイテムから読み込まれたプロパティの浅いコピーを持つ "items" 配列を含みます。'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.ParagraphCollectionData:interface'
        description: ''
  - uid: 'onenote!OneNote.ParagraphCollection#track:member(1)'
    summary: ドキュメントの環境変更に基づいて自動的に調整する目的でオブジェクトを追跡します。 これは context.trackedObjects.add(thisObject) 呼び出しの省略形です。 ".sync" 呼び出し間で、かつ ".run" バッチの連続実行の外でこのオブジェクトを使用しているとき、オブジェクトであるプロパティを設定したか、あるメソッドを呼び出したときに "InvalidObjectPath" エラーが表示される場合、オブジェクトを最初に作成したときに、追跡対象オブジェクトの集まりにそのオブジェクトを追加しておく必要がありました。
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
  - uid: 'onenote!OneNote.ParagraphCollection#untrack:member(1)'
    summary: 前に追跡されていた場合、このオブジェクトに関連付けられているメモリを解放します。 これは context.trackedObjects.remove(thisObject) 呼び出しの省略形です。 追跡対象オブジェクトが多いとホスト アプリケーションの動作が遅くなります。追加したオブジェクトが不要になったら、必ずそれを解放してください。 メモリ リリースを有効にするには、"context.sync()" を先に呼び出す必要があります。
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Paragraph:class'
    name: OneNote.Paragraph
  - uid: 'onenote!OneNote.ParagraphCollection#items~0:complex'
    name: 'OneNote.Paragraph[]'
    fullName: 'OneNote.Paragraph[]'
    spec.typeScript:
      - uid: 'onenote!OneNote.Paragraph:class'
        name: OneNote.Paragraph
        fullName: OneNote.Paragraph
      - name: '[]'
        fullName: '[]'
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    name: OneNote.ParagraphCollection
  - uid: 'onenote!OneNote.ParagraphCollection#load~0:complex'
    name: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
    fullName: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'onenote!OneNote.Interfaces.ParagraphCollectionLoadOptions:interface'
        name: OneNote.Interfaces.ParagraphCollectionLoadOptions
        fullName: OneNote.Interfaces.ParagraphCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'onenote!OneNote.Interfaces.CollectionLoadOptions:interface'
        name: OneNote.Interfaces.CollectionLoadOptions
        fullName: OneNote.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'onenote!OneNote.Interfaces.ParagraphCollectionData:interface'
    name: OneNote.Interfaces.ParagraphCollectionData