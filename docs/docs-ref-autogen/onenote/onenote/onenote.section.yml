### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.Section:class'
    summary: |-
      OneNote セクションを表します。 セクションには、ページを含めることができます。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.Section
    fullName: OneNote.Section
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.Section#addPage:member(1)'
      - 'onenote!OneNote.Section#clientUrl:member'
      - 'onenote!OneNote.Section#context:member'
      - 'onenote!OneNote.Section#copyToNotebook:member(1)'
      - 'onenote!OneNote.Section#copyToSectionGroup:member(1)'
      - 'onenote!OneNote.Section#getRestApiId:member(1)'
      - 'onenote!OneNote.Section#id:member'
      - 'onenote!OneNote.Section#insertSectionAsSibling:member(1)'
      - 'onenote!OneNote.Section#insertSectionAsSibling:member(2)'
      - 'onenote!OneNote.Section#isEncrypted:member'
      - 'onenote!OneNote.Section#isLocked:member'
      - 'onenote!OneNote.Section#load:member(1)'
      - 'onenote!OneNote.Section#load:member(2)'
      - 'onenote!OneNote.Section#load:member(3)'
      - 'onenote!OneNote.Section#name:member'
      - 'onenote!OneNote.Section#notebook:member'
      - 'onenote!OneNote.Section#pages:member'
      - 'onenote!OneNote.Section#parentSectionGroup:member'
      - 'onenote!OneNote.Section#parentSectionGroupOrNull:member'
      - 'onenote!OneNote.Section#toJSON:member(1)'
      - 'onenote!OneNote.Section#track:member(1)'
      - 'onenote!OneNote.Section#untrack:member(1)'
      - 'onenote!OneNote.Section#webUrl:member'
  - uid: 'onenote!OneNote.Section#addPage:member(1)'
    summary: |-
      セクションの末尾に新しいページを追加します。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: addPage(title)
    fullName: addPage(title)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addPage(title: string): OneNote.Page;'
      return:
        type:
          - 'onenote!OneNote.Page:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function (context) {
                      
              // Queue a command to add a page to the current section.
              var page = context.application.getActiveSection().addPage("Wish list");
                      
              // Queue a command to load the id and title of the new page. 
              // This example loads the new page so it can read its properties later.           
              page.load('id,title');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                       
                      // Display the properties.       
                      console.log("Page name: " + page.title);
                      console.log("Page ID: " + page.id);

                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: title
          description: 新しいページのタイトルです。
          type:
            - string
  - uid: 'onenote!OneNote.Section#clientUrl:member'
    summary: |-
      セクションのクライアント url です。 読み取りのみ

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: clientUrl
    fullName: clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Section#context:member'
    summary: オブジェクトに関連付けられている要求コンテキスト。 これにより、アドインのプロセスが Office ホストアプリケーションのプロセスに接続されます。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.Section#copyToNotebook:member(1)'
    summary: |-
      指定したノートブックに、このセクションをコピーします。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: copyToNotebook(destinationNotebook)
    fullName: copyToNotebook(destinationNotebook)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyToNotebook(destinationNotebook: OneNote.Notebook): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function (context) {
              var app = context.application;
              
              // Gets the active Notebook.
              var notebook = app.getActiveNotebook();
              
              // Gets the active Section.
              var section = app.getActiveSection();
              
              var newSection;
              
              return context.sync()
                  .then(function() {
                      newSection = section.copyToNotebook(notebook);
                      newSection.load('id');
                      return context.sync();
                  })
                  .then(function() {
                      console.log(newSection.id);
                  });
          })
          .catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: destinationNotebook
          description: このセクションのコピー先のノートブック。
          type:
            - 'onenote!OneNote.Notebook:class'
  - uid: 'onenote!OneNote.Section#copyToSectionGroup:member(1)'
    summary: |-
      指定したセクション グループに、このセクションをコピーします。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: copyToSectionGroup(destinationSectionGroup)
    fullName: copyToSectionGroup(destinationSectionGroup)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyToSectionGroup(destinationSectionGroup: OneNote.SectionGroup): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function (ctx) {
              var app = ctx.application;
              
              // Gets the active Notebook.
              var notebook = app.getActiveNotebook();
              
              // Gets the active Section.
              var section = app.getActiveSection();
              
              var newSection;
              
              return ctx.sync()
                  .then(function() {
                      var firstSectionGroup = notebook.sectionGroups.items[0];
                      newSection = section.copyToSectionGroup(firstSectionGroup);
                      newSection.load('id');
                      return ctx.sync();
                  })
                  .then(function() {
                      console.log(newSection.id);
                  });
          })
          .catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: destinationSectionGroup
          description: このセクションのコピー先のセクション グループ。
          type:
            - 'onenote!OneNote.SectionGroup:class'
  - uid: 'onenote!OneNote.Section#getRestApiId:member(1)'
    summary: |-
      REST API ID を取得します。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getRestApiId()
    fullName: getRestApiId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'onenote!OneNote.Section#getRestApiId~0:complex'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function(ctx){
              // Get the current section.         
              var section = ctx.application.getActiveSection();
              var restApiId = section.getRestApiId();

              return ctx.sync().
                  then(function(){
                      console.log("The REST API ID is " + restApiId.value);
                      // Note that the REST API ID isn't all you need to interact with the OneNote REST API. 
                      // This is only required for SharePoint notebooks. baseUrl will be null for OneDrive notebooks.
                      // For SharePoint notebooks, the notebook baseUrl should be used to talk to the 
                      // OneNote REST API according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          });
          ```
  - uid: 'onenote!OneNote.Section#id:member'
    summary: |-
      セクションの ID を取得します。 読み取り専用です。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Section#insertSectionAsSibling:member(1)'
    summary: |-
      現在のセクションの前か後に、新しいセクションを挿入します。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertSectionAsSibling(location, title)'
    fullName: 'insertSectionAsSibling(location, title)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertSectionAsSibling(location: OneNote.InsertLocation, title: string): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: ''
      parameters:
        - id: location
          description: 現在のセクションを基準にした新しいセクションの場所です。
          type:
            - 'onenote!OneNote.InsertLocation:enum'
        - id: title
          description: 新しいセクションの名前を指定します。
          type:
            - string
  - uid: 'onenote!OneNote.Section#insertSectionAsSibling:member(2)'
    summary: |-
      現在のセクションの前か後に、新しいセクションを挿入します。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertSectionAsSibling(locationString, title)'
    fullName: 'insertSectionAsSibling(locationString, title)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertSectionAsSibling(locationString: "Before" | "After", title: string): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function (context) {
                      
              // Queue a command to insert a section after the current section.
              var section = context.application.getActiveSection().insertSectionAsSibling("After", "New section");
                      
              // Queue a command to load the id and name of the new section. 
              // This example loads the new section so it can read its properties later.           
              section.load('id,name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                       
                      // Display the properties.       
                      console.log("Section name: " + section.name);
                      console.log("Section ID: " + section.id);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: locationString
          description: 現在のセクションを基準にした新しいセクションの場所です。
          type:
            - '"Before" | "After"'
        - id: title
          description: 新しいセクションの名前を指定します。
          type:
            - string
  - uid: 'onenote!OneNote.Section#isEncrypted:member'
    summary: |-
      このセクションがパスワードで暗号化されている場合は True。 読み取りのみ

      \[[API セット: OneNoteApi 1.2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: isEncrypted
    fullName: isEncrypted
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEncrypted: boolean;'
      return:
        type:
          - boolean
  - uid: 'onenote!OneNote.Section#isLocked:member'
    summary: |-
      このセクションがロックされている場合は True。 読み取りのみ

      \[[API セット: OneNoteApi 1.2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: isLocked
    fullName: isLocked
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isLocked: boolean;'
      return:
        type:
          - boolean
  - uid: 'onenote!OneNote.Section#load:member(1)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取るには先に "context.sync()" を呼び出す必要があります。
    remarks: |-
      このシグネチャに加えて、このメソッドのシグネチャは次のとおりです。

      `load(option?: string | string[]): OneNote.Section`-Where オプションは、読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列です。

      `load(option?: { select?: string; expand?: string; }): OneNote.Section`-Where オプションを指定します。 select は、読み込むプロパティを指定するコンマで区切られた文字列で、オプション expand は読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Section`-コレクション型でのみ使用できます。 これは、前述の署名に似ています。 Top は、結果に含めることができるコレクション項目の最大数を指定します。 省略すると、スキップされ、結果に含まれないアイテムの数を指定します。 Option を指定すると、指定した数のアイテムをスキップした後に結果セットが開始されます。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.SectionLoadOptions): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.SectionLoadOptions:interface'
  - uid: 'onenote!OneNote.Section#load:member(2)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a>例

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current section.
              var section = context.application.getActiveSection();
                      
              // Queue a command to load the section. 
              // For best performance, request specific properties.           
              section.load("id");
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Section ID: " + section.id);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current section.
              var section = context.application.getActiveSection();
                      
              // Queue a command to load the section with the specified properties. 
              section.load("name,notebook/name");
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Section name: " + section.name);
                      console.log("Parent notebook name: " + section.notebook.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
              // Queue a command to add a page to the current section.
              var section = context.application.getActiveSection();
              section.load('clientUrl,notebook');
              var sectionGroup = section.parentSectionGroupOrNull;
              
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      if(sectionGroup.isNull === false)
                      {
                          // If a parent section group exists, queue a command to add a section in it!
                          sectionGroup.addSection("NewSectionInSectionGroup");
                      }
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 読み込むプロパティを指定する、コンマで区切られた文字列または文字列の配列。
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.Section#load:member(3)'
    summary: オブジェクトの指定のプロパティを読み込むコマンドを待ち行列に入れます。 プロパティを読み取る`context.sync()`前に、を呼び出す必要があります。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: ここで、は、読み込むプロパティを指定するコンマで区切られた文字列を指定します。 expand は、読み込むナビゲーションプロパティを指定するコンマ区切りの文字列です。
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.Section#name:member'
    summary: |-
      セクションの名前を取得します。 読み取り専用です。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Section#notebook:member'
    summary: |-
      セクションを含むノートブックを取得します。 読み取り専用です。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: notebook
    fullName: notebook
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly notebook: OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
  - uid: 'onenote!OneNote.Section#pages:member'
    summary: |-
      セクション内のページのコレクションです。 読み取りのみ

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: pages
    fullName: pages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pages: OneNote.PageCollection;'
      return:
        type:
          - 'onenote!OneNote.PageCollection:class'
  - uid: 'onenote!OneNote.Section#parentSectionGroup:member'
    summary: |-
      セクションを含むセクション グループを取得します。 セクションがノートブックの直接の子である場合は ItemNotFound をスローします。 読み取り専用です。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentSectionGroup
    fullName: parentSectionGroup
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroup: OneNote.SectionGroup;'
      return:
        type:
          - 'onenote!OneNote.SectionGroup:class'
  - uid: 'onenote!OneNote.Section#parentSectionGroupOrNull:member'
    summary: |-
      セクションを含むセクション グループを取得します。 セクションがノートブックの直接の子である場合は null を返します。 読み取り専用です。

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentSectionGroupOrNull
    fullName: parentSectionGroupOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroupOrNull: OneNote.SectionGroup;'
      return:
        type:
          - 'onenote!OneNote.SectionGroup:class'
  - uid: 'onenote!OneNote.Section#toJSON:member(1)'
    summary: API オブジェクトが`toJSON()`渡されるときに、より有用な出力を提供するために、JavaScript メソッドをオーバーライドします。`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->その後、渡された`toJSON`オブジェクトのメソッドを呼び出します。元の OneNote の Section オブジェクトは API オブジェクトですが、この`toJSON`メソッドはプレーンな JavaScript オブジェクト (として型指定されます) を返します。`OneNote.Interfaces.SectionData`<!-- -->) は、元のオブジェクトから読み込まれた子プロパティの浅いコピーを格納します。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.SectionData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.SectionData:interface'
        description: ''
  - uid: 'onenote!OneNote.Section#track:member(1)'
    summary: ドキュメントの環境変更に基づいて自動的に調整する目的でオブジェクトを追跡します。 これは context.trackedObjects.add(thisObject) 呼び出しの省略形です。 ".sync" 呼び出し間で、かつ ".run" バッチの連続実行の外でこのオブジェクトを使用しているとき、オブジェクトであるプロパティを設定したか、あるメソッドを呼び出したときに "InvalidObjectPath" エラーが表示される場合、オブジェクトを最初に作成したときに、追跡対象オブジェクトの集まりにそのオブジェクトを追加しておく必要がありました。
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: ''
  - uid: 'onenote!OneNote.Section#untrack:member(1)'
    summary: 前に追跡されていた場合、このオブジェクトに関連付けられているメモリを解放します。 これは context.trackedObjects.remove(thisObject) 呼び出しの省略形です。 追跡対象オブジェクトが多いとホスト アプリケーションの動作が遅くなります。追加したオブジェクトが不要になったら、必ずそれを解放してください。 メモリ リリースを有効にするには、"context.sync()" を先に呼び出す必要があります。
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: ''
  - uid: 'onenote!OneNote.Section#webUrl:member'
    summary: |-
      ページの Web URL。 読み取りのみ

      \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: webUrl
    fullName: webUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly webUrl: string;'
      return:
        type:
          - string
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.Page:class'
    name: OneNote.Page
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Section:class'
    name: OneNote.Section
  - uid: 'onenote!OneNote.Notebook:class'
    name: OneNote.Notebook
  - uid: 'onenote!OneNote.SectionGroup:class'
    name: OneNote.SectionGroup
  - uid: 'onenote!OneNote.Section#getRestApiId~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'onenote!OneNote.InsertLocation:enum'
    name: OneNote.InsertLocation
  - uid: 'onenote!OneNote.Interfaces.SectionLoadOptions:interface'
    name: OneNote.Interfaces.SectionLoadOptions
  - uid: 'onenote!OneNote.PageCollection:class'
    name: OneNote.PageCollection
  - uid: 'onenote!OneNote.Interfaces.SectionData:interface'
    name: OneNote.Interfaces.SectionData