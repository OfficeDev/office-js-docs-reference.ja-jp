### YamlMime:UniversalReference
ms.openlocfilehash: d3416765ed68d59c6960960d8cc928c576212861
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 02/13/2019
ms.locfileid: "29974221"
items:
- uid: onenote.OneNote.TableCell
  summary: >-
    OneNote 表内のセルを表します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: OneNote.TableCell
  fullName: OneNote.TableCell
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.TableCell.appendHtml
  - onenote.OneNote.TableCell.appendImage
  - onenote.OneNote.TableCell.appendRichText
  - onenote.OneNote.TableCell.appendTable
  - onenote.OneNote.TableCell.cellIndex
  - onenote.OneNote.TableCell.clear
  - onenote.OneNote.TableCell.context
  - onenote.OneNote.TableCell.id
  - onenote.OneNote.TableCell.load
  - onenote.OneNote.TableCell.load_1
  - onenote.OneNote.TableCell.load_2
  - onenote.OneNote.TableCell.paragraphs
  - onenote.OneNote.TableCell.parentRow
  - onenote.OneNote.TableCell.rowIndex
  - onenote.OneNote.TableCell.set
  - onenote.OneNote.TableCell.set_1
  - onenote.OneNote.TableCell.shadingColor
  - onenote.OneNote.TableCell.toJSON
  - onenote.OneNote.TableCell.track
  - onenote.OneNote.TableCell.untrack
- uid: onenote.OneNote.TableCell.appendHtml
  summary: >-
    指定された HTML を TableCell の一番下に追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: appendHtml(html)
  fullName: appendHtml(html)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'appendHtml(html: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two and add \"Hello\".\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                cell.appendHtml(\"<p>Hello</p>\");\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: html
      description: 追加する HTML 文字列です。 OneNote アドインの JavaScript API には、[サポートされている HTML](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html)を参照してください。
      type:
      - string
- uid: onenote.OneNote.TableCell.appendImage
  summary: >-
    指定した Image をテーブル セルに追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: appendImage(base64EncodedImage, width, height)
  fullName: appendImage(base64EncodedImage, width, height)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'appendImage(base64EncodedImage: string, width: number, height: number): OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
      description: ''
    parameters:
    - id: base64EncodedImage
      description: 追加する HTML 文字列です。
      type:
      - string
    - id: width
      description: 省略可能。ポイント単位の幅。既定値は null で、イメージの幅が使用されます。
      type:
      - number
    - id: height
      description: 省略可能。ポイント単位の高さ。既定値は null で、イメージの高さが使用されます。
      type:
      - number
- uid: onenote.OneNote.TableCell.appendRichText
  summary: >-
    指定したテキストをテーブル セルに追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: appendRichText(paragraphText)
  fullName: appendRichText(paragraphText)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'appendRichText(paragraphText: string): OneNote.RichText;'
    return:
      type:
      - onenote.OneNote.RichText
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    var appendedRichText = null;\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two and add \"Hello\".\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                appendedRichText = cell.appendRichText(\"Hello\");\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: paragraphText
      description: 追加する HTML 文字列です。
      type:
      - string
- uid: onenote.OneNote.TableCell.appendTable
  summary: >-
    指定された数の行と列を含むテーブルをテーブル セルに追加します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: appendTable(rowCount, columnCount, values)
  fullName: appendTable(rowCount, columnCount, values)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'appendTable(rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
    return:
      type:
      - OneNote.Table
      description: ''
    parameters:
    - id: rowCount
      description: 必須。表の行数。
      type:
      - number
    - id: columnCount
      description: 必須。表の列数。
      type:
      - number
    - id: values
      description: 省略可能な 2 次元配列。 対応する文字列が配列で指定されている場合、セルに設定されます。
      type:
      - string[][]
- uid: onenote.OneNote.TableCell.cellIndex
  summary: >-
    その行のセルのインデックスを取得します。読み取り専用。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: cellIndex
  fullName: cellIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellIndex: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.TableCell.clear
  summary: >-
    セルの内容をクリアします。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: clear()
  fullName: clear()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: ''
- uid: onenote.OneNote.TableCell.context
  summary: オブジェクトに関連付けられた要求コンテキスト。 これは、Office ホスト アプリケーションのプロセスに、アドインのプロセスを接続します。
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: onenote.OneNote.TableCell.id
  summary: >-
    セルの ID を取得します。読み取り専用です。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.TableCell.load
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 "Context.sync()"は、プロパティを読み取る前に呼び出す必要があります。
  remarks: >-
    だけでなく、この署名は、このメソッドは、次の署名をします。


    `load(option?: string | string[]): OneNote.TableCell`-ここで、オプションは、コンマで区切られた文字列またはロードするにはプロパティを指定する文字列の配列です。


    `load(option?: { select?: string; expand?: string; }): OneNote.TableCell`-どこで読み込むには、プロパティを指定するコンマ区切りの文字列は、option.select、options.expand を読み込むナビゲーション プロパティを指定するコンマ区切りの文字列。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.TableCell`でコレクション型のみ使用できます。 前の署名に似ていますが。 Option.top は、結果に含めることができるコレクション アイテムの最大数を指定します。 Option.skip はスキップされ、その結果に含まれていない項目の数を指定します。 Option.top が指定されている場合、結果セットが指定数のアイテムをスキップした後開始されます。
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OneNote.Interfaces.TableCellLoadOptions): OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - onenote.OneNote.Interfaces.TableCellLoadOptions
- uid: onenote.OneNote.TableCell.load_1
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 呼び出す必要があります`context.sync()`プロパティを読み取る前にします。
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
      description: "\n#### <a name=\"examples\"></a>例\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                \n                // Queue a command to load the table cell.\n                ctx.load(cell);\n                ctx.sync().then(function() {\n                    console.log(\"Cell Id: \" + cell.id);\n                    console.log(\"Cell Index: \" + cell.cellIndex);\n                    console.log(\"Cell's Row Index: \" + cell.rowIndex);\n                });\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nParentTable, ParentRow, Paragraphs\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                \n                // Queue a command to load parentTable, parentRow and paragraphs of the table cell.\n                ctx.load(cell, \"parentTable, parentRow, paragraphs\");\n                \n                ctx.sync().then(function() {\n                    console.log(\"Parent Table Id: \" + cell.parentTable.id);\n                    console.log(\"Parent Row Id: \" + cell.parentRow.id);\n                    var paragraphs = cell.paragraphs;\n                    \n                    for (var i = 0; i < paragraphs.items.length; i++) {\n                        console.log(\"Paragraph Id: \" + paragraphs.items[i].id);\n                    }\n                });\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: コンマで区切られた文字列またはロードするにはプロパティを指定する文字列の配列。
      type:
      - string | string[]
- uid: onenote.OneNote.TableCell.load_2
  summary: オブジェクトの指定したプロパティを読み込むためのコマンドをキューします。 呼び出す必要があります`context.sync()`プロパティを読み取る前にします。
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: 読み込むには、プロパティを指定するコンマ区切りの文字列は、propertyNamesAndPaths.select、propertyNamesAndPaths.expand は、読み込むナビゲーション プロパティを指定するコンマ区切りの文字列。
      type:
      - '{ select?: string; expand?: string; }'
- uid: onenote.OneNote.TableCell.paragraphs
  summary: >-
    TableCell に含まれる Paragraph オブジェクトのコレクションを取得します。読み取り専用です。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: paragraphs
  fullName: paragraphs
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraphs: OneNote.ParagraphCollection;'
    return:
      type:
      - onenote.OneNote.ParagraphCollection
- uid: onenote.OneNote.TableCell.parentRow
  summary: >-
    セルの親行を取得します。読み取り専用。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: parentRow
  fullName: parentRow
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentRow: OneNote.TableRow;'
    return:
      type:
      - OneNote.TableRow
- uid: onenote.OneNote.TableCell.rowIndex
  summary: >-
    テーブルのセル行のインデックスを取得します。読み取り専用。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: rowIndex
  fullName: rowIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.TableCell.set
  summary: 同時に複数のオブジェクトのプロパティを設定します。 適切なプロパティで、普通のオブジェクトまたは同じ種類の別の API のオブジェクトのいずれかを渡すことができます。
  remarks: >-
    このメソッドには、次の追加の署名があります。


    `set(properties: OneNote.TableCell): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.TableCellUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Isomorphically メソッドが呼び出されますオブジェクトのプロパティを構造化されているプロパティを使用して JavaScript オブジェクトです。
      type:
      - Interfaces.TableCellUpdateData
    - id: options
      description: プロパティ オブジェクトが読み取り専用プロパティを設定しようとすると、エラーを非表示にするオプションが用意されています。
      type:
      - office.OfficeExtension.UpdateOptions
- uid: onenote.OneNote.TableCell.set_1
  summary: オブジェクトに読み込まれている既存のオブジェクトに基づいて、同時に複数のプロパティを設定します。
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: OneNote.TableCell): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - onenote.OneNote.TableCell
- uid: onenote.OneNote.TableCell.shadingColor
  summary: >-
    セルの網かけの色を取得および設定します。


    \[[API セット: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: shadingColor
  fullName: shadingColor
  langs:
  - typeScript
  type: property
  syntax:
    content: 'shadingColor: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.TableCell.toJSON
  summary: JavaScript を上書き`toJSON()`API オブジェクトに渡すときより有用な出力を提供するためにメソッド`JSON.stringify()` <!-- -->。 (`JSON.stringify`<!-- -->で、さらに、`toJSON`に渡されるオブジェクトのメソッドです)。API のオブジェクトの元の OneNote.TableCell オブジェクトには、`toJSON`メソッドは、プレーンな JavaScript オブジェクトを返します (として型指定された`OneNote.Interfaces.TableCellData` <!-- -->) を元のオブジェクトから読み込まれた子プロパティのシャロー コピーが含まれています。
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.TableCellData;'
    return:
      type:
      - onenote.OneNote.Interfaces.TableCellData
      description: ''
- uid: onenote.OneNote.TableCell.track
  summary: 周囲の文書内の変更に基づいて自動的に調整するオブジェクトを追跡します。 この呼び出しは、context.trackedObjects.add(thisObject) の短縮です。 プロパティを設定するときは、このオブジェクト".sync"の呼び出しで、".run"のバッチ、および get"InvalidObjectPath"エラーの連続実行範囲の外側を使用しているまたは追跡対象のオブジェクトにオブジェクトを追加するのには必要なオブジェクトのメソッドを呼び出して、コレクションのオブジェクトが最初に作成したときです。
  name: track()
  fullName: track()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
      description: ''
- uid: onenote.OneNote.TableCell.untrack
  summary: リリース履歴管理されていた場合に、このオブジェクトに関連付けられているメモリです。 この呼び出しは、context.trackedObjects.remove(thisObject) の省略形です。 追跡の多くのオブジェクトを持つ速度が遅くなりますホスト アプリケーションでは、そのためできたら、追加するすべてのオブジェクトを解放するために注意してくださいそれらを使用します。 メモリの解放を有効にするには、"context.sync()"を呼び出す必要があります。
  name: untrack()
  fullName: untrack()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
      description: ''
