### YamlMime:TSType
name: Office.MessageCompose
uid: outlook!Office.MessageCompose:interface
package: outlook!
fullName: Office.MessageCompose
summary: >-
  [Office.context.mailbox.item](xref:outlook!Office.Item:interface)のメッセージ作成モード<!-- -->.


  **重要**: これは内部の Outlook オブジェクトであり、既存のインターフェイスを通じて直接公開されるのではありません。 これは次のモードとして扱う必要があります。 `Office.context.mailbox.item`<!-- -->. 詳細については、「 [オブジェクト モデル」](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.1/office.context.mailbox.item) ページを参照してください。


  親インターフェイス:


  - [ItemCompose](xref:outlook!Office.ItemCompose:interface)


  - [Message](xref:outlook!Office.Message:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bcc
  uid: outlook!Office.MessageCompose#bcc:member
  package: outlook!
  fullName: bcc
  summary: >-
    メッセージの **BCC** (ブラインド カーボン コピー) 行の受信者を取得または更新するメソッドを提供するオブジェクトを取得します。


    クライアント/プラットフォーム (Windows、Mac など) によっては、取得または更新できる受信者の数に制限が適用される場合があります。 詳細については [、Recipients オブジェクト](xref:outlook!Office.Recipients:interface) を参照してください。


    \[[API セット: メールボックス 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    #### <a name="examples"></a>例


    ```javascript

    Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.bcc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfBccRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (var i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    var email = $("#emailBcc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bcc: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: body
  uid: outlook!Office.MessageCompose#body:member
  package: outlook!
  fullName: body
  summary: >-
    アイテムの本文を操作するメソッドを提供するオブジェクトを取得します。


    \[[API セット: メールボックス 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    #### <a name="examples"></a>例


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: cc
  uid: outlook!Office.MessageCompose#cc:member
  package: outlook!
  fullName: cc
  summary: >-
    メッセージの CC (カーボン コピー) の受信者へのアクセスを提供します。 オブジェクトの種類とアクセス レベルは、現在のアイテムのモードによって異なります。


    `cc` プロパティは、メッセージの **Cc** 行にある受信者を取得または更新するメソッドを提供する `Recipients` オブジェクトを返します。 ただし、クライアント/プラットフォーム (Windows、Mac など) によっては、取得または更新できる受信者の数に制限が適用される場合があります。 詳細については [、Recipients オブジェクト](xref:outlook!Office.Recipients:interface) を参照してください。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    #### <a name="examples"></a>例


    ```javascript

    Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.cc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfCcRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (var i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    var email = $("#emailCc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'cc: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: conversationId
  uid: outlook!Office.MessageCompose#conversationId:member
  package: outlook!
  fullName: conversationId
  summary: >-
    特定のメッセージが含まれている電子メールの会話の識別子を取得します。


    メール アプリを閲覧フォームでアクティブ化するか、新規作成フォームの返信でアクティブ化すると、このプロパティで整数を取得することができます。その後、ユーザーが返信の件名を変更した場合、その返信の送信時にメッセージの会話 ID が変更され、以前に取得した値は適用されなくなります。


    新規作成フォームで新しいアイテムに対してこのプロパティに null を取得します。ユーザーが件名を設定し、アイテムを保存する場合、`conversationId` プロパティは値を返します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'conversationId: string;'
    return:
      type: string
- name: itemType
  uid: outlook!Office.MessageCompose#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    インスタンスが表しているアイテムの種類を取得します。


    このプロパティは、アイテム オブジェクトインスタンスがメッセージか予定かを示す列挙値 `itemType` `ItemType` の 1 つを返します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: subject
  uid: outlook!Office.MessageCompose#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    アイテムの件名フィールドに示される説明を取得または設定します。


    `subject` プロパティは、電子メール サーバーによって送信されたアイテムの件名全体を取得または設定します。


    `subject` プロパティは件名を取得および設定するためのメソッドを提供する `Subject` オブジェクトを返します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: Subject;'
    return:
      type: <xref uid="outlook!Office.Subject:interface" />
- name: to
  uid: outlook!Office.MessageCompose#to:member
  package: outlook!
  fullName: to
  summary: >-
    メッセージの **To** 行にある受信者へのアクセスを提供します。 オブジェクトの種類とアクセス レベルは、現在のアイテムのモードによって異なります。


    `to` プロパティは、メッセージの **To** 行の受信者を取得または更新するメソッドを提供する `Recipients` オブジェクトを返します。 ただし、クライアント/プラットフォーム (Windows、Mac など) によっては、取得または更新できる受信者の数に制限が適用される場合があります。 詳細については [、Recipients オブジェクト](xref:outlook!Office.Recipients:interface) を参照してください。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    #### <a name="examples"></a>例


    ```javascript

    Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.to.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfToRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (var i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    var email = $("#emailTo")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'to: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
methods:
- name: addFileAttachmentAsync(uri, attachmentName, options, callback)
  uid: outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)
  package: outlook!
  fullName: addFileAttachmentAsync(uri, attachmentName, options, callback)
  summary: >-
    ファイルを添付ファイルとしてメッセージまたは予定に追加します。


    `addFileAttachmentAsync` メソッドは、指定した URI にあるファイルをアップロードし、新規作成フォーム内のアイテムに添付します。


    その後、`removeAttachmentAsync` メソッドで識別子を使用して同じセッションの添付ファイルを削除できます。


    **重要**: Windows 上の Outlook の最近のビルドでは、このアクションに誤ってヘッダーを追加するバグが導入されました (この API を使用する場合も Outlook UI を使用する場合も `Authorization: Bearer` )。 この問題を回避するには、要件セット 1.8 で導入された API を `addFileAttachmentFromBase64` 使用してみてください。


    \[[API セット: メールボックス 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    **エラー**:


    - `AttachmentSizeExceeded`<!-- -->: 添付ファイルが許可されているサイズより大きい。


    - `FileTypeNotSupported`<!-- -->: 添付ファイルの拡張子は許可されません。


    - `NumberOfAttachmentsExceeded`<!-- -->: メッセージまたは予定の添付ファイルが多すぎます。


    #### <a name="examples"></a>例


    ```javascript

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }

    ```

    ```javascript

    // The following example adds an image file as an inline attachment and

    // references the attachment in the message body.

    Office.context.mailbox.item.addFileAttachmentAsync(
        "http://i.imgur.com/WJXklif.png",
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                    // Do something here.
                });
        });
    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: uri
      description: メッセージまたは予定に添付するファイルの場所を示す URI。 最大長は 2048 文字です。
      type: string
    - id: attachmentName
      description: 添付ファイルのアップロード時に表示される添付ファイルの名前。 最大長は 255 文字です。
      type: string
    - id: options
      description: '省略可能。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、アクセスする任意のオブジェクトをコールバック メソッドで提供できます。 `isInline`<!-- -->: true の場合、添付ファイルはメッセージ本文にインラインで表示され、添付ファイルの一覧には表示されません。'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isInline: boolean }'
    - id: callback
      description: 省略可能。 メソッドが完了すると、パラメーターで渡された関数が、型の 1 つの `callback` パラメーターで呼び出されます。 `Office.AsyncResult`<!-- -->. 成功すると、添付ファイルの識別子が `asyncResult.value` プロパティに設定されます。 添付ファイルのアップロードに失敗した場合、`asyncResult` オブジェクトには、エラーの説明を提供する `Error` オブジェクトが含まれます。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  uid: outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)
  package: outlook!
  fullName: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  summary: >-
    メッセージなどの Exchange アイテムを添付ファイルとして、メッセージまたは予定に追加します。


    この `addItemAttachmentAsync` メソッドは、指定された Exchange 識別子を持つアイテムを新規作成フォームのアイテムに添付します。 コールバック メソッドを指定すると、メソッドは 1 つのパラメーターで呼び出されます。 `asyncResult`<!-- -->添付ファイル識別子またはアイテムの添付中に発生したエラーを示すコードを含む。 必要に応じて、options パラメーターを使用して状態情報をコールバック メソッドに渡します。


    その後、`removeAttachmentAsync` メソッドで識別子を使用して同じセッションの添付ファイルを削除できます。


    Office アドインを Outlook on the web で実行している場合、編集中のアイテム以外のアイテムに `addItemAttachmentAsync` メソッドでアイテムを添付できます。ただし、これはサポートされていないため、お勧めできません。


    \[[API セット: メールボックス 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    **エラー**:


    - `NumberOfAttachmentsExceeded`<!-- -->: メッセージまたは予定の添付ファイルが多すぎます。


    #### <a name="examples"></a>例


    ```javascript

    // The following example adds an existing Outlook item as an attachment

    // with the name `My Attachment`.

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: itemId
      description: 添付するアイテムの Exchange 識別子。 最大長は 100 文字です。
      type: any
    - id: attachmentName
      description: 添付ファイルのアップロード時に表示される添付ファイルの名前。 最大長は 255 文字です。
      type: string
    - id: options
      description: '省略可能。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、アクセスする任意のオブジェクトをコールバック メソッドで提供できます。'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 メソッドが完了すると、パラメーターで渡された関数が、型の 1 つの `callback` パラメーターで呼び出されます。 `Office.AsyncResult`<!-- -->. 成功すると、添付ファイルの識別子が `asyncResult.value` プロパティに設定されます。 添付ファイルの追加に失敗した場合、`asyncResult` オブジェクトには、エラーの説明を提供する `Error` オブジェクトが含まれます。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    選択されたアイテムのこのアドインのカスタム プロパティを非同期に読み込みます。


    カスタム プロパティは、アプリケーションごと、アイテムごとのキーと値のペアとして格納されます。このメソッドは、コールバックで `CustomProperties` オブジェクトを返します。このオブジェクトは、現在のアイテムおよび現在のアドインに固有のカスタム プロパティにアクセスするためのメソッドを提供します。カスタム プロパティは、アイテム上では暗号化されません。そのため、セキュリティ保護記憶域として使用するべきではありません。


    カスタム プロパティは `CustomProperties` 、asyncResult.value プロパティのオブジェクトとして提供されます。 このオブジェクトは、アイテムからカスタム プロパティを取得、設定、削除し、サーバーに設定し直すカスタム プロパティへの変更を保存するために使用できます。
  remarks: "**[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`\n\n**[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: メソッドが完了すると、パラメーターで渡された関数が、型の 1 つの `callback` パラメーターで呼び出されます。 `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: 省略可能。 開発者は、コールバック関数でアクセスする任意のオブジェクトを指定できます。 このオブジェクトには、コールバック関数の `asyncResult.asyncContext` プロパティによってアクセスすることができます。
      type: any
    return:
      type: void
      description: ''
- name: removeAttachmentAsync(attachmentId, options, callback)
  uid: outlook!Office.MessageCompose#removeAttachmentAsync:member(1)
  package: outlook!
  fullName: removeAttachmentAsync(attachmentId, options, callback)
  summary: >-
    メッセージまたは予定から添付ファイルを削除します。


    `removeAttachmentAsync` メソッドは、指定した識別子の添付ファイルをアイテムから削除します。 ベスト プラクティスとして、同じメール アプリが同じセッションで添付ファイルを追加した場合にのみ、その添付ファイルの識別子を使用して添付ファイルを削除することをお勧めします。 Outlook on the web とモバイル デバイスでは、添付ファイル識別子は同じセッション内でのみ有効です。 ユーザーがアプリを閉じるとセッションが終了するか、ユーザーがインライン フォームの作成を開始した後、フォームをポップアップ表示して別のウィンドウで続行します。


    \[[API セット: メールボックス 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[適用可能な Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: メッセージの作成


    **エラー**:


    - `InvalidAttachmentId`<!-- -->: 添付ファイル識別子が存在しません。


    #### <a name="examples"></a>例


    ```javascript

    // The following code removes an attachment with an identifier of '0'.

    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: attachmentId
      description: 削除する添付ファイルの識別子。 Outlook on the web および Windows では、最大文字列長は `attachmentId` 200 文字です。
      type: string
    - id: options
      description: '省略可能。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、アクセスする任意のオブジェクトをコールバック メソッドで提供できます。'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能。 メソッドが完了すると、パラメーターで渡された関数が、型の 1 つの `callback` パラメーターで呼び出されます。 `Office.AsyncResult`<!-- -->. 添付ファイルの削除に失敗すると、`asyncResult.error` プロパティにはエラー コードとエラーの理由が含まれます。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Message:interface" />
metadata:
  ms.openlocfilehash: 3a0efeae0a61c9d681a0dbe0b510679f03d4d68b
  ms.sourcegitcommit: 9dba9247601805ad821e7a7260ac418e566786b7
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 02/10/2021
  ms.locfileid: "50173378"
