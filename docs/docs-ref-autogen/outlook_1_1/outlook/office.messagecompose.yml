### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.MessageCompose:interface'
    summary: |-
      メッセージ作成モードの[Office. mailbox。](xref:outlook!Office.Item:interface)<!-- -->.

      **重要**: これは、内部の Outlook オブジェクトであり、既存のインターフェイスを使用して直接公開されるものではありません。 これは、Office の1つのモードとして扱う必要があります。 詳細については、「[オブジェクトモデル](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.1/office.context.mailbox.item)」ページを参照してください。

      親インターフェイス:

      - [ItemCompose 作成](xref:outlook!Office.ItemCompose:interface)

      - [Message](xref:outlook!Office.Message:interface)
    name: Office.MessageCompose
    fullName: Office.MessageCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Message:interface'
      - 'outlook!Office.ItemCompose:interface'
    package: outlook!
    children:
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#bcc:member'
      - 'outlook!Office.MessageCompose#body:member'
      - 'outlook!Office.MessageCompose#cc:member'
      - 'outlook!Office.MessageCompose#conversationId:member'
      - 'outlook!Office.MessageCompose#itemType:member'
      - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#subject:member'
      - 'outlook!Office.MessageCompose#to:member'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
    summary: |-
      ファイルを添付ファイルとしてメッセージまたは予定に追加します。

      AddFileAttachmentAsync メソッドは、指定した URI にあるファイルをアップロードし、新規作成フォーム内のアイテムに添付します。

      その後、removeAttachmentAsync メソッドで識別子を使用して、同じセッションの添付ファイルを削除することができます。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: readwriteitem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      **エラー**:

      - AttachmentSizeExceeded: 添付ファイルが許可されているサイズを超えています。

      - FileTypeNotSupported: 添付ファイルの拡張子が許可されていません。

      - NumberOfAttachmentsExceeded: メッセージまたは予定に添付ファイルが多すぎます。

      #### <a name="examples"></a>例

      ```javascript
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }
      ```
      ```javascript
      // The following example adds an image file as an inline attachment and
      // references the attachment in the message body.
      Office.context.mailbox.item.addFileAttachmentAsync(
          "http://i.imgur.com/WJXklif.png",
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                      // Do something here.
                  });
          });
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: メッセージまたは予定に添付するファイルの場所を示す URI。 最大長は 2048 文字です。
          type:
            - string
        - id: attachmentName
          description: 添付ファイルのアップロード時に表示される添付ファイルの名前。 最大長は 255 文字です。
          type:
            - string
        - id: options
          description: '省略可能。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 asyncContext: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。 isInline: true の場合は、添付ファイルがインラインでメッセージ本文に表示され、添付ファイル一覧に表示されないことを示します。'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: 省略可能。 メソッドが完了すると、callback パラメーターで渡された関数が呼び出され、1つのパラメーターの型が事務であるということになります。 成功すると、添付ファイルの識別子が asyncResult プロパティに提供されます。 添付ファイルのアップロードが失敗した場合、asyncResult オブジェクトには、エラーの説明を提供する Error オブジェクトが格納されます。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
    summary: |-
      ファイルを添付ファイルとしてメッセージまたは予定に追加します。

      AddFileAttachmentAsync メソッドは、指定した URI にあるファイルをアップロードし、新規作成フォーム内のアイテムに添付します。

      その後、removeAttachmentAsync メソッドで識別子を使用して、同じセッションの添付ファイルを削除することができます。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: readwriteitem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      **エラー**:

      - AttachmentSizeExceeded: 添付ファイルが許可されているサイズを超えています。

      - FileTypeNotSupported: 添付ファイルの拡張子が許可されていません。

      - NumberOfAttachmentsExceeded: メッセージまたは予定に添付ファイルが多すぎます。
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: メッセージまたは予定に添付するファイルの場所を示す URI。 最大長は 2048 文字です。
          type:
            - string
        - id: attachmentName
          description: 添付ファイルのアップロード時に表示される添付ファイルの名前。 最大長は 255 文字です。
          type:
            - string
        - id: callback
          description: 省略可能。 メソッドが完了すると、callback パラメーターで渡された関数が呼び出され、1つのパラメーターの型が事務であるということになります。 成功すると、添付ファイルの識別子が asyncResult プロパティに提供されます。 添付ファイルのアップロードが失敗した場合、asyncResult オブジェクトには、エラーの説明を提供する Error オブジェクトが格納されます。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
    summary: |-
      メッセージなどの Exchange アイテムを添付ファイルとして、メッセージまたは予定に追加します。

      AddItemAttachmentAsync メソッドは、指定された Exchange 識別子を持つアイテムを新規作成フォームのアイテムに添付します。 コールバックメソッドを指定すると、メソッドは1つのパラメーター asyncResult を指定して呼び出されます。これには、添付ファイルの識別子、またはアイテムの添付中に発生したエラーを示すコードが含まれます。 必要に応じて、options パラメーターを使用して、コールバックメソッドに状態情報を渡すことができます。

      その後、removeAttachmentAsync メソッドで識別子を使用して、同じセッションの添付ファイルを削除することができます。

      Office アドインが Outlook on the web で実行されている場合、addItemAttachmentAsync メソッドは、編集しているアイテム以外のアイテムにアイテムを添付できます。ただし、これはサポートされておらず、推奨されていません。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: readwriteitem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      **エラー**:

      - NumberOfAttachmentsExceeded: メッセージまたは予定に添付ファイルが多すぎます。

      #### <a name="examples"></a>例

      ```javascript
      // The following example adds an existing Outlook item as an attachment
      // with the name `My Attachment`.
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }
      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 添付するアイテムの Exchange 識別子。 最大長は 100 文字です。
          type:
            - any
        - id: attachmentName
          description: 添付ファイルのアップロード時に表示される添付ファイルの名前。 最大長は 255 文字です。
          type:
            - string
        - id: options
          description: '省略可能。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 asyncContext: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能。 メソッドが完了すると、callback パラメーターで渡された関数が呼び出され、1つのパラメーターの型が事務であるということになります。 成功すると、添付ファイルの識別子が asyncResult プロパティに提供されます。 添付ファイルの追加が失敗した場合、asyncResult オブジェクトには、エラーの説明を提供する Error オブジェクトが格納されます。
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
    summary: |-
      メッセージなどの Exchange アイテムを添付ファイルとして、メッセージまたは予定に追加します。

      AddItemAttachmentAsync メソッドは、指定された Exchange 識別子を持つアイテムを新規作成フォームのアイテムに添付します。 コールバックメソッドを指定すると、メソッドは1つのパラメーター asyncResult を指定して呼び出されます。これには、添付ファイルの識別子、またはアイテムの添付中に発生したエラーを示すコードが含まれます。 必要に応じて、options パラメーターを使用して、コールバックメソッドに状態情報を渡すことができます。

      その後、removeAttachmentAsync メソッドで識別子を使用して、同じセッションの添付ファイルを削除することができます。

      Office アドインが Outlook on the web で実行されている場合、addItemAttachmentAsync メソッドは、編集しているアイテム以外のアイテムにアイテムを添付できます。ただし、これはサポートされておらず、推奨されていません。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: readwriteitem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      **エラー**:

      - NumberOfAttachmentsExceeded: メッセージまたは予定に添付ファイルが多すぎます。
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 添付するアイテムの Exchange 識別子。 最大長は 100 文字です。
          type:
            - any
        - id: attachmentName
          description: 添付ファイルのアップロード時に表示される添付ファイルの名前。 最大長は 255 文字です。
          type:
            - string
        - id: callback
          description: 省略可能。 メソッドが完了すると、callback パラメーターで渡された関数が呼び出され、1つのパラメーターの型が事務であるということになります。 成功すると、添付ファイルの識別子が asyncResult プロパティに提供されます。 添付ファイルの追加が失敗した場合、asyncResult オブジェクトには、エラーの説明を提供する Error オブジェクトが格納されます。
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#bcc:member'
    summary: |-
      メッセージの BCC (ブラインド カーボン コピー) 行の受信者を取得または更新するメソッドを提供するオブジェクトを取得します。

      既定では、コレクションは最大 100 人のメンバーに制限されています。 ただし、Windows および Mac では、次の制限が適用されます。

      - 最大 500 人のメンバーを取得します。

      - 呼び出しごとに最大 100 人のメンバーを設定し、合計で最大 500 人のメンバーを設定します。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.bcc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfBccRecipients = asyncResult.value;
      }
      ```
    name: bcc
    fullName: bcc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bcc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#body:member'
    summary: |-
      アイテムの本文を操作するメソッドを提供するオブジェクトを取得します。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.MessageCompose#cc:member'
    summary: |-
      メッセージの CC (カーボン コピー) の受信者へのアクセスを提供します。 オブジェクトの種類とアクセスのレベルは、現在のアイテムのモードによって異なります。

      Cc プロパティは、メッセージの Cc 行の受信者を取得または更新するメソッドを提供する[recipients](xref:outlook!Office.Recipients:interface)オブジェクトを返します。 既定では、コレクションは最大 100 人のメンバーに制限されています。 ただし、Windows および Mac では、次の制限が適用されます。

      - 最大 500 人のメンバーを取得します。

      - 呼び出しごとに最大 100 人のメンバーを設定し、合計で最大 500 人のメンバーを設定します。
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.cc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfCcRecipients = asyncResult.value;
      }
      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#conversationId:member'
    summary: |-
      特定のメッセージが含まれている電子メールの会話の識別子を取得します。

      メール アプリを閲覧フォームでアクティブ化するか、新規作成フォームの返信でアクティブ化すると、このプロパティで整数を取得することができます。その後、ユーザーが返信の件名を変更した場合、その返信の送信時にメッセージの会話 ID が変更され、以前に取得した値は適用されなくなります。

      新規作成フォームで新しいアイテムに対してこのプロパティに null を取得します。 ユーザーが件名を設定し、アイテムを保存した場合、conversationId プロパティは値を返します。
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      var conversationId = Office.context.mailbox.item.conversationId;
      console.log("conversationId: " + conversationId);
      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageCompose#itemType:member'
    summary: |-
      インスタンスが表しているアイテムの種類を取得します。

      ItemType プロパティは、アイテムのオブジェクトインスタンスがメッセージであるか予定であるかを示す、ItemType 列挙値の1つを返します。
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.MessageCompose#itemType~0:complex'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
    summary: |-
      選択されたアイテムのこのアドインのカスタム プロパティを非同期に読み込みます。

      カスタムプロパティは、アプリごとのアイテムごとにキーと値のペアとして格納されます。 このメソッドは、コールバックで CustomProperties オブジェクトを返します。このオブジェクトは、現在のアイテムおよび現在のアドインに固有のカスタムプロパティにアクセスするためのメソッドを提供します。 カスタムプロパティはアイテムで暗号化されていないので、セキュリティで保護されたストレージとして使用しないでください。

      カスタムプロパティは、CustomProperties オブジェクトとして、asyncResult プロパティによって提供されます。 このオブジェクトは、アイテムからカスタム プロパティを取得、設定、削除し、サーバーに設定し直すカスタム プロパティへの変更を保存するために使用できます。
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: メソッドが完了すると、callback パラメーターで渡された関数が呼び出され、1つのパラメーターの型が事務であるということになります。
          type:
            - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: 省略可能。 開発者は、コールバック関数でアクセスする任意のオブジェクトを指定できます。 このオブジェクトには、コールバック関数の asyncResult コンテキストプロパティによってアクセスできます。
          type:
            - any
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
    summary: |-
      メッセージまたは予定から添付ファイルを削除します。

      RemoveAttachmentAsync メソッドは、指定された識別子を持つ添付ファイルをアイテムから削除します。 ベスト プラクティスとして、同じメール アプリが同じセッションで添付ファイルを追加した場合にのみ、その添付ファイルの識別子を使用して添付ファイルを削除することをお勧めします。 Outlook on the web とモバイル デバイスでは、添付ファイル識別子は同じセッション内でのみ有効です。 ユーザーがアプリを閉じたとき、またはインラインフォームの作成が開始されたときに、別のウィンドウで続行するためにフォームをポップアウトした後、セッションが終了します。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: readwriteitem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      **エラー**:

      - InvalidAttachmentId: 添付ファイル識別子が存在しません。

      #### <a name="examples"></a>例

      ```javascript
      // The following code removes an attachment with an identifier of '0'.
      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );
      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 削除する添付ファイルの識別子。
          type:
            - string
        - id: options
          description: '省略可能。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 asyncContext: 開発者は、コールバックメソッドでアクセスする任意のオブジェクトを提供できます。'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 省略可能。 メソッドが完了すると、callback パラメーターで渡された関数が呼び出され、1つのパラメーターの型が事務であるということになります。 添付ファイルの削除が失敗した場合、エラーコードにはエラーの理由と共にエラーコードが含まれます。
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
    summary: |-
      メッセージまたは予定から添付ファイルを削除します。

      RemoveAttachmentAsync メソッドは、指定された識別子を持つ添付ファイルをアイテムから削除します。 ベスト プラクティスとして、同じメール アプリが同じセッションで添付ファイルを追加した場合にのみ、その添付ファイルの識別子を使用して添付ファイルを削除することをお勧めします。 Outlook on the web とモバイル デバイスでは、添付ファイル識別子は同じセッション内でのみ有効です。 ユーザーがアプリを閉じたとき、またはインラインフォームの作成が開始されたときに、別のウィンドウで続行するためにフォームをポップアウトした後、セッションが終了します。

      \[[API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: readwriteitem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      **エラー**:

      - InvalidAttachmentId: 添付ファイル識別子が存在しません。
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 削除する添付ファイルの識別子。
          type:
            - string
        - id: callback
          description: 省略可能。 メソッドが完了すると、callback パラメーターで渡された関数が呼び出され、1つのパラメーターの型が事務であるということになります。 添付ファイルの削除が失敗した場合、エラーコードにはエラーの理由と共にエラーコードが含まれます。
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#subject:member'
    summary: |-
      アイテムの件名フィールドに示される説明を取得または設定します。

      Subject プロパティは、電子メールサーバーによって送信されたアイテムの件名全体を取得または設定します。

      Subject プロパティは、件名を取得および設定するためのメソッドを提供する Subject オブジェクトを返します。
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      Office.context.mailbox.item.subject.getAsync(callback);

      function callback(asyncResult) {
          var subject = asyncResult.value;
      }
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
  - uid: 'outlook!Office.MessageCompose#to:member'
    summary: |-
      メッセージの To 行にある受信者へのアクセスを提供します。 オブジェクトの種類とアクセスのレベルは、現在のアイテムのモードによって異なります。

      To プロパティは、メッセージの To 行の受信者を取得または更新するメソッドを提供する Recipients オブジェクトを返します。 既定では、コレクションは最大 100 人のメンバーに制限されています。 ただし、Windows および Mac では、次の制限が適用されます。

      - 最大 500 人のメンバーを取得します。

      - 呼び出しごとに最大 100 人のメンバーを設定し、合計で最大 500 人のメンバーを設定します。
    remarks: |-
      **[最低限のアクセス許可レベル](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      **[適用可能な Outlook モード](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: メッセージの作成

      #### <a name="examples"></a>例

      ```javascript
      Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.to.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfToRecipients = asyncResult.value;
      }
      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
references:
  - uid: 'outlook!Office.Message:interface'
    name: Message
  - uid: 'outlook!Office.ItemCompose:interface'
    name: ItemCompose
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Recipients:interface'
    name: Recipients
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.MessageCompose#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject