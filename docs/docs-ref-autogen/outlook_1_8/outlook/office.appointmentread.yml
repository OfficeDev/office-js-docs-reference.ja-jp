### YamlMime:TSType
name: Office.AppointmentRead
uid: outlook!Office.AppointmentRead:interface
package: outlook!
fullName: Office.AppointmentRead
summary: >-
  [Office.context.mailbox.item の予定出席者モード](xref:outlook!Office.Item:interface)<!-- -->.


  **重要**: これは内部 Outlook オブジェクトであり、既存のインターフェイスを通じて直接公開されるのではありません。 これは次のモードとして扱う必要があります。 `Office.context.mailbox.item`<!-- -->. 詳細については、「 [オブジェクト モデル」](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item) ページを参照してください。


  親インターフェイス:


  - [ItemRead](xref:outlook!Office.ItemRead:interface)


  - [Appointment](xref:outlook!Office.Appointment:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: attachments
  uid: outlook!Office.AppointmentRead#attachments:member
  package: outlook!
  fullName: attachments
  summary: アイテムの添付ファイルを配列として取得します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    **注**: 一部の種類のファイルは、潜在的なセキュリティの問題のために Outlook によってブロックされるため、返されません。 詳細については [、「Outlook のブロックされた添付ファイル」を参照してください。](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.


    #### <a name="examples"></a>例


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachments-read.yaml

    var attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type: <xref uid="outlook!Office.AttachmentDetails:interface" />[]
- name: body
  uid: outlook!Office.AppointmentRead#body:member
  package: outlook!
  fullName: body
  summary: >-
    アイテムの本文を操作するメソッドを提供するオブジェクトを取得します。


    \[[API セット: メールボックス 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: categories
  uid: outlook!Office.AppointmentRead#categories:member
  package: outlook!
  fullName: categories
  summary: >-
    アイテムのカテゴリを管理するためのメソッドを提供するオブジェクトを取得します。


    \[[API セット: メールボックス 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categories: Categories;'
    return:
      type: <xref uid="outlook!Office.Categories:interface" />
- name: dateTimeCreated
  uid: outlook!Office.AppointmentRead#dateTimeCreated:member
  package: outlook!
  fullName: dateTimeCreated
  summary: アイテムが作成された日時を取得します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time: ${Office.context.mailbox.item.dateTimeCreated}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type: Date
- name: dateTimeModified
  uid: outlook!Office.AppointmentRead#dateTimeModified:member
  package: outlook!
  fullName: dateTimeModified
  summary: >-
    アイテムが最後に変更された日時を取得します。


    **注**: このメンバーは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified: ${Office.context.mailbox.item.dateTimeModified}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type: Date
- name: end
  uid: outlook!Office.AppointmentRead#end:member
  package: outlook!
  fullName: end
  summary: >-
    予定が終了する日時を取得します。


    この `end` プロパティは `Date` 、世界協定時刻 (UTC) の日付と時刻の値で表されるオブジェクトです。 このメソッドを使用 `convertToLocalClientTime` して、プロパティ値をクライアントのローカル日付と時刻 `end` に変換できます。


    `Time.setAsync` メソッドを使用して終了時刻を設定する場合、`convertToUtcClientTime` メソッドを使用して、クライアント上のローカルの時刻をサーバーの UTC に変換する必要があります。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'end: Date;'
    return:
      type: Date
- name: enhancedLocation
  uid: outlook!Office.AppointmentRead#enhancedLocation:member
  package: outlook!
  fullName: enhancedLocation
  summary: >-
    予定の場所を取得します。


    このプロパティは EnhancedLocation オブジェクトを返します。このオブジェクトを使用すると、予定に関連付けられた場所のセット (各場所 `enhancedLocation` は[](xref:outlook!Office.EnhancedLocation:interface)[LocationDetails](xref:outlook!Office.LocationDetails:interface)オブジェクトで表されます) を取得できます。


    \[[API セット: メールボックス 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      var places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enhancedLocation: EnhancedLocation;'
    return:
      type: <xref uid="outlook!Office.EnhancedLocation:interface" />
- name: itemClass
  uid: outlook!Office.AppointmentRead#itemClass:member
  package: outlook!
  fullName: itemClass
  summary: >-
    選択されたアイテムの Exchange Web サービスのアイテム クラスを取得します。


    既定のメッセージ クラス (たとえば、カスタムの予定メッセージ クラス) を拡張するカスタム メッセージ クラスを作成できます。 `IPM.Appointment.Contoso`<!-- -->.
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    `itemClass` プロパティには、選択したアイテムのメッセージ クラスを指定します。次に、メッセージまたは予定アイテムの既定のメッセージ クラスを示します。


    <table> <tr> <th>型</th> <th>説明</th> <th>Item クラス</th> </tr> <tr> <td>予定アイテム</td> <td>これらはアイテム クラス IPM の予定表アイテムです。予定または IPM。Appointment.Occurrence.</td> <td>IPM。Appointment,IPM.Appointment.Occurrence</td> </tr> <tr> <td>メッセージ アイテム</td> <td>これには、既定のメッセージ クラス IPM を持つ電子メール メッセージが含まれます。IPM を使用する会議出席依頼、応答、取り消しに注意してください。基本メッセージ クラスとしての Schedule.Meeting。</td> <td>IPM。注:IPM。Schedule.Meeting.Request,IPM.Schedule.Meeting.Neg,IPM.Schedule.Meeting.Pos,IPM.Schedule.Meeting.Tent,IPM.Schedule.Meeting.Canceled</td> </tr> </table>


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemClass: string;'
    return:
      type: string
- name: itemId
  uid: outlook!Office.AppointmentRead#itemId:member
  package: outlook!
  fullName: itemId
  summary: >-
    現在の [アイテムの Exchange Web サービスアイテム識別子](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) を取得します。


    この `itemId` プロパティは新規作成モードでは使用できません。 アイテム識別子が必要な場合、メソッドを使用してアイテムをストアに保存し、コールバック関数のパラメーターでアイテム識別子 `saveAsync` `asyncResult.value` を返します。


    **メモ**: プロパティによって返される識別子 `itemId` は、Exchange Web サービスのアイテム識別子 [と同じです](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!-- -->. `itemId` プロパティは、Outlook Entry ID または Outlook REST API で使用される ID と同一ではありません。 この値を使用して REST API 呼び出しを行う前に、次の値を使用して変換する必要があります。 `Office.context.mailbox.convertToRestId`<!-- -->. 詳細については [、「Outlook アドインからの Outlook REST API の使用」を参照してください。](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id)<!-- -->.
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    // **Important**: `saveAsync` was introduced with requirement set 1.3

    // so you can't get the `itemId` in Compose mode in earlier sets.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemId: string;'
    return:
      type: string
- name: itemType
  uid: outlook!Office.AppointmentRead#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    インスタンスが表しているアイテムの種類を取得します。


    このプロパティは、アイテム オブジェクトインスタンスがメッセージか予定かを示す列挙値 `itemType` `ItemType` の 1 つを返します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: location
  uid: outlook!Office.AppointmentRead#location:member
  package: outlook!
  fullName: location
  summary: >-
    予定の場所を取得します。


    `location` プロパティは、予定の場所を格納した文字列を返します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    var location = Office.context.mailbox.item.location;

    console.log("location: " + location);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location: ${Office.context.mailbox.item.location}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'location: string;'
    return:
      type: string
- name: normalizedSubject
  uid: outlook!Office.AppointmentRead#normalizedSubject:member
  package: outlook!
  fullName: normalizedSubject
  summary: >-
    アイテムの件名を取得し、すべてのプレフィックス (RE: と FWD: を含む) を削除します。


    この `normalizedSubject` プロパティは、アイテムの件名を取得し、標準プレフィックス (RE: や FW: など) を付けます。電子メール プログラムによって追加されます。 これらのプレフィックスが付いたままの状態でアイテムの件名を取得するには、`subject` プロパティを使用します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject: ${Office.context.mailbox.item.normalizedSubject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type: string
- name: notificationMessages
  uid: outlook!Office.AppointmentRead#notificationMessages:member
  package: outlook!
  fullName: notificationMessages
  summary: >-
    アイテムの通知メッセージを取得します。


    \[[API セット: メールボックス 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`\n\n**[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"progressIndicator\",\n    message: \"Progress indicator with id = \" + id\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Non-persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: false\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: true\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nOffice.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          \n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.replaceAsync(\n  id,\n  {\n    type: \"informationalMessage\",\n    message: \"Notification message with id = \" + id + \" has been replaced with an informational message.\",\n    icon: \"icon2\",\n    persistent: false\n  },\n  handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type: <xref uid="outlook!Office.NotificationMessages:interface" />
- name: optionalAttendees
  uid: outlook!Office.AppointmentRead#optionalAttendees:member
  package: outlook!
  fullName: optionalAttendees
  summary: >-
    イベントの任意出席者へのアクセスを提供します。 オブジェクトの種類とアクセス レベルは、現在のアイテムのモードによって異なります。


    この `optionalAttendees` プロパティは、会議の任意出席者ごとに [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) オブジェクトを含む配列を返します。 コレクション サイズの制限:


    - Windows: 500 メンバー


    - Mac: 100 メンバー


    - その他: 制限なし
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-optional-attendees-appointment-attendee.yaml

    var apptOptionalAttendees = Office.context.mailbox.item.optionalAttendees;

    console.log("Optional attendees:");

    for (var i = 0; i < apptOptionalAttendees.length; i++) {
      console.log(
        apptOptionalAttendees[i].displayName +
          " (" +
          apptOptionalAttendees[i].emailAddress +
          ") - response: " +
          apptOptionalAttendees[i].appointmentResponse
      );
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'optionalAttendees: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
- name: organizer
  uid: outlook!Office.AppointmentRead#organizer:member
  package: outlook!
  fullName: organizer
  summary: 指定の会議の開催者の電子メール アドレスを取得します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-attendee.yaml

    var apptOrganizer = Office.context.mailbox.item.organizer;

    console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'organizer: EmailAddressDetails;'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />
- name: recurrence
  uid: outlook!Office.AppointmentRead#recurrence:member
  package: outlook!
  fullName: recurrence
  summary: >-
    予定の定期的なパターンを取得します。 会議出席依頼の定期的なパターンを取得します。


    アイテムが一連のアイテムまたは一連のインスタンスである場合、このプロパティは定期的な予定または会議出席依頼の Recurrence `recurrence` オブジェクトを返します。 [](xref:outlook!Office.Recurrence:interface) `null` は、単一の予定と単一の予定の会議出席依頼に対して返されます。


    **注**: 会議出席依頼の値 `itemClass` は次の値です。 `IPM.Schedule.Meeting.Request`<!-- -->.


    **注**: 繰り返しオブジェクトが null の場合、オブジェクトは単一の予定または 1 つの予定の会議出席依頼であり、一連の予定の一部ではありません。


    \[[API セット: メールボックス 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-recurrence-read.yaml

    var recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'recurrence: Recurrence;'
    return:
      type: <xref uid="outlook!Office.Recurrence:interface" />
- name: requiredAttendees
  uid: outlook!Office.AppointmentRead#requiredAttendees:member
  package: outlook!
  fullName: requiredAttendees
  summary: >-
    イベントの必須出席者へのアクセスを提供します。 オブジェクトの種類とアクセス レベルは、現在のアイテムのモードによって異なります。


    この `requiredAttendees` プロパティは、会議の必須出席者ごとに [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) オブジェクトを含む配列を返します。 コレクション サイズの制限:


    - Windows: 500 メンバー


    - Mac: 100 メンバー


    - その他: 制限なし
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-required-attendees-appointment-attendee.yaml

    var apptRequiredAttendees = Office.context.mailbox.item.requiredAttendees;

    console.log("Required attendees:");

    for (var i = 0; i < apptRequiredAttendees.length; i++) {
      console.log(
        apptRequiredAttendees[i].displayName +
          " (" +
          apptRequiredAttendees[i].emailAddress +
          ") - response: " +
          apptRequiredAttendees[i].appointmentResponse
      );
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'requiredAttendees: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
- name: seriesId
  uid: outlook!Office.AppointmentRead#seriesId:member
  package: outlook!
  fullName: seriesId
  summary: >-
    インスタンスが属する系列の ID を取得します。


    Outlook on the web およびデスクトップ クライアントでは、このアイテムが属する親 (シリーズ) アイテムの `seriesId` Exchange Web サービス (EWS) ID を返します。 ただし、iOS および Android では、seriesId は親アイテムの REST ID を返します。


    **メモ**: プロパティによって返される識別子 `seriesId` は、Exchange Web サービスのアイテム識別子と同じです。 このプロパティは、Outlook REST API で使用される Outlook の `seriesId` ID と同じではありません。 この値を使用して REST API 呼び出しを行う前に、次の値を使用して変換する必要があります。 `Office.context.mailbox.convertToRestId`<!-- -->. 詳細については [、「Outlook アドインからの Outlook REST API の使用」を参照してください。](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.


    プロパティは、単一の予定、系列アイテム、会議出席依頼などの親アイテムを持たないアイテムに対して返し、会議出席依頼ではない他のアイテムに対して返します `seriesId` `null` `undefined` 。


    \[[API セット: メールボックス 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesId: string;'
    return:
      type: string
- name: start
  uid: outlook!Office.AppointmentRead#start:member
  package: outlook!
  fullName: start
  summary: >-
    予定を開始する日時を取得します。


    この `start` プロパティは `Date` 、世界協定時刻 (UTC) の日付と時刻の値で表されるオブジェクトです。 このメソッドを `convertToLocalClientTime` 使用して、値をクライアントのローカル日付と時刻に変換できます。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'start: Date;'
    return:
      type: Date
- name: subject
  uid: outlook!Office.AppointmentRead#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    アイテムの件名フィールドに表示される説明を取得します。


    `subject` プロパティは、電子メール サーバーによって送信されたアイテムの件名全体を取得または設定します。


    `subject` プロパティは文字列を返します。 RE: や FW: などの先頭のプレフィックスを除いた件名を取得するには、このプロパティ `normalizedSubject` を使用します。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: string;'
    return:
      type: string
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.AppointmentRead#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    サポートされているイベントのイベント ハンドラーを追加します。 **注**: イベントは作業ウィンドウでのみ使用できます。


    サポートされているイベントについては、「Item オブジェクト モデル [のイベント」](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events) セクションを参照してください。


    \[[API セット: メールボックス 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: ハンドラーを呼び出す必要のあるイベント。
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: イベントを処理する関数。 関数は、オブジェクト リテラルである単一パラメーターを受け入れる必要があります。 パラメーターの type プロパティは、渡された `eventType` パラメーターと一致します。 `addHandlerAsync`<!-- -->.
      type: any
    - id: options
      description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、アクセスする任意のオブジェクトをコールバック メソッドで提供できます。'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能です。 メソッドが完了すると、パラメーターで渡された関数が 1 つの `callback` パラメーターで呼び出されます。 `asyncResult`<!-- -->オブジェクトです `Office.AsyncResult` 。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayReplyAllForm(formData)
  uid: outlook!Office.AppointmentRead#displayReplyAllForm:member(1)
  package: outlook!
  fullName: displayReplyAllForm(formData)
  summary: >-
    選択したメッセージの送信者とすべての受信者、または選択した予定の開催者とすべての出席者を含む返信フォームを表示します。


    Outlook on the web では、返信フォームは 3 列表示のポップアウト フォーム、2 列または 1 列表示のポップアップ フォームとして表示されます。


    文字列パラメーターのいずれかが制限値を超えると、`displayReplyAllForm` は例外をスローします。


    パラメーターに添付ファイルが指定されている場合、Outlook は、すべての添付ファイルをダウンロードして返信 `formData.attachments` フォームに添付します。 添付ファイルの追加に失敗すると、フォーム UI でエラーが表示されます。 表示できない場合、エラー メッセージはスローされません。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with <b>some bold text</b>.");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: 回答フォームの本文を表すテキストと HTML が含まれる文字列。 文字列は、本文または添付ファイルのデータとコールバック関数を含む 32 KB または [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) オブジェクトに制限されています。
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: displayReplyForm(formData)
  uid: outlook!Office.AppointmentRead#displayReplyForm:member(1)
  package: outlook!
  fullName: displayReplyForm(formData)
  summary: >-
    選択したメッセージの送信者のみ、または選択した予定の開催者のみを含む回答フォームが表示されます。


    Outlook on the web では、返信フォームは 3 列表示のポップアウト フォーム、2 列または 1 列表示のポップアップ フォームとして表示されます。


    文字列パラメーターのいずれかが制限値を超えると、`displayReplyForm` は例外をスローします。


    パラメーターに添付ファイルが指定されている場合、Outlook は、すべての添付ファイルをダウンロードして返信 `formData.attachments` フォームに添付します。 添付ファイルの追加に失敗すると、フォーム UI でエラーが表示されます。 表示できない場合、エラー メッセージはスローされません。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some text in italics</i>.");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: 回答フォームの本文を表すテキストと HTML が含まれる文字列。 文字列は、本文または添付ファイルのデータとコールバック関数を含む 32 KB または [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) オブジェクトに制限されています。
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, options, callback)
  uid: outlook!Office.AppointmentRead#getAttachmentContentAsync:member(1)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, options, callback)
  summary: >-
    メッセージまたは予定から添付ファイルを取得し、それをオブジェクトとして返 `AttachmentContent` します。


    この `getAttachmentContentAsync` メソッドは、指定された識別子を持つ添付ファイルをアイテムから取得します。 ベスト プラクティスとして、識別子を使用して、attachmentIds が呼び出しと一緒に取得されたのと同じセッションで添付ファイルを `getAttachmentsAsync` 取得する必要 `item.attachments` があります。 Outlook on the web とモバイル デバイスでは、添付ファイル識別子は同じセッション内でのみ有効です。 ユーザーがアプリを閉じるとセッションが終了するか、ユーザーがインライン フォームの作成を開始した後、フォームをポップアップ表示して別のウィンドウで続行します。


    \[[API セット: メールボックス 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    **エラー**:


    - `AttachmentTypeNotSupported`<!-- -->: 添付ファイルの種類はサポートされていません。 サポートされていない種類には、リッチ テキスト形式の埋め込みイメージや、メールや予定表アイテム (連絡先やタスク アイテムなど) 以外のアイテムの添付ファイルの種類が含まれます。


    - `InvalidAttachmentId`<!-- -->: 添付ファイル識別子が存在しません。


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: 取得する添付ファイルの識別子。
      type: string
    - id: options
      description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、アクセスする任意のオブジェクトをコールバック メソッドで提供できます。'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能です。 メソッドが完了すると、パラメーターで渡された関数が 1 つの `callback` パラメーターで呼び出されます。 `asyncResult`<!-- -->オブジェクトです `Office.AsyncResult` 。 呼び出しが失敗した場合、プロパティにはエラーの理由を含む `asyncResult.error` エラー コードが含まれる。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getEntities()
  uid: outlook!Office.AppointmentRead#getEntities:member(1)
  package: outlook!
  fullName: getEntities()
  summary: >-
    選択したアイテムの本文にあるエンティティを取得します。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    var entities = Office.context.mailbox.item.getEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type: <xref uid="outlook!Office.Entities:interface" />
      description: ''
- name: getEntitiesByType(entityType)
  uid: outlook!Office.AppointmentRead#getEntitiesByType:member(1)
  package: outlook!
  fullName: getEntitiesByType(entityType)
  summary: >-
    選択したアイテムの本文内で検出された指定のエンティティ型のすべてのエンティティを含む配列を取得します。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`Restricted`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: entityType
      description: >-
        列挙値 `EntityType` の 1 つ。


        このメソッドを使用する最小アクセス許可レベルは次の値です。 `Restricted`<!-- -->エンティティの種類によっては、次 `ReadItem` の表で指定されているアクセスが必要な場合があります。


        <table> <tr> <th>entityType の値</th> <th>返される配列内のオブジェクトの型</th> <th>必要なアクセス許可のレベル</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contact</td> <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>
      type: <xref uid="outlook!Office.MailboxEnums.EntityType:enum" /> | string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: '`entityType` に渡された値が `EntityType` 列挙型の有効なメンバーでない場合、メソッドは null を返します。 指定した型のエンティティがアイテムの本文に存在しない場合、メソッドは空の配列を返します。 それ以外の場合は、返される配列内のオブジェクトの型は、`entityType` パラメーター内の要求されたエンティティの型によって異なります。'
- name: getFilteredEntitiesByName(name)
  uid: outlook!Office.AppointmentRead#getFilteredEntitiesByName:member(1)
  package: outlook!
  fullName: getFilteredEntitiesByName(name)
  summary: >-
    マニフェスト XML ファイルで定義された名前付きフィルターを通過する、選択したアイテム内の既知のエンティティを返します。


    このメソッドは、指定された要素値を持つマニフェスト XML ファイルの rule 要素で定義された正規表現に一致するエンティティ `getFilteredEntitiesByName` `ItemHasKnownEntity` を `FilterName` 返します。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: name
      description: 一致するフィルターを定義する `ItemHasKnownEntity` ルール要素の名前。
      type: string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: パラメーターに一致する要素値を持つ要素がマニフェスト内にない場合、メソッド `ItemHasKnownEntity` `FilterName` `name` は `null`<!-- -->. パラメーターがマニフェスト内の要素と一致するが、現在のアイテムに一致するエンティティがない場合、メソッドは空の `name` `ItemHasKnownEntity` 配列を返します。
- name: getRegExMatches()
  uid: outlook!Office.AppointmentRead#getRegExMatches:member(1)
  package: outlook!
  fullName: getRegExMatches()
  summary: >-
    選択したアイテム内の、マニフェスト XML ファイルで定義された正規表現に一致する文字列の値を返します。


    `getRegExMatches` メソッドは、マニフェスト XML ファイル内の、各 `ItemHasRegularExpressionMatch` または `ItemHasKnownEntity` ルール要素で定義された正規表現に一致する文字列を返します。`ItemHasRegularExpressionMatch` ルールの場合、そのルールで指定されたアイテムのプロパティに一致する文字列が発生する必要があります。`PropertyName` 単純型は、サポートされるプロパティを定義します。


    アイテムの body プロパティに `ItemHasRegularExpressionMatch` ルールを指定する場合、正規表現でさらに本文をフィルター処理し、アイテムの本文全体を返さないようにします。 .* などの正規表現を使用してアイテムの本文全体を取得しても、期待される結果が返されない場合があります。 この場合、代わりに `Body.getAsync` メソッドを使用して本文全体を取得します。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veggies = allMatches.veggies;

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type: any
      description: マニフェスト XML ファイルで定義された正規表現に一致する文字列の配列が格納されたオブジェクト。 各配列の名前は、一致するルールの RegExName 属性または一致ルールの属性の対応する `ItemHasRegularExpressionMatch` `FilterName` 値と等 `ItemHasKnownEntity` しくなります。
- name: getRegExMatchesByName(name)
  uid: outlook!Office.AppointmentRead#getRegExMatchesByName:member(1)
  package: outlook!
  fullName: getRegExMatchesByName(name)
  summary: >-
    選択したアイテム内の、マニフェスト XML ファイルで定義された、指定された正規表現に一致する文字列の値を返します。


    `getRegExMatchesByName` メソッドは、`ItemHasRegularExpressionMatch` ルール要素で定義された正規表現に一致する文字列を返します。このルール要素は、指定された `RegExName` 要素値を持つマニフェスト XML ファイル内にあります。


    アイテムの body プロパティに `ItemHasRegularExpressionMatch` ルールを指定する場合、正規表現でさらに本文をフィルター処理し、アイテムの本文全体を返さないようにします。 .* などの正規表現を使用してアイテムの本文全体を取得しても、期待される結果が返されない場合があります。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    parameters:
    - id: name
      description: 一致するフィルターを定義する `ItemHasRegularExpressionMatch` ルール要素の名前。
      type: string
    return:
      type: string[]
      description: マニフェスト XML ファイルで定義された正規表現に一致する文字列が格納された配列。
- name: getSelectedEntities()
  uid: outlook!Office.AppointmentRead#getSelectedEntities:member(1)
  package: outlook!
  fullName: getSelectedEntities()
  summary: >-
    強調表示された一致内で見つかったユーザーが選択しているエンティティを取得します。 強調表示された一致は、コンテキスト アドインに適用されます。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。


    \[[API セット: メールボックス 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var entities = Office.context.mailbox.item.getSelectedEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedEntities(): Entities;'
    return:
      type: <xref uid="outlook!Office.Entities:interface" />
      description: ''
- name: getSelectedRegExMatches()
  uid: outlook!Office.AppointmentRead#getSelectedRegExMatches:member(1)
  package: outlook!
  fullName: getSelectedRegExMatches()
  summary: >-
    マニフェスト XML ファイルで定義した正規表現と一致する、強調表示された一致内の文字列値を返します。 強調表示された一致は、コンテキスト アドインに適用されます。


    `getSelectedRegExMatches` メソッドは、マニフェスト XML ファイル内の、各 `ItemHasRegularExpressionMatch` または `ItemHasKnownEntity` ルール要素で定義された正規表現に一致する文字列を返します。`ItemHasRegularExpressionMatch` ルールの場合、そのルールで指定されたアイテムのプロパティに一致する文字列が発生する必要があります。`PropertyName` 単純型は、サポートされるプロパティを定義します。


    アイテムの body プロパティに `ItemHasRegularExpressionMatch` ルールを指定する場合、正規表現でさらに本文をフィルター処理し、アイテムの本文全体を返さないようにします。 .* などの正規表現を使用してアイテムの本文全体を取得しても、期待される結果が返されない場合があります。 この場合、代わりに `Body.getAsync` メソッドを使用して本文全体を取得します。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。


    \[[API セット: メールボックス 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of matches for the

    // regular expression rule elements `fruits` and `veggies`, which are

    // specified in the manifest.

    var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();

    var fruits = selectedMatches.fruits;

    var veggies = selectedMatches.veggies;

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRegExMatches(): any;'
    return:
      type: any
      description: マニフェスト XML ファイルで定義された正規表現に一致する文字列の配列が格納されたオブジェクト。各配列の名前は、一致する `ItemHasRegularExpressionMatch` ルールの `RegExName` 属性、または一致する `ItemHasKnownEntity` ルールの `FilterName` 属性の対応する値と等しくなります。
- name: getSharedPropertiesAsync(options, callback)
  uid: outlook!Office.AppointmentRead#getSharedPropertiesAsync:member(1)
  package: outlook!
  fullName: getSharedPropertiesAsync(options, callback)
  summary: >-
    共有フォルダー、予定表、またはメールボックス内の予定またはメッセージのプロパティを取得します。


    この API の使用について詳しくは、代理人アクセスに関 [する記事をご覧](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) ください。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。


    \[[API セット: メールボックス 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: options
      description: '次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、アクセスする任意のオブジェクトをコールバック メソッドで提供できます。'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: メソッドが完了すると、パラメーターで渡された関数が、型の 1 つの `callback` パラメーターで呼び出されます。 `Office.AsyncResult`<!-- -->. 結果 `value` のプロパティは、共有アイテムのプロパティです。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSharedPropertiesAsync(callback)
  uid: outlook!Office.AppointmentRead#getSharedPropertiesAsync:member(2)
  package: outlook!
  fullName: getSharedPropertiesAsync(callback)
  summary: >-
    共有フォルダー、予定表、またはメールボックス内の予定またはメッセージのプロパティを取得します。


    この API の使用について詳しくは、代理人アクセスに関 [する記事をご覧](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) ください。


    **注**: このメソッドは、iOS または Android 上の Outlook ではサポートされていません。


    \[[API セット: メールボックス 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者


    #### <a name="examples"></a>例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: callback
      description: メソッドが完了すると、callback パラメーターで渡された関数が、型の 1 つのパラメーターで呼び出されます。 `Office.AsyncResult`<!-- -->. 結果 `value` のプロパティは、共有アイテムのプロパティです。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.AppointmentRead#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    選択されたアイテムのこのアドインのカスタム プロパティを非同期に読み込みます。


    カスタム プロパティは、アプリケーションごと、アイテムごとのキーと値のペアとして格納されます。このメソッドは、コールバックで `CustomProperties` オブジェクトを返します。このオブジェクトは、現在のアイテムおよび現在のアドインに固有のカスタム プロパティにアクセスするためのメソッドを提供します。カスタム プロパティは、アイテム上では暗号化されません。そのため、セキュリティ保護記憶域として使用するべきではありません。


    カスタム プロパティは `CustomProperties` 、asyncResult.value プロパティのオブジェクトとして提供されます。 このオブジェクトは、アイテムからカスタム プロパティを取得、設定、削除し、サーバーに設定し直すカスタム プロパティへの変更を保存するために使用できます。
  remarks: "**[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`\n\n**[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者\n\n#### <a name=\"examples\"></a>例\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: メソッドが完了すると、パラメーターで渡された関数が、型の 1 つの `callback` パラメーターで呼び出されます。 `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: 省略可能です。 開発者は、コールバック関数でアクセスする任意のオブジェクトを指定できます。 このオブジェクトには、コールバック関数の `asyncResult.asyncContext` プロパティによってアクセスすることができます。
      type: any
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.AppointmentRead#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    サポートされているイベントの種類のイベント ハンドラーを削除します。 **注**: イベントは作業ウィンドウでのみ使用できます。


    サポートされているイベントについては、「Item オブジェクト モデル [のイベント」](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events) セクションを参照してください。


    \[[API セット: メールボックス 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最小アクセス許可レベル](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[該当する Outlook モード](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: 予定の出席者
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: ハンドラーを取り消すイベント。
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: '省略可能です。 次のプロパティのうち 1 つ以上を含むオブジェクト リテラル。 `asyncContext`<!-- -->: 開発者は、アクセスする任意のオブジェクトをコールバック メソッドで提供できます。'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 省略可能です。 メソッドが完了すると、パラメーターで渡された関数が 1 つの `callback` パラメーターで呼び出されます。 `asyncResult`<!-- -->オブジェクトです `Office.AsyncResult` 。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Appointment:interface" />
metadata:
  ms.openlocfilehash: c43af767505d6cdd028d8c09c7ce2942d5dba139
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49850019"
